<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.icylee.dao.CourseMapper" >
  <resultMap id="BaseResultMap" type="cn.icylee.bean.Course" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userid" property="userid" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="summary" property="summary" jdbcType="VARCHAR" />
    <result column="introduction" property="introduction" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="INTEGER" />
    <result column="modularid" property="modularid" jdbcType="INTEGER" />
    <result column="labelid" property="labelid" jdbcType="VARCHAR" />
    <result column="cover" property="cover" jdbcType="VARCHAR" />
    <result column="watch" property="watch" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="createtime" property="createtime" jdbcType="VARCHAR" />
    <result column="updatetime" property="updatetime" jdbcType="VARCHAR" />
  </resultMap>

  <select id="getCourseTotal" parameterType="cn.icylee.bean.TableParameter" resultType="java.lang.Integer">
    SELECT count(*) FROM course
    <where>
      <if test="ids != null and ids != ''">AND labelid REGEXP '${ids}'</if>
      <if test="modularid != null and modularid != ''">AND FIND_IN_SET(modularid,'${modularid}')</if>
      <if test="name != null and name != ''">AND name LIKE '%${name}%'</if>
      <if test="article != null and article != ''">AND FIND_IN_SET(userid,'${article}')</if>
      <if test="status != null and status != ''">AND status = '${status}'</if>
    </where>
  </select>

  <select id="getCourseList" parameterType="cn.icylee.bean.TableParameter" resultType="cn.icylee.bean.Course">
    SELECT co.id, co.`name`, co.userid, co.modularid, co.labelid, co.`status`, co.price, co.createtime, co.updatetime,
           u.nickname AS author, md.modular,
           truncate(case when dis_course.courseid is null then 5 when dis_course.courseid is not null then dis_course.avg_score end, 1) as score
    FROM
    ( SELECT * FROM course WHERE 1 = 1
    <if test="ids != null and ids != ''">AND labelid REGEXP '${ids}'</if>
    <if test="modularid != null and modularid != ''">AND FIND_IN_SET(modularid,'${modularid}')</if>
    <if test="name != null and name != ''">AND name LIKE '%${name}%'</if>
    <if test="article != null and article != ''">AND FIND_IN_SET(userid,'${article}')</if>
    <if test="status != null and status != ''">AND status = '${status}'</if>
    LIMIT #{page}, #{limit} ) co
           left join ( select courseid, avg(score) as avg_score from discuss where disid = 0 group by courseid ) as dis_course on dis_course.courseid = co.id
           LEFT JOIN `user` AS u ON co.userid = u.uid
           left join `modular` as md on co.modularid = md.id
    ORDER BY id ${sort}
  </select>

  <select id="getHotCourseList" parameterType="java.lang.Integer" resultType="cn.icylee.bean.Course">
    SELECT course.id, course.userid, course.`name`, course.price, course.modularid, course.cover, course.watch, u.nickname AS author,
           truncate(case when dis_course.courseid is null then 5 when dis_course.courseid is not null then dis_course.avg_score end, 1) as score
    FROM course
           left join ( select courseid, avg(score) as avg_score from discuss where disid = 0 group by courseid ) as dis_course on dis_course.courseid = course.id
           LEFT JOIN `user` AS u ON course.userid = u.uid
    WHERE course.`status` = '已发布'
    <if test="id != 0">AND course.modularid = #{id}</if>
    ORDER BY course.watch DESC LIMIT 8
  </select>

  <select id="getNewCourseList" parameterType="java.lang.Integer" resultType="cn.icylee.bean.Course">
    SELECT course.id, course.userid, course.`name`, course.price, course.modularid, course.cover, course.watch, u.nickname AS author,
           truncate(case when dis_course.courseid is null then 5 when dis_course.courseid is not null then dis_course.avg_score end, 1) as score
    FROM course
           left join ( select courseid, avg(score) as avg_score from discuss where disid = 0 group by courseid ) as dis_course on dis_course.courseid = course.id
           LEFT JOIN `user` AS u ON course.userid = u.uid
    WHERE course.`status` = '已发布'
    <if test="id != 0">AND course.modularid = #{id}</if>
    ORDER BY course.createtime DESC LIMIT 8
  </select>

  <select id="getNavCourseList" parameterType="java.lang.String" resultType="cn.icylee.bean.Course">
    SELECT course.id, course.userid, course.`name`, course.price, course.modularid, course.cover, course.watch,
           truncate(case when dis_course.courseid is null then 5 when dis_course.courseid is not null then dis_course.avg_score end, 1) as score
    FROM course
           left join ( select courseid, avg(score) as avg_score from discuss where disid = 0 group by courseid ) as dis_course on dis_course.courseid = course.id
    WHERE course.`status` = '已发布' AND FIND_IN_SET(modularid,'${ids}')
    ORDER BY course.createtime DESC LIMIT 4
  </select>

  <select id="getAllCourseList" parameterType="cn.icylee.bean.Modular" resultType="cn.icylee.bean.Course">
    SELECT course.id, course.userid, course.`name`, course.price, course.modularid, course.cover, course.watch, u.nickname AS author,
           truncate(case when dis_course.courseid is null then 5 when dis_course.courseid is not null then dis_course.avg_score end, 1) as score
    FROM course
           left join ( select courseid, avg(score) as avg_score from discuss where disid = 0 group by courseid ) as dis_course on dis_course.courseid = course.id
           LEFT JOIN `user` AS u ON course.userid = u.uid
    WHERE course.`status` = '已发布'
    <if test="ancestor != 0">AND FIND_IN_SET(modularid,'${ids}')</if>
    <if test="count == 0">AND price = 0</if>
    <if test="count == 99">AND price BETWEEN 100 AND 9900</if>
    <if test="count == 199">AND price BETWEEN 9901 AND 19900</if>
    <if test="count == 499">AND price BETWEEN 19901 AND 49900</if>
    <if test="count == 999">AND price BETWEEN 49901 AND 99900</if>
    <if test="count == 1000">AND price >= 99901</if>
    <if test="modular == 'new'">ORDER BY course.createtime DESC</if>
    <if test="modular == 'hot'">ORDER BY course.watch DESC</if>
  </select>

  <select id="getAllCourseTotal" parameterType="cn.icylee.bean.Modular" resultType="java.lang.Integer">
    SELECT count(*) FROM course WHERE course.`status` = '已发布'
    <if test="ancestor != 0">AND FIND_IN_SET(modularid,'${ids}')</if>
    <if test="count == 0">AND price = 0</if>
    <if test="count == 99">AND price BETWEEN 100 AND 9900</if>
    <if test="count == 199">AND price BETWEEN 9901 AND 19900</if>
    <if test="count == 499">AND price BETWEEN 19901 AND 49900</if>
    <if test="count == 999">AND price BETWEEN 49901 AND 99900</if>
    <if test="count == 1000">AND price >= 99901</if>
  </select>

  <select id="getUser" parameterType="java.lang.Integer" resultType="cn.icylee.bean.User">
    select u.uid, u.nickname, u.portrait, u.summary,
           truncate(avg(case when c1.courseid is null then 5 when c1.courseid is not null then c1.avg_score end), 1) as score
    from
      course as c0
        left join (
          select
            courseid, avg(score) as avg_score
          from
            discuss
          where
            disid = 0
          group by
            courseid
        ) as c1 on c1.courseid = c0.id
        left join
          `user` u on c0.userid = u.uid
    where
      c0.userid = #{uid}
  </select>

  <select id="getUserNum" parameterType="java.lang.Integer" resultType="cn.icylee.bean.User">
    SELECT COUNT(*) AS count, SUM(watch) AS watch FROM course WHERE userid = #{uid}
  </select>

  <select id="getFavorites" parameterType="java.lang.Integer" resultType="cn.icylee.bean.Course">
    select course.id, course.userid, course.`name`, course.cover, course.price, course.watch, `user`.nickname as author,
           truncate(case when dis_course.courseid is null then 5 when dis_course.courseid is not null then dis_course.avg_score end, 1) as score
    from follow
           left join course on follow.dataid = course.id
           left join ( select courseid, avg(score) as avg_score from discuss where disid = 0 group by courseid ) as dis_course on dis_course.courseid = course.id
           left join `user` on course.userid = `user`.uid
    where follow.userid = #{uid} and follow.datasource = 'course'
    order by follow.createtime desc
  </select>

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, userid, name, summary, introduction, price, modularid, labelid, cover, watch,
    status, createtime, updatetime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.icylee.bean.CourseExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from course
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from course
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.icylee.bean.CourseExample" >
    delete from course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.icylee.bean.Course" >
    insert into course (id, userid, name,
                        summary, introduction, price,
                        modularid, labelid, cover,
                        watch, status, createtime,
                        updatetime)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
            #{summary,jdbcType=VARCHAR}, #{introduction,jdbcType=VARCHAR}, #{price,jdbcType=INTEGER},
            #{modularid,jdbcType=INTEGER}, #{labelid,jdbcType=VARCHAR}, #{cover,jdbcType=VARCHAR},
            #{watch,jdbcType=INTEGER}, #{status,jdbcType=VARCHAR}, #{createtime,jdbcType=VARCHAR},
            #{updatetime,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.icylee.bean.Course" >
    insert into course
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userid != null" >
        userid,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="summary != null" >
        summary,
      </if>
      <if test="introduction != null" >
        introduction,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="modularid != null" >
        modularid,
      </if>
      <if test="labelid != null" >
        labelid,
      </if>
      <if test="cover != null" >
        cover,
      </if>
      <if test="watch != null" >
        watch,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createtime != null" >
        createtime,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="summary != null" >
        #{summary,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null" >
        #{introduction,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=INTEGER},
      </if>
      <if test="modularid != null" >
        #{modularid,jdbcType=INTEGER},
      </if>
      <if test="labelid != null" >
        #{labelid,jdbcType=VARCHAR},
      </if>
      <if test="cover != null" >
        #{cover,jdbcType=VARCHAR},
      </if>
      <if test="watch != null" >
        #{watch,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.icylee.bean.CourseExample" resultType="java.lang.Integer" >
    select count(*) from course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update course
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.summary != null" >
        summary = #{record.summary,jdbcType=VARCHAR},
      </if>
      <if test="record.introduction != null" >
        introduction = #{record.introduction,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=INTEGER},
      </if>
      <if test="record.modularid != null" >
        modularid = #{record.modularid,jdbcType=INTEGER},
      </if>
      <if test="record.labelid != null" >
        labelid = #{record.labelid,jdbcType=VARCHAR},
      </if>
      <if test="record.cover != null" >
        cover = #{record.cover,jdbcType=VARCHAR},
      </if>
      <if test="record.watch != null" >
        watch = #{record.watch,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=VARCHAR},
      </if>
      <if test="record.updatetime != null" >
        updatetime = #{record.updatetime,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update course
    set id = #{record.id,jdbcType=INTEGER},
    userid = #{record.userid,jdbcType=INTEGER},
    name = #{record.name,jdbcType=VARCHAR},
    summary = #{record.summary,jdbcType=VARCHAR},
    introduction = #{record.introduction,jdbcType=VARCHAR},
    price = #{record.price,jdbcType=INTEGER},
    modularid = #{record.modularid,jdbcType=INTEGER},
    labelid = #{record.labelid,jdbcType=VARCHAR},
    cover = #{record.cover,jdbcType=VARCHAR},
    watch = #{record.watch,jdbcType=INTEGER},
    status = #{record.status,jdbcType=VARCHAR},
    createtime = #{record.createtime,jdbcType=VARCHAR},
    updatetime = #{record.updatetime,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.icylee.bean.Course" >
    update course
    <set >
      <if test="userid != null" >
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="summary != null" >
        summary = #{summary,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null" >
        introduction = #{introduction,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=INTEGER},
      </if>
      <if test="modularid != null" >
        modularid = #{modularid,jdbcType=INTEGER},
      </if>
      <if test="labelid != null" >
        labelid = #{labelid,jdbcType=VARCHAR},
      </if>
      <if test="cover != null" >
        cover = #{cover,jdbcType=VARCHAR},
      </if>
      <if test="watch != null" >
        watch = #{watch,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.icylee.bean.Course" >
    update course
    set userid = #{userid,jdbcType=INTEGER},
        name = #{name,jdbcType=VARCHAR},
        summary = #{summary,jdbcType=VARCHAR},
        introduction = #{introduction,jdbcType=VARCHAR},
        price = #{price,jdbcType=INTEGER},
        modularid = #{modularid,jdbcType=INTEGER},
        labelid = #{labelid,jdbcType=VARCHAR},
        cover = #{cover,jdbcType=VARCHAR},
        watch = #{watch,jdbcType=INTEGER},
        status = #{status,jdbcType=VARCHAR},
        createtime = #{createtime,jdbcType=VARCHAR},
        updatetime = #{updatetime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>