<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.icylee.dao.PlateMapper" >
  <resultMap id="BaseResultMap" type="cn.icylee.bean.Plate" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="plate" property="plate" jdbcType="VARCHAR" />
    <result column="ancestor" property="ancestor" jdbcType="INTEGER" />
    <result column="icon" property="icon" jdbcType="VARCHAR" />
    <result column="describe" property="describe" jdbcType="VARCHAR" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
  </resultMap>

  <select id="getPlateList" parameterType="cn.icylee.bean.TableParameter" resultType="cn.icylee.bean.Plate">
    SELECT * FROM
        ( SELECT * FROM plate WHERE plate LIKE '%${plate}%' LIMIT #{page}, #{limit} ) u
    ORDER BY id ${sort}
  </select>

  <select id="getIndexPlate" parameterType="java.lang.Integer" resultType="cn.icylee.bean.Plate">
    SELECT plate.*,
           (case when a_c.count_article is null then 0 when a_c.count_article is not null then a_c.count_article end) as articleCount,
           (case when f_c.count_follow is null then 0 when f_c.count_follow is not null then f_c.count_follow end) as followCount
    from plate
           LEFT JOIN ( SELECT plateid, count(*) as count_article from article GROUP BY plateid ) as a_c on a_c.plateid = plate.id
           LEFT JOIN ( SELECT dataid, datasource, count(*) as count_follow from follow GROUP BY dataid ) as f_c on f_c.dataid = plate.id and f_c.datasource = 'plate'
    where plate.id = #{id}
  </select>

  <select id="getFollowPlate" parameterType="cn.icylee.bean.Index" resultType="cn.icylee.bean.Plate">
    SELECT plate.*,
           (case when a_c.count_article is null then 0 when a_c.count_article is not null then a_c.count_article end) as articleCount
    FROM plate
           LEFT JOIN follow ON follow.userid=#{uid} AND follow.datasource="plate"
           LEFT JOIN ( SELECT plateid, count(*) as count_article from article GROUP BY plateid ) as a_c on a_c.plateid = plate.id
    WHERE plate.id=follow.dataid
    ORDER BY follow.createtime DESC
    LIMIT #{page}, #{limit}
  </select>

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, plate, ancestor, icon, `describe`, createtime, updatetime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.icylee.bean.PlateExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from plate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from plate
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from plate
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.icylee.bean.PlateExample" >
    delete from plate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.icylee.bean.Plate" useGeneratedKeys="true" keyProperty="id" keyColumn="id" >
    insert into plate (id, plate, ancestor,
                       icon, `describe`, createtime,
                       updatetime)
    values (#{id,jdbcType=INTEGER}, #{plate,jdbcType=VARCHAR}, #{ancestor,jdbcType=INTEGER},
            #{icon,jdbcType=VARCHAR}, #{describe,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP},
            #{updatetime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.icylee.bean.Plate" >
    insert into plate
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="plate != null" >
        plate,
      </if>
      <if test="ancestor != null" >
        ancestor,
      </if>
      <if test="icon != null" >
        icon,
      </if>
      <if test="describe != null" >
        `describe`,
      </if>
      <if test="createtime != null" >
        createtime,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="plate != null" >
        #{plate,jdbcType=VARCHAR},
      </if>
      <if test="ancestor != null" >
        #{ancestor,jdbcType=INTEGER},
      </if>
      <if test="icon != null" >
        #{icon,jdbcType=VARCHAR},
      </if>
      <if test="describe != null" >
        #{describe,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.icylee.bean.PlateExample" resultType="java.lang.Integer" >
    select count(*) from plate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update plate
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.plate != null" >
        plate = #{record.plate,jdbcType=VARCHAR},
      </if>
      <if test="record.ancestor != null" >
        ancestor = #{record.ancestor,jdbcType=INTEGER},
      </if>
      <if test="record.icon != null" >
        icon = #{record.icon,jdbcType=VARCHAR},
      </if>
      <if test="record.describe != null" >
        `describe` = #{record.describe,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatetime != null" >
        updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update plate
    set id = #{record.id,jdbcType=INTEGER},
    plate = #{record.plate,jdbcType=VARCHAR},
    ancestor = #{record.ancestor,jdbcType=INTEGER},
    icon = #{record.icon,jdbcType=VARCHAR},
    `describe` = #{record.describe,jdbcType=VARCHAR},
    createtime = #{record.createtime,jdbcType=TIMESTAMP},
    updatetime = #{record.updatetime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.icylee.bean.Plate" >
    update plate
    <set >
      <if test="plate != null" >
        plate = #{plate,jdbcType=VARCHAR},
      </if>
      <if test="ancestor != null" >
        ancestor = #{ancestor,jdbcType=INTEGER},
      </if>
      <if test="icon != null" >
        icon = #{icon,jdbcType=VARCHAR},
      </if>
      <if test="describe != null" >
        `describe` = #{describe,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.icylee.bean.Plate" >
    update plate
    set plate = #{plate,jdbcType=VARCHAR},
        ancestor = #{ancestor,jdbcType=INTEGER},
        icon = #{icon,jdbcType=VARCHAR},
        `describe` = #{describe,jdbcType=VARCHAR},
        createtime = #{createtime,jdbcType=TIMESTAMP},
        updatetime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
